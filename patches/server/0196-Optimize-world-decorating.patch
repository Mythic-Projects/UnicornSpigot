From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 8 Jul 2023 03:24:47 +0200
Subject: [PATCH] Optimize world decorating


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index bc662644cfc21871b037ef6a61bce6cc383ca814..02538a214c843d4949267c9e0203d5e9c127dd3b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -558,6 +558,12 @@ public class Chunk {
         }
     }
 
+    // Unicorn start
+    public boolean isEmpty(int x, int y, int z) {
+        return this.getBlockData(x, y, z).getBlock().getMaterial() == Material.AIR;
+    }
+    // Unicorn end
+
     private int g(int i, int j, int k) {
         if (j >> 4 >= this.sections.length) {
             return 0;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index d96cef96fd20d9676e234ecf7a8037a4b022efdf..26dbf487f987777d3bd2a327085f1a3b03b05d42 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -36,7 +36,7 @@ public class ChunkProviderHell implements IChunkProvider {
     double[] g;
 
     public ChunkProviderHell(World world, boolean flag, long i) {
-        this.w = new WorldGenMinable(Blocks.QUARTZ_ORE.getBlockData(), 14, BlockPredicate.a(Blocks.NETHERRACK));
+        this.w = new WorldGenMinable(Blocks.QUARTZ_ORE.getBlockData(), 14, Blocks.NETHERRACK); // Unicorn
         this.x = new WorldGenHellLava(Blocks.FLOWING_LAVA, true);
         this.y = new WorldGenHellLava(Blocks.FLOWING_LAVA, false);
         this.z = new WorldGenMushrooms(Blocks.BROWN_MUSHROOM);
diff --git a/src/main/java/net/minecraft/server/WorldGenAcaciaTree.java b/src/main/java/net/minecraft/server/WorldGenAcaciaTree.java
index 9a70548bd2be62d391703f4ab72161a5e3ab0dfe..fcb77ba8becaefe3800e85e3b233bf3ce346cc01 100644
--- a/src/main/java/net/minecraft/server/WorldGenAcaciaTree.java
+++ b/src/main/java/net/minecraft/server/WorldGenAcaciaTree.java
@@ -30,14 +30,17 @@ public class WorldGenAcaciaTree extends WorldGenTreeAbstract {
                     b0 = 2;
                 }
 
-                BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+                //BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(); // Unicorn
 
                 for (j = blockposition.getX() - b0; j <= blockposition.getX() + b0 && flag; ++j) {
                     for (k = blockposition.getZ() - b0; k <= blockposition.getZ() + b0 && flag; ++k) {
                         if (l >= 0 && l < 256) {
-                            if (!this.a(world.getType(blockposition_mutableblockposition.c(j, l, k)).getBlock())) {
+                            // Unicorn start
+                            IBlockData blockData = world.getTypeIfLoaded(j, l, k);
+                            if (blockData != null && !this.a(blockData.getBlock())) {
                                 flag = false;
                             }
+                            // Unicorn end
                         } else {
                             flag = false;
                         }
@@ -48,7 +51,13 @@ public class WorldGenAcaciaTree extends WorldGenTreeAbstract {
             if (!flag) {
                 return false;
             } else {
-                Block block = world.getType(blockposition.down()).getBlock();
+                // Unicorn start
+                IBlockData blockData = world.getTypeIfLoaded(blockposition.getX(), blockposition.getY() - 1, blockposition.getZ());
+                if (blockData == null) {
+                    return false;
+                }
+                Block block = blockData.getBlock();
+                // Unicorn end
 
                 if ((block == Blocks.GRASS || block == Blocks.DIRT) && blockposition.getY() < 256 - i - 1) {
                     this.a(world, blockposition.down());
diff --git a/src/main/java/net/minecraft/server/WorldGenGrass.java b/src/main/java/net/minecraft/server/WorldGenGrass.java
index 2c84c05843017c96a00b33d3698876f3322e41b7..9699807892e715f59db45d41f3148fdef55f4431 100644
--- a/src/main/java/net/minecraft/server/WorldGenGrass.java
+++ b/src/main/java/net/minecraft/server/WorldGenGrass.java
@@ -13,15 +13,34 @@ public class WorldGenGrass extends WorldGenerator {
     public boolean generate(World world, Random random, BlockPosition blockposition) {
         Block block;
 
-        while (((block = world.getType(blockposition).getBlock()).getMaterial() == Material.AIR || block.getMaterial() == Material.LEAVES) && blockposition.getY() > 0) {
-            blockposition = blockposition.down();
+        // Unicorn start
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) {
+            return false;
+        }
+        while (blockposition.getY() > 0) {
+            Material material = chunk.getBlockData(x, y, z).getBlock().getMaterial();
+            if (material != Material.AIR && material != Material.LEAVES) {
+                break;
+            }
+            y -= 1;
         }
 
         for (int i = 0; i < 128; ++i) {
-            BlockPosition blockposition1 = blockposition.a(random.nextInt(8) - random.nextInt(8), random.nextInt(4) - random.nextInt(4), random.nextInt(8) - random.nextInt(8));
-
-            if (world.isEmpty(blockposition1) && Blocks.TALLGRASS.f(world, blockposition1, this.a)) {
-                world.setTypeAndData(blockposition1, this.a, 2);
+            BlockPosition blockposition1 = new BlockPosition(x + random.nextInt(8) - random.nextInt(8), y + random.nextInt(4) - random.nextInt(4), z + random.nextInt(8) - random.nextInt(8));
+            int xLoop = blockposition1.getX();
+            int yLoop = blockposition1.getY();
+            int zLoop = blockposition1.getZ();
+            Chunk chunkLoop = world.getChunkIfLoaded(xLoop >> 4, zLoop >> 4);
+            if (chunkLoop == null) {
+                continue;
+            }
+            if (chunkLoop.isEmpty(xLoop, yLoop, zLoop) && Blocks.TALLGRASS.f(world, blockposition1, this.a)) {
+                world.setTypeAndData(chunkLoop, blockposition1, this.a, 2);
+        // Unicorn end
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenLiquids.java b/src/main/java/net/minecraft/server/WorldGenLiquids.java
index 044abd0c9e9e9402bf346b037f6deb00ef4bc124..abc510fba45c4db47b0e24500bfd46eef88c1f03 100644
--- a/src/main/java/net/minecraft/server/WorldGenLiquids.java
+++ b/src/main/java/net/minecraft/server/WorldGenLiquids.java
@@ -11,51 +11,57 @@ public class WorldGenLiquids extends WorldGenerator {
     }
 
     public boolean generate(World world, Random random, BlockPosition blockposition) {
-        if (world.getType(blockposition.up()).getBlock() != Blocks.STONE) {
+        // Unicorn start
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) {
             return false;
-        } else if (world.getType(blockposition.down()).getBlock() != Blocks.STONE) {
+        }
+        // Unicorn end
+        if (chunk.getBlockData(x, y + 1, z).getBlock() != Blocks.STONE) { // Unicorn
+            return false;
+        } else if (chunk.getBlockData(x, y - 1, z).getBlock() != Blocks.STONE) { // Unicorn
             return false;
-        } else if (world.getType(blockposition).getBlock().getMaterial() != Material.AIR && world.getType(blockposition).getBlock() != Blocks.STONE) {
+        // Unicorn start
+        }
+        Block block = chunk.getBlockData(x, y, z).getBlock();
+        if (block.getMaterial() != Material.AIR && block != Blocks.STONE) {
             return false;
+        // Unicorn end
         } else {
             int i = 0;
-
-            if (world.getType(blockposition.west()).getBlock() == Blocks.STONE) {
-                ++i;
-            }
-
-            if (world.getType(blockposition.east()).getBlock() == Blocks.STONE) {
-                ++i;
-            }
-
-            if (world.getType(blockposition.north()).getBlock() == Blocks.STONE) {
-                ++i;
-            }
-
-            if (world.getType(blockposition.south()).getBlock() == Blocks.STONE) {
-                ++i;
-            }
-
+            // Unicorn start
             int j = 0;
 
-            if (world.isEmpty(blockposition.west())) {
-                ++j;
+            Chunk chunkWest = world.getChunkIfLoaded((x - 1) >> 4, z >> 4);
+            if (chunkWest != null) {
+                if (chunkWest.getBlockData(x - 1, y, z).getBlock() == Blocks.STONE) ++i;
+                if (chunkWest.isEmpty(x - 1, y, z)) ++j;
             }
 
-            if (world.isEmpty(blockposition.east())) {
-                ++j;
+            Chunk chunkEast = world.getChunkIfLoaded((x + 1) >> 4, z >> 4);
+            if (chunkEast != null) {
+                if (chunkEast.getBlockData(x + 1, y, z).getBlock() == Blocks.STONE) ++i;
+                if (chunkEast.isEmpty(x + 1, y, z)) ++j;
             }
 
-            if (world.isEmpty(blockposition.north())) {
-                ++j;
+            Chunk chunkNorth = world.getChunkIfLoaded(x >> 4, (z - 1) >> 4);
+            if (chunkNorth != null) {
+                if (chunkNorth.getBlockData(x, y, z - 1).getBlock() == Blocks.STONE) ++i;
+                if (chunkNorth.isEmpty(x, y, z - 1)) ++j;
             }
 
-            if (world.isEmpty(blockposition.south())) {
-                ++j;
+            Chunk chunkSouth = world.getChunkIfLoaded(x >> 4, (z + 1) >> 4);
+            if (chunkSouth != null) {
+                if (chunkSouth.getBlockData(x, y, z + 1).getBlock() == Blocks.STONE) ++i;
+                if (chunkSouth.isEmpty(x, y, z + 1)) ++j;
             }
+            // Unicorn end
 
             if (i == 3 && j == 1) {
-                world.setTypeAndData(blockposition, this.a.getBlockData(), 2);
+                world.setTypeAndData(chunk, blockposition, this.a.getBlockData(), 2); // Unicorn
                 world.a(this.a, blockposition, random);
             }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenMinable.java b/src/main/java/net/minecraft/server/WorldGenMinable.java
index 2307c87b6c08e785be438515727821cffdd63ad8..106bfef625717b81bcb43c750afe9ab13808785e 100644
--- a/src/main/java/net/minecraft/server/WorldGenMinable.java
+++ b/src/main/java/net/minecraft/server/WorldGenMinable.java
@@ -7,24 +7,38 @@ public class WorldGenMinable extends WorldGenerator {
 
     private final IBlockData a;
     private final int b;
+    private final float b8; // Unicorn
+    private final Block toCheck; // Unicorn
     private final Predicate<IBlockData> c;
 
     public WorldGenMinable(IBlockData iblockdata, int i) {
-        this(iblockdata, i, BlockPredicate.a(Blocks.STONE));
+        this(iblockdata, i, Blocks.STONE);
     }
 
-    public WorldGenMinable(IBlockData iblockdata, int i, Predicate<IBlockData> predicate) {
+    public WorldGenMinable(IBlockData iblockdata, int i, Block toCheck, Predicate<IBlockData> predicate) {
         this.a = iblockdata;
         this.b = i;
+        this.b8 = (float) this.b / 8.0F; // Unicorn
+        this.toCheck = toCheck; // Unicorn
         this.c = predicate;
     }
 
+    // Unicorn start
+    public WorldGenMinable(IBlockData iblockdata, int i, Block toCheck) {
+        this(iblockdata, i, toCheck, null);
+    }
+    // Unicorn end
+
     public boolean generate(World world, Random random, BlockPosition blockposition) {
         float f = random.nextFloat() * 3.1415927F;
-        double d0 = (double) ((float) (blockposition.getX() + 8) + MathHelper.sin(f) * (float) this.b / 8.0F);
-        double d1 = (double) ((float) (blockposition.getX() + 8) - MathHelper.sin(f) * (float) this.b / 8.0F);
-        double d2 = (double) ((float) (blockposition.getZ() + 8) + MathHelper.cos(f) * (float) this.b / 8.0F);
-        double d3 = (double) ((float) (blockposition.getZ() + 8) - MathHelper.cos(f) * (float) this.b / 8.0F);
+        // Unicorn start - micro optimization
+        float sinF = MathHelper.sin(f) * this.b8;
+        float cosF = MathHelper.cos(f) * this.b8;
+        double d0 = ((float) (blockposition.getX() + 8) + sinF);
+        double d1 = ((float) (blockposition.getX() + 8) - sinF);
+        double d2 = ((float) (blockposition.getZ() + 8) + cosF);
+        double d3 = ((float) (blockposition.getZ() + 8) - cosF);
+        // Unicorn end
         double d4 = (double) (blockposition.getY() + random.nextInt(3) - 2);
         double d5 = (double) (blockposition.getY() + random.nextInt(3) - 2);
 
@@ -35,12 +49,12 @@ public class WorldGenMinable extends WorldGenerator {
             double d8 = d2 + (d3 - d2) * (double) f1;
             double d9 = random.nextDouble() * (double) this.b / 16.0D;
             double d10 = (double) (MathHelper.sin(3.1415927F * f1) + 1.0F) * d9 + 1.0D;
-            double d11 = (double) (MathHelper.sin(3.1415927F * f1) + 1.0F) * d9 + 1.0D;
+            //double d11 = (double) (MathHelper.sin(3.1415927F * f1) + 1.0F) * d9 + 1.0D; // Unicorn - don't calculate twice
             int j = MathHelper.floor(d6 - d10 / 2.0D);
-            int k = MathHelper.floor(d7 - d11 / 2.0D);
+            int k = MathHelper.floor(d7 - d10 / 2.0D); // Unicorn - d11 -> d10
             int l = MathHelper.floor(d8 - d10 / 2.0D);
             int i1 = MathHelper.floor(d6 + d10 / 2.0D);
-            int j1 = MathHelper.floor(d7 + d11 / 2.0D);
+            int j1 = MathHelper.floor(d7 + d10 / 2.0D); // Unicorn - d11 -> d10
             int k1 = MathHelper.floor(d8 + d10 / 2.0D);
 
             for (int l1 = j; l1 <= i1; ++l1) {
@@ -48,18 +62,23 @@ public class WorldGenMinable extends WorldGenerator {
 
                 if (d12 * d12 < 1.0D) {
                     for (int i2 = k; i2 <= j1; ++i2) {
-                        double d13 = ((double) i2 + 0.5D - d7) / (d11 / 2.0D);
+                        double d13 = ((double) i2 + 0.5D - d7) / (d10 / 2.0D); // Unicorn - d11 -> d10
 
                         if (d12 * d12 + d13 * d13 < 1.0D) {
                             for (int j2 = l; j2 <= k1; ++j2) {
                                 double d14 = ((double) j2 + 0.5D - d8) / (d10 / 2.0D);
 
                                 if (d12 * d12 + d13 * d13 + d14 * d14 < 1.0D) {
-                                    BlockPosition blockposition1 = new BlockPosition(l1, i2, j2);
+                                    // Unicorn start
+                                    Chunk chunk = world.getChunkIfLoaded(l1 >> 4, j2 >> 4);
+                                    if (chunk != null) {
+                                        IBlockData blockData = chunk.getBlockData(l1, i2, j2);
 
-                                    if (this.c.apply(world.getType(blockposition1))) {
-                                        world.setTypeAndData(blockposition1, this.a, 2);
+                                        if (blockData != null && this.c == null ? blockData.getBlock() == this.toCheck : this.c.apply(blockData)) {
+                                            world.setTypeAndData(chunk, new BlockPosition(l1, i2, j2), this.a, 2);
+                                        }
                                     }
+                                    // Unicorn end
                                 }
                             }
                         }
diff --git a/src/main/java/net/minecraft/server/WorldGenReed.java b/src/main/java/net/minecraft/server/WorldGenReed.java
index f53ff2bb24bbe0c9988c3a88cea050d56e9c4b85..483489aa1091a075da4a44f3005978ff00e8028c 100644
--- a/src/main/java/net/minecraft/server/WorldGenReed.java
+++ b/src/main/java/net/minecraft/server/WorldGenReed.java
@@ -9,8 +9,16 @@ public class WorldGenReed extends WorldGenerator {
     public boolean generate(World world, Random random, BlockPosition blockposition) {
         for (int i = 0; i < 20; ++i) {
             BlockPosition blockposition1 = blockposition.a(random.nextInt(4) - random.nextInt(4), 0, random.nextInt(4) - random.nextInt(4));
-
-            if (world.isEmpty(blockposition1)) {
+            // Unicorn start
+            int x = blockposition1.getX();
+            int y = blockposition1.getY();
+            int z = blockposition1.getZ();
+            Chunk chunk = world.getChunkIfLoaded(x >> 4, z >> 4);
+            if (chunk == null) {
+                continue;
+            }
+            if (chunk.isEmpty(x, y, z)) {
+            // Unicorn end
                 BlockPosition blockposition2 = blockposition1.down();
 
                 if (world.getType(blockposition2.west()).getBlock().getMaterial() == Material.WATER || world.getType(blockposition2.east()).getBlock().getMaterial() == Material.WATER || world.getType(blockposition2.north()).getBlock().getMaterial() == Material.WATER || world.getType(blockposition2.south()).getBlock().getMaterial() == Material.WATER) {
@@ -18,7 +26,7 @@ public class WorldGenReed extends WorldGenerator {
 
                     for (int k = 0; k < j; ++k) {
                         if (Blocks.REEDS.e(world, blockposition1)) {
-                            world.setTypeAndData(blockposition1.up(k), Blocks.REEDS.getBlockData(), 2);
+                            world.setTypeAndData(chunk, blockposition1.up(k), Blocks.REEDS.getBlockData(), 2); // Unicorn
                         }
                     }
                 }
