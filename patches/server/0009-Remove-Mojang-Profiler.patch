From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 15 Jun 2023 00:02:51 +0200
Subject: [PATCH] Remove Mojang Profiler


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 3b484ca5cebfff540e87bb25128d0d71d6c71ac3..988e6510f7a121be24b0ee0d559161a2e1d3c6ff 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -277,7 +277,6 @@ public class Chunk {
     }
 
     private void h(boolean flag) {
-        this.world.methodProfiler.a("recheckGaps");
         if (this.world.areChunksLoaded(new BlockPosition(this.locX * 16 + 8, 0, this.locZ * 16 + 8), 16)) {
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
@@ -304,7 +303,6 @@ public class Chunk {
                         }
 
                         if (flag) {
-                            this.world.methodProfiler.b();
                             return;
                         }
                     }
@@ -313,8 +311,6 @@ public class Chunk {
 
             this.k = false;
         }
-
-        this.world.methodProfiler.b();
     }
 
     private void c(int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/CommandDebug.java b/src/main/java/net/minecraft/server/CommandDebug.java
index 916298c3648219a4c98ebc74727a4368b5694085..8f97e6993d8c6ad2293e28efad20db224c597532 100644
--- a/src/main/java/net/minecraft/server/CommandDebug.java
+++ b/src/main/java/net/minecraft/server/CommandDebug.java
@@ -100,6 +100,7 @@ public class CommandDebug extends CommandAbstract {
     }
 
     private void a(int i, String s, StringBuilder stringbuilder) {
+        if (true) return; // Unicorn
         List list = MinecraftServer.getServer().methodProfiler.b(s);
 
         if (list != null && list.size() >= 3) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 1089859084d784ca297a2d8edb3e05e17e799f3e..961aa4f7a9fb678985b6cb797d16a77c1bccf93c 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -271,7 +271,6 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void K() {
-        this.world.methodProfiler.a("entityBaseTick");
         if (this.vehicle != null && this.vehicle.dead) {
             this.vehicle = null;
         }
@@ -283,7 +282,6 @@ public abstract class Entity implements ICommandListener {
         this.lastPitch = this.pitch;
         this.lastYaw = this.yaw;
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
-            this.world.methodProfiler.a("portal");
             MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
             int i = this.L();
 
@@ -318,8 +316,6 @@ public abstract class Entity implements ICommandListener {
             if (this.portalCooldown > 0) {
                 --this.portalCooldown;
             }
-
-            this.world.methodProfiler.b();
         }
 
         this.Y();
@@ -355,7 +351,6 @@ public abstract class Entity implements ICommandListener {
         }
 
         this.justCreated = false;
-        this.world.methodProfiler.b();
     }
 
     public int L() {
@@ -452,7 +447,6 @@ public abstract class Entity implements ICommandListener {
                 return;
             }
             // CraftBukkit end
-            this.world.methodProfiler.a("move");
             double d3 = this.locX;
             double d4 = this.locY;
             double d5 = this.locZ;
@@ -637,8 +631,6 @@ public abstract class Entity implements ICommandListener {
                 }
             }
 
-            this.world.methodProfiler.b();
-            this.world.methodProfiler.a("rest");
             this.recalcPosition();
             this.positionChanged = d6 != d0 || d8 != d2;
             this.E = d7 != d1;
@@ -765,8 +757,6 @@ public abstract class Entity implements ICommandListener {
                 this.makeSound("random.fizz", 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                 this.fireTicks = -this.maxFireTicks;
             }
-
-            this.world.methodProfiler.b();
         }
     }
 
@@ -1930,7 +1920,6 @@ public abstract class Entity implements ICommandListener {
 
     public void c(int i) {
         if (!this.world.isClientSide && !this.dead) {
-            this.world.methodProfiler.a("changeDimension");
             MinecraftServer minecraftserver = MinecraftServer.getServer();
             // CraftBukkit start - Move logic into new function "teleportToLocation"
             // int j = this.dimension;
@@ -1979,7 +1968,6 @@ public abstract class Entity implements ICommandListener {
 
             this.world.kill(this);
             this.dead = false;
-            this.world.methodProfiler.a("reposition");
             // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
             // minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
             boolean before = worldserver1.chunkProviderServer.forceChunkLoad;
@@ -1987,7 +1975,6 @@ public abstract class Entity implements ICommandListener {
             worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
             worldserver1.chunkProviderServer.forceChunkLoad = before;
             // CraftBukkit end
-            this.world.methodProfiler.c("reloading");
             Entity entity = EntityTypes.createEntityByName(EntityTypes.b(this), worldserver1);
 
             if (entity != null) {
@@ -2012,10 +1999,8 @@ public abstract class Entity implements ICommandListener {
             }
 
             this.dead = true;
-            this.world.methodProfiler.b();
             worldserver.j();
             worldserver1.j();
-            this.world.methodProfiler.b();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 77c87d8173811495f252627b8cc0ee3b4fe0c798..0f94e8c4e12dba3787fa9815f8316f81517590c2 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -148,13 +148,10 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void K() {
         super.K();
-        this.world.methodProfiler.a("mobBaseTick");
         if (this.isAlive() && this.random.nextInt(1000) < this.a_++) {
             this.a_ = -this.w();
             this.x();
         }
-
-        this.world.methodProfiler.b();
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
@@ -337,7 +334,6 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void m() {
         super.m();
-        this.world.methodProfiler.a("looting");
         if (!this.world.isClientSide && this.bY() && !this.aP && this.world.getGameRules().getBoolean("mobGriefing")) {
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
@@ -350,8 +346,6 @@ public abstract class EntityInsentient extends EntityLiving {
                 }
             }
         }
-
-        this.world.methodProfiler.b();
     }
 
     protected void a(EntityItem entityitem) {
@@ -454,10 +448,8 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     protected final void doTick() {
-        ++this.ticksFarFromPlayer;
-        this.world.methodProfiler.a("checkDespawn");
+        ++this.ticksFarFromPlayer;;
         this.D();
-        this.world.methodProfiler.b();
         // Spigot Start
         if ( this.fromMobSpawner )
         {
@@ -470,30 +462,14 @@ public abstract class EntityInsentient extends EntityLiving {
             return;
         }
         // Spigot End
-        this.world.methodProfiler.a("sensing");
         this.bk.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("targetSelector");
         this.targetSelector.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("goalSelector");
         this.goalSelector.a();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("navigation");
         this.navigation.k();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("mob tick");
         this.E();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("controls");
-        this.world.methodProfiler.a("move");
         this.moveController.c();
-        this.world.methodProfiler.c("look");
         this.lookController.a();
-        this.world.methodProfiler.c("jump");
         this.g.b();
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.b();
     }
 
     protected void E() {}
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 0933aa6ff416f56577337e6202b2e09a3cfe6678..1c9fd04853b79f8eeabacf05498d79dcd7d283e3 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -172,7 +172,6 @@ public abstract class EntityLiving extends Entity {
     public void K() {
         this.ay = this.az;
         super.K();
-        this.world.methodProfiler.a("livingEntityBaseTick");
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
@@ -265,7 +264,6 @@ public abstract class EntityLiving extends Entity {
         this.aL = this.aK;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        this.world.methodProfiler.b();
     }
 
     // CraftBukkit start
@@ -1518,10 +1516,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.aS += (f3 - this.aS) * 0.3F;
-        this.world.methodProfiler.a("headTurn");
         f2 = this.h(f1, f2);
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("rangeChecks");
 
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
@@ -1555,7 +1550,6 @@ public abstract class EntityLiving extends Entity {
             this.aL += 360.0F;
         }
 
-        this.world.methodProfiler.b();
         this.aT += f2;
     }
 
@@ -1620,20 +1614,15 @@ public abstract class EntityLiving extends Entity {
             this.motZ = 0.0D;
         }
 
-        this.world.methodProfiler.a("ai");
         if (this.bD()) {
             this.aY = false;
             this.aZ = 0.0F;
             this.ba = 0.0F;
             this.bb = 0.0F;
         } else if (this.bM()) {
-            this.world.methodProfiler.a("newAi");
             this.doTick();
-            this.world.methodProfiler.b();
         }
 
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("jump");
         if (this.aY) {
             if (this.V()) {
                 this.bG();
@@ -1647,19 +1636,13 @@ public abstract class EntityLiving extends Entity {
             this.bn = 0;
         }
 
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("travel");
         this.aZ *= 0.98F;
         this.ba *= 0.98F;
         this.bb *= 0.9F;
         this.g(this.aZ, this.ba);
-        this.world.methodProfiler.b();
-        this.world.methodProfiler.a("push");
         if (!this.world.isClientSide) {
             this.bL();
         }
-
-        this.world.methodProfiler.b();
     }
 
     protected void doTick() {}
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 0446e2be5003e8aa785618de48767d160dd32b19..6d4b42b31d28d8a45fedc3fdf1f9f63a01838f51 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -207,7 +207,6 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         int i;
 
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
-            this.world.methodProfiler.a("portal");
             MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
 
             i = this.L();
@@ -242,8 +241,6 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             if (this.portalCooldown > 0) {
                 --this.portalCooldown;
             }
-
-            this.world.methodProfiler.b();
         }
 
         if (this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntitySenses.java b/src/main/java/net/minecraft/server/EntitySenses.java
index 141a1ef8d171366300d438bf43f4030daaea60f2..bfd1e9c546090a05867c33434ccf2d286081c6b0 100644
--- a/src/main/java/net/minecraft/server/EntitySenses.java
+++ b/src/main/java/net/minecraft/server/EntitySenses.java
@@ -24,10 +24,8 @@ public class EntitySenses {
         } else if (this.c.contains(entity)) {
             return false;
         } else {
-            this.a.world.methodProfiler.a("canSee");
             boolean flag = this.a.hasLineOfSight(entity);
 
-            this.a.world.methodProfiler.b();
             if (flag) {
                 this.b.add(entity);
             } else {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 060235135854a61f1b0eead5cca765497f037b16..dd94c380fa9c44a6cc5579a295b067f5a116ba6d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -648,7 +648,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                     this.mayHaveDelayedTasks = true;
                     this.delayedTasksMaxNextTickTime = Math.max(getMillis() + 50L, this.nextTickTime);
                     this.waitUntilNextTick();
-                    this.methodProfiler.b();
                     this.isReady = true;
                     // Unicorn end
                 }
@@ -805,10 +804,8 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         if (this.T) {
             this.T = false;
             this.methodProfiler.a = true;
-            this.methodProfiler.a();
         }
 
-        this.methodProfiler.a("root");
         this.B();
         if (i - this.X >= 5000000000L) {
             this.X = i;
@@ -826,7 +823,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
             SpigotTimings.worldSaveTimer.startTiming(); // Spigot
-            this.methodProfiler.a("save");
             this.v.savePlayers();
             // Spigot Start
             // We replace this with saving each individual world as this.saveChunks(...) is broken,
@@ -839,7 +835,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             server.playerCommandState = false;
             // this.saveChunks(true);
             // Spigot End
-            this.methodProfiler.b();
             SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
@@ -848,10 +843,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         this.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining));
         // Unicorn end
-        this.methodProfiler.a("tallying");
         this.h[this.ticks % 100] = System.nanoTime() - i;
-        this.methodProfiler.b();
-        this.methodProfiler.a("snooper");
         if (getSnooperEnabled() && !this.n.d() && this.ticks > 100) {  // Spigot
             this.n.a();
         }
@@ -860,15 +852,12 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             this.n.b();
         }
 
-        this.methodProfiler.b();
-        this.methodProfiler.b();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot
     }
 
     public void B() {
         SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot
-        this.methodProfiler.a("jobs");
         Queue queue = this.j;
 
         // Spigot start
@@ -880,8 +869,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         // Spigot end
         SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot
 
-        this.methodProfiler.c("levels");
-
         SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
@@ -896,7 +883,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
 
         SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
+        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot`
 
         SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
@@ -916,17 +903,12 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             // if (i == 0 || this.getAllowNether()) {
                 WorldServer worldserver = this.worlds.get(i);
 
-                this.methodProfiler.a(worldserver.getWorldData().getName());
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
-                    this.methodProfiler.a("timeSync");
                     this.v.a(new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")), worldserver.worldProvider.getDimension());
-                    this.methodProfiler.b();
                 }
                 // CraftBukkit end */
 
-                this.methodProfiler.a("tick");
-
                 CrashReport crashreport;
 
                 try {
@@ -961,36 +943,27 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                     throw new ReportedException(crashreport);
                 }
 
-                this.methodProfiler.b();
-                this.methodProfiler.a("tracker");
                 worldserver.timings.tracker.startTiming(); // Spigot
                 worldserver.getTracker().updatePlayers();
                 worldserver.timings.tracker.stopTiming(); // Spigot
-                this.methodProfiler.b();
-                this.methodProfiler.b();
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
-        this.methodProfiler.c("connection");
         SpigotTimings.connectionTimer.startTiming(); // Spigot
         this.aq().c();
         SpigotTimings.connectionTimer.stopTiming(); // Spigot
-        this.methodProfiler.c("players");
         SpigotTimings.playerListTimer.startTiming(); // Spigot
         this.v.tick();
         SpigotTimings.playerListTimer.stopTiming(); // Spigot
-        this.methodProfiler.c("tickables");
 
         SpigotTimings.tickablesTimer.startTiming(); // Spigot
         for (i = 0; i < this.p.size(); ++i) {
             ((IUpdatePlayerListBox) this.p.get(i)).c();
         }
         SpigotTimings.tickablesTimer.stopTiming(); // Spigot
-
-        this.methodProfiler.b();
     }
 
     public boolean getAllowNether() {
@@ -1196,7 +1169,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
     public CrashReport b(CrashReport crashreport) {
         crashreport.g().a("Profiler Position", new Callable() {
             public String a() throws Exception {
-                return MinecraftServer.this.methodProfiler.a ? MinecraftServer.this.methodProfiler.c() : "N/A (disabled)";
+                return "N/A (disabled)"; // Unicorn
             }
 
             public Object call() throws Exception {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 8ebe58495efda8b15012946b6c13daa72a61e008..2cca8bcdab0bb262ee835bb87a488ed953043fb5 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -43,13 +43,11 @@ public abstract class NavigationAbstract {
         } else {
             float f = this.i();
 
-            this.c.methodProfiler.a("pathfind");
             BlockPosition blockposition1 = new BlockPosition(this.b);
             int i = (int) (f + 8.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0);
             PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, blockposition, f);
 
-            this.c.methodProfiler.b();
             return pathentity;
         }
     }
@@ -70,13 +68,11 @@ public abstract class NavigationAbstract {
         } else {
             float f = this.i();
 
-            this.c.methodProfiler.a("pathfind");
             BlockPosition blockposition = (new BlockPosition(this.b)).up();
             int i = (int) (f + 16.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition.a(-i, -i, -i), blockposition.a(i, i, i), 0);
             PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, entity, f);
 
-            this.c.methodProfiler.b();
             return pathentity;
         }
     }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index b03ba8575e2cd010f7b4ad0aaa4c5746275ba5f0..9d76d86567886222e6600237ab7462d65ececf92 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -45,7 +45,6 @@ public class PathfinderGoalSelector {
     }
 
     public void a() {
-        this.d.a("goalSetup");
         Iterator iterator;
         PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem;
 
@@ -82,16 +81,12 @@ public class PathfinderGoalSelector {
             }
         }
 
-        this.d.b();
-        this.d.a("goalTick");
         iterator = this.c.iterator();
 
         while (iterator.hasNext()) {
             pathfindergoalselector_pathfindergoalselectoritem = (PathfinderGoalSelector.PathfinderGoalSelectorItem) iterator.next();
             pathfindergoalselector_pathfindergoalselectoritem.a.e();
         }
-
-        this.d.b();
     }
 
     private boolean a(PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 7a714a99797c3106b533f5e42cee25212070b4d4..7a552d04cb5a3bba7ce89d6d80f0fe91d0dcb5f7 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -128,7 +128,6 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void c() {
         this.h = false;
         ++this.e;
-        this.minecraftServer.methodProfiler.a("keepAlive");
         if ((long) this.e - this.k > 40L) {
             this.k = (long) this.e;
             this.j = this.d();
@@ -136,7 +135,6 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             this.sendPacket(new PacketPlayOutKeepAlive(this.i));
         }
 
-        this.minecraftServer.methodProfiler.b();
         // CraftBukkit start
         for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
         /* Use thread-safe field access instead
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 8fb357b7c7ca20a12798493b87d958804599364c..0358cb5fc62a67ed99a006a3d44db11670360f6c 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -785,7 +785,6 @@ public abstract class PlayerList {
 
         // worldserver.methodProfiler.b();
         if (i != 1) {
-            worldserver.methodProfiler.a("placing");
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
             /*
@@ -858,9 +857,7 @@ public abstract class PlayerList {
         }
         */
 
-        worldserver.methodProfiler.b();
         if (i != 1) {
-            worldserver.methodProfiler.a("placing");
             /*
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
@@ -879,8 +876,6 @@ public abstract class PlayerList {
                 worldserver1.addEntity(entity);
                 worldserver1.entityJoinedWorld(entity, false);
             }
-
-            worldserver.methodProfiler.b();
         }
 
         entity.spawnIn(worldserver1);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index bf749c9da9efa4106253987210a6996a778caf5b..1bccc92fd6e9487ed2c870843caf6379cfb47529 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -429,9 +429,7 @@ public abstract class World implements IBlockAccess {
                 Block block1 = iblockdata1.getBlock();
 
                 if (block.p() != block1.p() || block.r() != block1.r()) {
-                    this.methodProfiler.a("checkLight");
                     this.x(blockposition);
-                    this.methodProfiler.b();
                 }
 
                 /*
@@ -1379,8 +1377,6 @@ public abstract class World implements IBlockAccess {
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
     public void tickEntities() {
-        this.methodProfiler.a("entities");
-        this.methodProfiler.a("global");
 
         int i;
         Entity entity;
@@ -1415,7 +1411,6 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        this.methodProfiler.c("remove");
         timings.entityRemoval.startTiming(); // Spigot
         this.entityList.removeAll(this.g);
 
@@ -1438,7 +1433,6 @@ public abstract class World implements IBlockAccess {
 
         this.g.clear();
         timings.entityRemoval.stopTiming(); // Spigot
-        this.methodProfiler.c("regular");
 
         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
         timings.entityTick.startTiming(); // Spigot
@@ -1462,7 +1456,6 @@ public abstract class World implements IBlockAccess {
                 entity.vehicle = null;
             }
 
-            this.methodProfiler.a("tick");
             if (!entity.dead) {
                 try {
                     entity.tickTimer.startTiming(); // Spigot
@@ -1481,8 +1474,6 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.b();
-            this.methodProfiler.a("remove");
             if (entity.dead) {
                 j = entity.ae;
                 k = entity.ag;
@@ -1495,13 +1486,10 @@ public abstract class World implements IBlockAccess {
                 guardEntityList = true; // Spigot
                 this.b(entity);
             }
-
-            this.methodProfiler.b();
         }
         guardEntityList = false; // Spigot
 
         timings.entityTick.stopTiming(); // Spigot
-        this.methodProfiler.c("blockEntities");
         timings.tileEntityTick.startTiming(); // Spigot
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
@@ -1574,7 +1562,6 @@ public abstract class World implements IBlockAccess {
         }
         // CraftBukkit end */
 
-        this.methodProfiler.c("pendingBlockEntities");
         if (!this.b.isEmpty()) {
             for (int l = 0; l < this.b.size(); ++l) {
                 TileEntity tileentity1 = (TileEntity) this.b.get(l);
@@ -1599,9 +1586,6 @@ public abstract class World implements IBlockAccess {
 
         timings.tileEntityPending.stopTiming(); // Spigot
         co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityList.size(); // Spigot
-
-        this.methodProfiler.b();
-        this.methodProfiler.b();
     }
 
     public boolean a(TileEntity tileentity) {
@@ -1670,7 +1654,6 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.a("chunkCheck");
             if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
                 entity.locX = entity.P;
             }
@@ -1709,7 +1692,6 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            this.methodProfiler.b();
             if (flag && entity.ad && entity.passenger != null) {
                 if (!entity.passenger.dead && entity.passenger.vehicle == entity) {
                     this.g(entity.passenger);
@@ -2212,7 +2194,6 @@ public abstract class World implements IBlockAccess {
 
     protected void D() {
         // this.chunkTickList.clear(); // CraftBukkit - removed
-        this.methodProfiler.a("buildList");
 
         int i;
         EntityHuman entityhuman;
@@ -2258,12 +2239,10 @@ public abstract class World implements IBlockAccess {
             // Spigot End
         }
 
-        this.methodProfiler.b();
         if (this.L > 0) {
             --this.L;
         }
 
-        this.methodProfiler.a("playerCheckLight");
         if (spigotConfigUnicorn.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             i = this.random.nextInt(this.players.size());
             entityhuman = (EntityHuman) this.players.get(i);
@@ -2272,14 +2251,11 @@ public abstract class World implements IBlockAccess {
             l = MathHelper.floor(entityhuman.locZ) + this.random.nextInt(11) - 5;
             this.x(new BlockPosition(j, k, l));
         }
-
-        this.methodProfiler.b();
     }
 
     protected abstract int q();
 
     protected void a(int i, int j, Chunk chunk) {
-        this.methodProfiler.c("moodSound");
         if (!this.paperConfigUnicorn.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
             this.m = this.m * 3 + 1013904223;
             int k = this.m >> 2;
@@ -2301,7 +2277,6 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        this.methodProfiler.c("checkLight");
         chunk.m();
     }
 
@@ -2440,7 +2415,6 @@ public abstract class World implements IBlockAccess {
             int i = 0;
             int j = 0;
 
-            this.methodProfiler.a("getBrightness");
             int k = this.b(enumskyblock, blockposition);
             int l = this.a(blockposition, enumskyblock);
             int i1 = blockposition.getX();
@@ -2502,9 +2476,6 @@ public abstract class World implements IBlockAccess {
                 i = 0;
             }
 
-            this.methodProfiler.b();
-            this.methodProfiler.a("checkedPosition < toCheckCount");
-
             while (i < j) {
                 l1 = this.H[i++];
                 i2 = (l1 & 63) - 32 + i1;
@@ -2561,7 +2532,6 @@ public abstract class World implements IBlockAccess {
                 }
             }
             // PaperSpigot end
-            this.methodProfiler.b();
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index ca94350b5abde5e4161c0605df1097ad2524416a..d9db9d2d49208e07640b84759eb6ab9e2710a121 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -231,7 +231,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
         // CraftBukkit end
         timings.doChunkUnload.startTiming(); // Spigot
-        this.methodProfiler.c("chunkSource");
         this.chunkProvider.unloadChunks();
         int j = this.a(1.0F);
 
@@ -245,29 +244,23 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         timings.doChunkUnload.stopTiming(); // Spigot
-        this.methodProfiler.c("tickPending");
         timings.scheduledBlocks.startTiming(); // Spigot
         this.a(false);
         timings.scheduledBlocks.stopTiming(); // Spigot
-        this.methodProfiler.c("tickBlocks");
         timings.chunkTicks.startTiming(); // Spigot
         this.h();
         timings.chunkTicks.stopTiming(); // Spigot
         this.antiXray.flushUpdates(this); // PaperSpigot
-        this.methodProfiler.c("chunkMap");
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
         timings.doChunkMap.stopTiming(); // Spigot
-        this.methodProfiler.c("village");
         timings.doVillages.startTiming(); // Spigot
         this.villages.tick();
         this.siegeManager.a();
         timings.doVillages.stopTiming(); // Spigot
-        this.methodProfiler.c("portalForcer");
         timings.doPortalForcer.startTiming(); // Spigot
         this.Q.a(this.getTime());
         timings.doPortalForcer.stopTiming(); // Spigot
-        this.methodProfiler.b();
         timings.doSounds.startTiming(); // Spigot
         this.ak();
 
@@ -413,14 +406,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int k = chunkX * 16;
                 int l = chunkZ * 16;
 
-                this.methodProfiler.a("getChunk");
                 Chunk chunk = this.getChunkAt(chunkX, chunkZ);
                 // CraftBukkit end
 
                 this.a(k, l, chunk);
-                this.methodProfiler.c("tickChunk");
                 chunk.b(false);
-                this.methodProfiler.c("thunder");
                 int i1;
                 BlockPosition blockposition;
 
@@ -433,7 +423,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                this.methodProfiler.c("iceandsnow");
                 if (!this.paperConfigUnicorn.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
@@ -471,7 +460,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                this.methodProfiler.c("tickBlocks");
                 timings.chunkTicksBlocks.startTiming(); // Spigot
                 i1 = this.getGameRules().c("randomTickSpeed");
                 if (i1 > 0) {
@@ -631,8 +619,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                this.methodProfiler.a("cleaning");
-
                 timings.scheduledBlocksCleanup.startTiming(); // Spigot
                 NextTickListEntry nextticklistentry;
 
@@ -665,8 +651,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                this.methodProfiler.b();
-                this.methodProfiler.a("ticking");
                 timings.scheduledBlocksTicking.startTiming(); // Spigot
                 Iterator iterator = this.V.iterator();
 
@@ -698,7 +682,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 timings.scheduledBlocksTicking.stopTiming(); // Spigot
 
-                this.methodProfiler.b();
                 this.V.clear();
                 return !this.M.isEmpty();
             }
