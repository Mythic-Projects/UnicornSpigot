From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Thu, 15 Jun 2023 00:23:16 +0200
Subject: [PATCH] Remove Spigot Timings


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index dc746da3abe6806305ea66b9e6b309803f5d8dc5..e8f7e82ebb34850713ba3ca8486dc93350e33906 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1065,7 +1065,6 @@ public class Chunk {
     }
 
     public void loadNearby(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {
-        world.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
         boolean flag = ichunkprovider.isChunkLoaded(i, j - 1);
         boolean flag1 = ichunkprovider.isChunkLoaded(i + 1, j);
         boolean flag2 = ichunkprovider.isChunkLoaded(i, j + 1);
@@ -1111,8 +1110,6 @@ public class Chunk {
                 ichunkprovider.a(ichunkprovider1, chunk, i - 1, j - 1);
             }
         }
-
-        world.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
     }
 
     public BlockPosition h(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 868a567829826f09190627587fb514842c787dbf..1c8e6221b3a9cdd59fd10ab8f2649da3e507e24a 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -152,7 +152,6 @@ public class ChunkProviderServer implements IChunkProvider {
         // CraftBukkit end
 
         if (chunk == null) {
-            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             chunk = this.loadChunk(i, j);
             if (chunk == null) {
                 if (this.chunkProvider == null) {
@@ -204,7 +203,6 @@ public class ChunkProviderServer implements IChunkProvider {
             }
             // CraftBukkit end
             chunk.loadNearby(this, this, i, j);
-            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
@@ -242,9 +240,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 if (chunk != null) {
                     chunk.setLastSaved(this.world.getTime());
                     if (this.chunkProvider != null) {
-                        world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
                         this.chunkProvider.recreateStructures(chunk, i, j);
-                        world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 6b244904d60ebbd2bf4a93a320c9b161e879451e..2a93fee0880834efd1689ff14dd64caa7b753544 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -43,9 +43,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     // CraftBukkit start - Add async variant, provide compatibility
     public Chunk a(World world, int i, int j) throws IOException {
-        world.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = loadChunk(world, i, j);
-        world.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
         if (data != null) {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
@@ -395,7 +393,6 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world) {
         // CraftBukkit end
-        world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
 
         if (nbttaglist1 != null) {
@@ -421,8 +418,6 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
-        world.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = nbttagcompound.getList("TileEntities", 10);
 
         if (nbttaglist2 != null) {
@@ -435,8 +430,6 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
-        world.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
 
         if (nbttagcompound.hasKeyOfType("TileTicks", 9)) {
             NBTTagList nbttaglist3 = nbttagcompound.getList("TileTicks", 10);
@@ -456,7 +449,6 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
             }
         }
-        world.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
 
         // return chunk; // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index f2b097e5548c804385dcb2fa3e463502ba0c46e2..81f65e6f10472c2e14e0e46aa723d092ca9eca99 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -411,7 +411,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void aO() {
-        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.l.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.l.remove(0);
 
@@ -425,8 +424,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             server.dispatchServerCommand(console, servercommand);
             // CraftBukkit end
         }
-
-        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean ae() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index dd94c380fa9c44a6cc5579a295b067f5a116ba6d..e32169012774522607d1575b07d037035bcf32f0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -792,7 +792,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
 
     // Unicorn start - Modern tick loop
     protected void A(java.util.function.BooleanSupplier shouldKeepTicking) throws ExceptionWorldConflict { // CraftBukkit - added throws
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot
         long i = System.nanoTime();
         isOversleep = true;
         this.controlTerminate(() -> !this.canOversleep());
@@ -822,7 +821,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         }
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
-            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.v.savePlayers();
             // Spigot Start
             // We replace this with saving each individual world as this.saveChunks(...) is broken,
@@ -835,7 +833,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             server.playerCommandState = false;
             // this.saveChunks(true);
             // Spigot End
-            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         // Unicorn start - Modern tick loop
@@ -853,11 +850,9 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         }
 
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot
     }
 
     public void B() {
-        SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot
         Queue queue = this.j;
 
         // Spigot start
@@ -867,25 +862,16 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             SystemUtils.a(entry, MinecraftServer.LOGGER);
          }
         // Spigot end
-        SpigotTimings.minecraftSchedulerTimer.stopTiming(); // Spigot
 
-        SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
         this.server.getScheduler().mainThreadHeartbeat(this.ticks);
-        SpigotTimings.bukkitSchedulerTimer.stopTiming(); // Spigot
-
         // Run tasks that are waiting on processing
-        SpigotTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
-        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
-        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot`
 
-        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
@@ -893,7 +879,6 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
-        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
 
         int i;
 
@@ -912,9 +897,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                 CrashReport crashreport;
 
                 try {
-                    worldserver.timings.doTick.startTiming(); // Spigot
                     worldserver.doTick();
-                    worldserver.timings.doTick.stopTiming(); // Spigot
                 } catch (Throwable throwable) {
                     // Spigot Start
                     try {
@@ -928,9 +911,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                 }
 
                 try {
-                    worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.tickEntities();
-                    worldserver.timings.tickEntities.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     // Spigot Start
                     try {
@@ -943,27 +924,19 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
                     throw new ReportedException(crashreport);
                 }
 
-                worldserver.timings.tracker.startTiming(); // Spigot
                 worldserver.getTracker().updatePlayers();
-                worldserver.timings.tracker.stopTiming(); // Spigot
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
-        SpigotTimings.connectionTimer.startTiming(); // Spigot
         this.aq().c();
-        SpigotTimings.connectionTimer.stopTiming(); // Spigot
-        SpigotTimings.playerListTimer.startTiming(); // Spigot
         this.v.tick();
-        SpigotTimings.playerListTimer.stopTiming(); // Spigot
 
-        SpigotTimings.tickablesTimer.startTiming(); // Spigot
         for (i = 0; i < this.p.size(); ++i) {
             ((IUpdatePlayerListBox) this.p.get(i)).c();
         }
-        SpigotTimings.tickablesTimer.stopTiming(); // Spigot
     }
 
     public boolean getAllowNether() {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 7a552d04cb5a3bba7ce89d6d80f0fe91d0dcb5f7..339430411f7efe022d0a1601599ba4ebaec377d9 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1170,7 +1170,6 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     // CraftBukkit end
 
    private void handleCommand(String s) {
-        SpigotTimings.playerCommandTimer.startTiming(); // Spigot
        // CraftBukkit start - whole method
         if ( SpigotConfig.get().commands.log ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
@@ -1181,22 +1180,18 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
             return;
         }
 
         try {
             if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
-                SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
                 return;
             }
         } catch (org.bukkit.command.CommandException ex) {
             player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
             java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-            SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
             return;
         }
-        SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
         // this.minecraftServer.getCommandHandler().a(this.player, s);
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 1bccc92fd6e9487ed2c870843caf6379cfb47529..41f7df5da651d1fc47366e7bda3229f69fae19d2 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1411,7 +1411,6 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        timings.entityRemoval.startTiming(); // Spigot
         this.entityList.removeAll(this.g);
 
         int j;
@@ -1432,10 +1431,8 @@ public abstract class World implements IBlockAccess {
         // Paper end
 
         this.g.clear();
-        timings.entityRemoval.stopTiming(); // Spigot
 
         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-        timings.entityTick.startTiming(); // Spigot
         guardEntityList = true; // Spigot
         // CraftBukkit start - Use field for loop variable
         co.aikar.timings.TimingHistory.entityTicks += this.entityList.size(); // Spigot
@@ -1458,12 +1455,9 @@ public abstract class World implements IBlockAccess {
 
             if (!entity.dead) {
                 try {
-                    entity.tickTimer.startTiming(); // Spigot
                     this.g(entity);
-                    entity.tickTimer.stopTiming(); // Spigot
                 } catch (Throwable throwable1) {
                     // PaperSpigot start - Prevent tile entity and entity crashes
-                    entity.tickTimer.stopTiming();
                     String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
                     System.err.println(msg);
                     throwable1.printStackTrace();
@@ -1489,8 +1483,6 @@ public abstract class World implements IBlockAccess {
         }
         guardEntityList = false; // Spigot
 
-        timings.entityTick.stopTiming(); // Spigot
-        timings.tileEntityTick.startTiming(); // Spigot
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
         if (!this.c.isEmpty()) {
@@ -1519,11 +1511,9 @@ public abstract class World implements IBlockAccess {
 
                 if (this.isLoaded(blockposition) && this.N.a(blockposition)) {
                     try {
-                        tileentity.tickTimer.startTiming(); // Spigot
                         ((IUpdatePlayerListBox) tileentity).c();
                     } catch (Throwable throwable2) {
                         // PaperSpigot start - Prevent tile entity and entity crashes
-                        tileentity.tickTimer.stopTiming();
                         String msg = "TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.position.getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ();
                         System.err.println(msg);
                         throwable2.printStackTrace();
@@ -1535,7 +1525,7 @@ public abstract class World implements IBlockAccess {
                     }
                     // Spigot start
                     finally {
-                        tileentity.tickTimer.stopTiming();
+
                     }
                     // Spigot end
                 }
@@ -1551,8 +1541,6 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        timings.tileEntityTick.stopTiming(); // Spigot
-        timings.tileEntityPending.startTiming(); // Spigot
         this.M = false;
         /* CraftBukkit start - Moved up
         if (!this.c.isEmpty()) {
@@ -1584,7 +1572,6 @@ public abstract class World implements IBlockAccess {
             this.b.clear();
         }
 
-        timings.tileEntityPending.stopTiming(); // Spigot
         co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityList.size(); // Spigot
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index ef1e09c649f7a559e50d63cac00451761e42a05c..469545559f9eb0fc6b50c30d93ad86bfa2a35122 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -23,6 +23,7 @@ import java.util.logging.Level;
 
 import org.bukkit.WeatherType;
 import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.HashTreeSet;
 
 import org.bukkit.event.block.BlockFormEvent;
@@ -223,13 +224,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
         long time = this.worldData.getTime();
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
-            timings.mobSpawn.startTiming(); // Spigot
             this.R.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
-            timings.mobSpawn.stopTiming(); // Spigot
             // CraftBukkit end
         }
         // CraftBukkit end
-        timings.doChunkUnload.startTiming(); // Spigot
         this.chunkProvider.unloadChunks();
         int j = this.a(1.0F);
 
@@ -242,29 +240,18 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.worldData.setDayTime(this.worldData.getDayTime() + 1L);
         }
 
-        timings.doChunkUnload.stopTiming(); // Spigot
-        timings.scheduledBlocks.startTiming(); // Spigot
         this.a(false);
-        timings.scheduledBlocks.stopTiming(); // Spigot
-        timings.chunkTicks.startTiming(); // Spigot
         this.h();
         timings.chunkTicks.stopTiming(); // Spigot
         this.antiXray.flushUpdates(this); // PaperSpigot
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
-        timings.doChunkMap.stopTiming(); // Spigot
-        timings.doVillages.startTiming(); // Spigot
         this.villages.tick();
         this.siegeManager.a();
-        timings.doVillages.stopTiming(); // Spigot
-        timings.doPortalForcer.startTiming(); // Spigot
         this.Q.a(this.getTime());
-        timings.doPortalForcer.stopTiming(); // Spigot
-        timings.doSounds.startTiming(); // Spigot
         this.ak();
 
         this.getWorld().processChunkGC(); // CraftBukkit
-        timings.doChunkGC.stopTiming(); // Spigot
     }
 
     public BiomeBase.BiomeMeta a(EnumCreatureType enumcreaturetype, BlockPosition blockposition) {
@@ -459,7 +446,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                timings.chunkTicksBlocks.startTiming(); // Spigot
                 i1 = this.getGameRules().c("randomTickSpeed");
                 if (i1 > 0) {
                     ChunkSection[] achunksection = chunk.getSections();
@@ -488,7 +474,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                         }
                     }
                 }
-                timings.chunkTicksBlocks.stopTiming(); // Spigot
             }
 
         }
@@ -618,7 +603,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                timings.scheduledBlocksCleanup.startTiming(); // Spigot
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
@@ -631,7 +615,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     this.M.remove(nextticklistentry);
                     this.V.add(nextticklistentry);
                 }
-                timings.scheduledBlocksCleanup.stopTiming(); // Spigot
 
                 // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
                 if (paperConfigUnicorn.tickNextTickListCapIgnoresRedstone) {
@@ -650,7 +633,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 // PaperSpigot end
 
-                timings.scheduledBlocksTicking.startTiming(); // Spigot
                 Iterator iterator = this.V.iterator();
 
                 while (iterator.hasNext()) {
@@ -661,7 +643,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     if (this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
                         IBlockData iblockdata = this.getType(nextticklistentry.a);
                         co.aikar.timings.Timing timing = iblockdata.getBlock().getTiming(); // Spigot
-                        timing.startTiming(); // Spigot
 
                         if (iblockdata.getBlock().getMaterial() != Material.AIR && Block.a(iblockdata.getBlock(), nextticklistentry.a())) {
                             try {
@@ -674,12 +655,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                                 throw new ReportedException(crashreport);
                             }
                         }
-                        timing.stopTiming(); // Spigot
                     } else {
                         this.a(nextticklistentry.a, nextticklistentry.a(), 0);
                     }
                 }
-                timings.scheduledBlocksTicking.stopTiming(); // Spigot
 
                 this.V.clear();
                 return !this.M.isEmpty();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 7640070937b361aeda4d200710deddfbbbc4fb42..34427798737679318961ea25919170a5266ac994 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -281,11 +281,9 @@ public class CraftWorld implements World {
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.chunks.get(LongHash.toLong(x, z));
 
         if (chunk == null) {
-            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             chunk = world.chunkProviderServer.loadChunk(x, z);
 
             chunkLoadPostProcess(chunk, x, z);
-            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
         return chunk != null;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
index 1178ad7f7b7eda10917a3f92b400c788543d0312..c31f17f71eb55987b7d31814249634338f260cc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
@@ -49,9 +49,7 @@ class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChu
         chunk.addEntities();
 
         if (queuedChunk.provider.chunkProvider != null) {
-            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
             queuedChunk.provider.chunkProvider.recreateStructures(chunk, queuedChunk.x, queuedChunk.z);
-            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
         }
 
         Server server = queuedChunk.provider.world.getServer();
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 4b1e352361e8f92f34901b23ff4326f0ec5cbd14..a9ba6ca73bbc17426956b0b633e4dcdc1066161b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -55,9 +55,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     public void run() {
-        if (timings != null && isSync()) timings.startTiming(); // Spigot
         task.run();
-        if (timings != null && isSync()) timings.stopTiming(); // Spigot
     }
 
     long getPeriod() {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 9551937b5dddb26ea1aa8c13733bea6417d73799..f109c7ce27341aa81cddc64d4ed1e41fcac3cef5 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -101,7 +101,6 @@ public class ActivationRange
      */
     public static void activateEntities(World world)
     {
-        SpigotTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfigUnicorn.entityActivationRange.ambient;
         final int animalActivationRange = world.spigotConfigUnicorn.entityActivationRange.animals;
         final int monsterActivationRange = world.spigotConfigUnicorn.entityActivationRange.monsters;
@@ -135,7 +134,6 @@ public class ActivationRange
                 }
             }
         }
-        SpigotTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
@@ -250,10 +248,8 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
-        SpigotTimings.checkIfActiveTimer.startTiming();
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.isAddedToChunk() || entity instanceof EntityFireworks || entity.loadChunks ) { // PaperSpigot
-            SpigotTimings.checkIfActiveTimer.stopTiming();
             return true;
         }
 
@@ -285,7 +281,6 @@ public class ActivationRange
         {
             isActive = false;
         }
-        SpigotTimings.checkIfActiveTimer.stopTiming();
         return isActive;
     }
 }
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index 5b15f0730293abfdbe6c82fddd8e1304c99c544a..443469912e738c278acefbc5908250182453b7a1 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -107,9 +107,7 @@ public class AntiXray
                 return;
             }
             // PaperSpigot end
-            SpigotTimings.antiXrayUpdateTimer.startTiming();
             updateNearbyBlocks( world, position, 2, false ); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
-            SpigotTimings.antiXrayUpdateTimer.stopTiming();
         }
     }
 
@@ -121,9 +119,7 @@ public class AntiXray
     {
         if ( world.spigotConfigUnicorn.antiXray.enabled )
         {
-            SpigotTimings.antiXrayObfuscateTimer.startTiming();
             obfuscate( chunkX, chunkY, bitmask, buffer, world );
-            SpigotTimings.antiXrayObfuscateTimer.stopTiming();
         }
     }
 
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index b5de410804f40bba29398dcff946477d67fa8926..9d7c78457fc516d1706080ac37fe674b7a84b73c 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -28,8 +28,6 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
 
 @Deprecated // Unicorn
 public class SpigotConfig
@@ -237,26 +235,6 @@ public class SpigotConfig
         bungee = getBoolean( "settings.bungeecord", false );
     }
 
-    private static void timings()
-    {
-        boolean timings = getBoolean( "timings.enabled", true );
-        boolean verboseTimings = getBoolean( "timings.verbose", true );
-        TimingsManager.privacy = getBoolean( "timings.server-name-privacy", false );
-        TimingsManager.hiddenConfigs = getList( "timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses"));
-        int timingHistoryInterval = getInt( "timings.history-interval", 300 );
-        int timingHistoryLength = getInt( "timings.history-length", 3600 );
-
-
-        Timings.setVerboseTimingsEnabled( verboseTimings );
-        Timings.setTimingsEnabled( timings );
-        Timings.setHistoryInterval( timingHistoryInterval * 20 );
-        Timings.setHistoryLength( timingHistoryLength * 20 );
-
-        Bukkit.getLogger().log( Level.INFO, "Spigot Timings: " + timings +
-            " - Verbose: " + verboseTimings +
-            " - Interval: " + timeSummary(Timings.getHistoryInterval() / 20) +
-            " - Length: " +  timeSummary(Timings.getHistoryLength() / 20));
-    }
     protected static String timeSummary(int seconds) {
         String time = "";
         if (seconds > 60*60) {
