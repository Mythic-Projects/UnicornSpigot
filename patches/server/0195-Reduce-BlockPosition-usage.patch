From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 8 Jul 2023 02:48:12 +0200
Subject: [PATCH] Reduce BlockPosition usage


diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index cb1ce9a828003104059b7c7d68af4326bba68157..cb795188fb2e16fe0227837903db339b27a08870 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -246,10 +246,15 @@ public abstract class BiomeBase {
     }
 
     public final float a(BlockPosition blockposition) {
-        if (blockposition.getY() > 64) {
-            float f = (float) (BiomeBase.ae.a((double) blockposition.getX() * 1.0D / 8.0D, (double) blockposition.getZ() * 1.0D / 8.0D) * 4.0D);
+    // Unicorn start
+        return this.getTemperature(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+    public final float getTemperature(int x, int y, int z) {
+        if (y > 64) {
+            float f = (float) (BiomeBase.ae.a((double) x * 1.0D / 8.0D, (double) z * 1.0D / 8.0D) * 4.0D);
 
-            return this.temperature - (f + (float) blockposition.getY() - 64.0F) * 0.05F / 30.0F;
+            return this.temperature - (f + (float) y - 64.0F) * 0.05F / 30.0F;
+    // Unicorn end
         } else {
             return this.temperature;
         }
diff --git a/src/main/java/net/minecraft/server/BlockBeacon.java b/src/main/java/net/minecraft/server/BlockBeacon.java
index b4289c43d0efe0b3e571f989bc2a69cfededfd46..aca15616ff40f1fc6a3addb3bf96b2f58ea70d19 100644
--- a/src/main/java/net/minecraft/server/BlockBeacon.java
+++ b/src/main/java/net/minecraft/server/BlockBeacon.java
@@ -65,25 +65,27 @@ public class BlockBeacon extends BlockContainer {
         /*HttpUtilities.a.submit(new Runnable() {
             public void run() {*/ // Paper
                 Chunk chunk = world.getChunkAtWorldCoords(blockposition);
-
+                // Unicorn start
+                int x = blockposition.getX();
+                int z = blockposition.getZ();
+                TileEntity tileentity = null;
                 for (int i = blockposition.getY() - 1; i >= 0; --i) {
-                    final BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), i, blockposition.getZ());
-
-                    if (!chunk.d(blockposition1)) {
+                    if (!chunk.dCords(x, i, z)) {
+                // Unicorn end
                         break;
                     }
 
-                    IBlockData iblockdata = world.getType(blockposition1);
+                    IBlockData iblockdata = chunk.getBlockData(x, i, z); // Unicorn
 
                     if (iblockdata.getBlock() == Blocks.BEACON) {
                         /*((WorldServer) world).postToMainThread(new Runnable() {
                             public void run() {*/ // Paper
-                                TileEntity tileentity = world.getTileEntity(blockposition);
+                                if (tileentity == null) tileentity = world.getTileEntity(blockposition); // Unicorn
 
                                 if (tileentity instanceof TileEntityBeacon) {
                                     ((TileEntityBeacon) tileentity).m();
                                     world.playBlockAction(blockposition, Blocks.BEACON, 1, 0);
-                                }
+                                } else { break; } // Unicorn
 
                             /*}
                         });*/ // Paper
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index 81a9085993a915abbb150cc046eac75b6d24e310..ffd4c995658b1b94195bff209c6d5f113a990774 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -26,7 +26,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
-        if (world.isLightLevel(blockposition.up(), 9)) { // Paper
+        if (world.isLightLevel(blockposition.getX(), blockposition.getY() + 1, blockposition.getZ(), 9)) { // Paper // Unicorn
             int i = ((Integer) iblockdata.get(BlockCrops.AGE)).intValue();
 
             if (i < 7) {
@@ -100,7 +100,12 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public boolean f(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        return (world.k(blockposition) >= 8 || world.i(blockposition)) && this.c(world.getType(blockposition.down()).getBlock());
+        // Unicorn start
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        return (world.k(x, y, z) >= 8 || world.i(x, y, z)) && this.c(world.getType(x, y - 1, z).getBlock());
+        // Unicorn end
     }
 
     protected Item l() {
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index b0d7926e13555a36c0fc587492ae71e6bc46caaa..18691bf27660bb02d0e95ae4fc7dbc0aed1c67bd 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -30,11 +30,16 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             int lightLevel = -1; // Paper
-            if (world.getLightLevel(blockposition.up()) < 4 && (lightLevel = world.getType(blockposition.up()).getBlock().p()) > 2) { // Paper
+            // Unicorn start
+            int x = blockposition.getX();
+            int y = blockposition.getY();
+            int z = blockposition.getZ();
+            if (world.getLightLevel(x, y + 1, z) < 4 && (lightLevel = world.getType(x, y + 1, z).getBlock().p()) > 2) { // Paper
+            // Unicorn end
                 // CraftBukkit start
                 // world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
                 org.bukkit.World bworld = world.getWorld();
-                BlockState blockState = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()).getState();
+                BlockState blockState = bworld.getBlockAt(x, y, z).getState(); // Unicorn
                 blockState.setType(CraftMagicNumbers.getMaterial(Blocks.DIRT));
 
                 BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
@@ -49,29 +54,36 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
                 // Paper start
                 // If light was calculated above, reuse it, else grab it
                 if (!ignoreLightLevel && lightLevel == -1) { // TacoSpigot
-                    lightLevel = world.getLightLevel(blockposition.up());
+                    lightLevel = world.getLightLevel(x, y + 1, z); // Unicorn
                 }
 
                 if (ignoreLightLevel || lightLevel >= 9) { // TacoSpigot
                 // Paper end
                     for (int i = 0; i < Math.min(4, Math.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
-                        BlockPosition blockposition1 = blockposition.a(random.nextInt(3) - 1, random.nextInt(5) - 3, random.nextInt(3) - 1);
-                        Block block = world.getType(blockposition1.up()).getBlock();
                         // Unicorn start
-                        IBlockData iblockdata1 = world.getTypeIfLoaded(blockposition1);
+                        int x1 = x + random.nextInt(3) - 1;
+                        int y1 = y + random.nextInt(5) - 3;
+                        int z1 = z + random.nextInt(3) - 1;
+                        IBlockData iblockdata1 = world.getTypeIfLoaded(x1, y1, z1);
                         if (iblockdata1 == null) {
                             continue;
                         }
+                        world.getTypeIfLoaded(x1, y1 + 1, z1);
+                        IBlockData iblockdata2 = world.getTypeIfLoaded(x1, y1 + 1, z1);
+                        if (iblockdata2 == null) {
+                            continue;
+                        }
+                        Block block = iblockdata1.getBlock();
                         // Unicorn end
 
-                        if (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.isLightLevel(blockposition1.up(),4) && block.p() <= 2) { // Paper
+                        if (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.isLightLevel(x1, y1 + 1, z1,4) && block.p() <= 2) { // Paper // Unicorn
                             // CraftBukkit start
                             // world.setTypeUpdate(blockposition1, Blocks.GRASS.getBlockData());
                             org.bukkit.World bworld = world.getWorld();
-                            BlockState blockState = bworld.getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()).getState();
+                            BlockState blockState = bworld.getBlockAt(x1, y1, z1).getState(); // Unicorn
                             blockState.setType(CraftMagicNumbers.getMaterial(Blocks.GRASS));
 
-                            BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), blockState);
+                            BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(x, y, z), blockState); // Unicorn
                             world.getServer().getPluginManager().callEvent(event);
 
                             if (!event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index a05412491412b5a6acffd6b49a894702e920dbb0..7c3a49038f418cc9b1ab1eb151a5a4128c9c01fb 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -43,13 +43,13 @@ public class BlockMycel extends Block {
                 }
                 // CraftBukkit end
             } else {
-                if (world.isLightLevel(blockposition.up(), 9)) { // Paper
+                if (world.isLightLevel(blockposition.getX(), blockposition.getY() + 1, blockposition.getZ(), 9)) { // Paper // Unicorn
                     for (int i = 0; i < Math.min(4, Math.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
                         BlockPosition blockposition1 = blockposition.a(random.nextInt(3) - 1, random.nextInt(5) - 3, random.nextInt(3) - 1);
                         IBlockData iblockdata1 = world.getType(blockposition1);
                         Block block = world.getType(blockposition1.up()).getBlock();
 
-                        if (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.isLightLevel(blockposition1.up(), 4) && block.p() <= 2) { // Paper
+                        if (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.DIRT && world.isLightLevel(blockposition1.getX(), blockposition1.getY() + 1, blockposition1.getZ(), 4) && block.p() <= 2) { // Paper // Unicorn
                             // CraftBukkit start
                             // world.setTypeUpdate(blockposition1, this.getBlockData());
                             org.bukkit.World bworld = world.getWorld();
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 9069dd15f518bd4c43a2e818911e01e628f28e3f..47221ae8db24e8e4ff59ae34ce52a11569894bc2 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -32,7 +32,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             super.b(world, blockposition, iblockdata, random);
-            if (world.isLightLevel(blockposition.up(), 9) && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfigUnicorn.growth.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) { // Paper
+            if (world.isLightLevel(blockposition.getX(), blockposition.getY() + 1, blockposition.getZ(), 9) && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfigUnicorn.growth.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) { // Paper // Unicorn
                 // CraftBukkit start
                 world.captureTreeGeneration = true;
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 41046f718030df6a018f39334f4c602a574440ae..5eb953ec4a04917841320f67eed23f452325f070 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -52,7 +52,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
-        if (world.isLightLevel(blockposition.up(), 9)) { // Paper
+        if (world.isLightLevel(blockposition.getX(), blockposition.getY() + 1, blockposition.getZ(), 9)) { // Paper // Unicorn
             float f = BlockCrops.a((Block) this, world, blockposition);
 
             if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfigUnicorn.growth.pumpkinModifier : world.spigotConfigUnicorn.growth.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index fc6369a0bcc5bf359061abbf32fbcdcee0100c0d..bc662644cfc21871b037ef6a61bce6cc383ca814 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -259,7 +259,7 @@ public class Chunk {
 
                                 if (chunksection != null) {
                                     chunksection.a(j, i1 & 15, k, l);
-                                    this.world.n(new BlockPosition((this.locX << 4) + j, i1, (this.locZ << 4) + k));
+                                    //this.world.n(new BlockPosition((this.locX << 4) + j, i1, (this.locZ << 4) + k)); // Unicorn - unused
                                 }
                             }
 
@@ -319,7 +319,7 @@ public class Chunk {
     }
 
     private void c(int i, int j, int k) {
-        int l = this.world.getHighestBlockYAt(new BlockPosition(i, 0, j)).getY();
+        int l = this.world.getHighestYAt(i, j);
 
         if (l > k) {
             this.a(i, j, k, l + 1);
@@ -368,7 +368,7 @@ public class Chunk {
                         chunksection = this.sections[l1 >> 4];
                         if (chunksection != null) {
                             chunksection.a(i, l1 & 15, k, 15);
-                            this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
+                            //this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k)); // Unicorn - unused
                         }
                     }
                 } else {
@@ -376,7 +376,7 @@ public class Chunk {
                         chunksection = this.sections[l1 >> 4];
                         if (chunksection != null) {
                             chunksection.a(i, l1 & 15, k, 0);
-                            this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
+                            //this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k)); // Unicorn - unused
                         }
                     }
                 }
@@ -573,9 +573,14 @@ public class Chunk {
     }
 
     public IBlockData a(BlockPosition blockposition, IBlockData iblockdata) {
-        int i = blockposition.getX() & 15;
-        int j = blockposition.getY();
-        int k = blockposition.getZ() & 15;
+        // Unicorn start
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        int i = x & 15;
+        int j = y;
+        int k = z & 15;
+        // Unicorn end
         int l = k << 4 | i;
 
         if (j >= this.f[l] - 1) {
@@ -583,7 +588,7 @@ public class Chunk {
         }
 
         int i1 = this.heightMap[l];
-        IBlockData iblockdata1 = this.getBlockData(blockposition);
+        IBlockData iblockdata1 = this.getBlockData(x, y, z);
 
         if (iblockdata1 == iblockdata) {
             return null;
@@ -628,7 +633,7 @@ public class Chunk {
                         this.d(i, j, k);
                     }
 
-                    if (j1 != k1 && (j1 < k1 || this.getBrightness(EnumSkyBlock.SKY, blockposition) > 0 || this.getBrightness(EnumSkyBlock.BLOCK, blockposition) > 0)) {
+                    if (j1 != k1 && (j1 < k1 || this.getBrightness(EnumSkyBlock.SKY, x, y, z) > 0 || this.getBrightness(EnumSkyBlock.BLOCK, x, y, z) > 0)) { // Unicorn
                         this.d(i, k);
                     }
                 }
@@ -666,18 +671,28 @@ public class Chunk {
     }
 
     public int getBrightness(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
-        int i = blockposition.getX() & 15;
-        int j = blockposition.getY();
-        int k = blockposition.getZ() & 15;
+    // Unicorn start
+        return this.getBrightness(enumskyblock, blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+    public int getBrightness(EnumSkyBlock enumskyblock, int x, int y, int z) {
+        int i = x & 15;
+        int j = y;
+        int k = z & 15;
         ChunkSection chunksection = this.sections[j >> 4];
 
-        return chunksection == null ? (this.d(blockposition) ? enumskyblock.c : 0) : (enumskyblock == EnumSkyBlock.SKY ? (this.world.worldProvider.o() ? 0 : chunksection.d(i, j & 15, k)) : (enumskyblock == EnumSkyBlock.BLOCK ? chunksection.e(i, j & 15, k) : enumskyblock.c));
+        return chunksection == null ? (this.dCords(x, y, z) ? enumskyblock.c : 0) : (enumskyblock == EnumSkyBlock.SKY ? (this.world.worldProvider.o() ? 0 : chunksection.d(i, j & 15, k)) : (enumskyblock == EnumSkyBlock.BLOCK ? chunksection.e(i, j & 15, k) : enumskyblock.c));
     }
+    // Unicorn end
 
     public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {
-        int j = blockposition.getX() & 15;
-        int k = blockposition.getY();
-        int l = blockposition.getZ() & 15;
+    // Unicorn start
+        this.a(enumskyblock, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+    }
+
+    public void a(EnumSkyBlock enumskyblock, int x, int y, int z, int i) {
+        int j = x & 15;
+        int k = y;
+        int l = z & 15;
         ChunkSection chunksection = this.sections[k >> 4];
 
         if (chunksection == null) {
@@ -693,24 +708,28 @@ public class Chunk {
         } else if (enumskyblock == EnumSkyBlock.BLOCK) {
             chunksection.b(j, k & 15, l, i);
         }
-
     }
+    // Unicorn end
 
     public final int getLightSubtracted(BlockPosition blockposition, int i) { return this.a(blockposition, i); } // Paper - OBFHELPER
+    public final int getLightSubtracted(int x, int y, int z, int i) { return this.aCords(x, y, z, i); } // Paper - OBFHELPER
 
     public int a(BlockPosition blockposition, int i) {
-        int j = blockposition.getX() & 15;
-        int k = blockposition.getY();
-        int l = blockposition.getZ() & 15;
-        ChunkSection chunksection = this.sections[k >> 4];
+    // Unicorn end
+        return this.aCords(blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+    }
+    public int aCords(int x, int y, int z, int i) {
+        int j = x & 15;
+        int l = z & 15;
+        ChunkSection chunksection = this.sections[y >> 4];
 
         if (chunksection == null) {
             return !this.world.worldProvider.o() && i < EnumSkyBlock.SKY.c ? EnumSkyBlock.SKY.c - i : 0;
         } else {
-            int i1 = this.world.worldProvider.o() ? 0 : chunksection.d(j, k & 15, l);
+            int i1 = this.world.worldProvider.o() ? 0 : chunksection.d(j, y & 15, l);
 
             i1 -= i;
-            int j1 = chunksection.e(j, k & 15, l);
+            int j1 = chunksection.e(j, y & 15, l);
 
             if (j1 > i1) {
                 i1 = j1;
@@ -719,6 +738,7 @@ public class Chunk {
             return i1;
         }
     }
+    // Unicorn end
 
     public void a(Entity entity) {
         this.r = true;
@@ -814,12 +834,16 @@ public class Chunk {
     }
 
     public boolean d(BlockPosition blockposition) {
-        int i = blockposition.getX() & 15;
-        int j = blockposition.getY();
-        int k = blockposition.getZ() & 15;
+    // Unicorn start
+        return dCords(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
 
-        return j >= this.heightMap[k << 4 | i];
+    public boolean dCords(int x, int y, int z) {
+        int i = x & 15;
+        int k = z & 15;
+        return y >= this.heightMap[k << 4 | i];
     }
+    // Unicorn end
 
     private TileEntity i(BlockPosition blockposition) {
         Block block = this.getType(blockposition);
@@ -1329,13 +1353,17 @@ public class Chunk {
     }
 
     public BiomeBase getBiome(BlockPosition blockposition, WorldChunkManager worldchunkmanager) {
-        int i = blockposition.getX() & 15;
-        int j = blockposition.getZ() & 15;
+    // Unicorn start
+        return getBiome(blockposition.getX(), blockposition.getZ(), worldchunkmanager);
+    }
+    public BiomeBase getBiome(int x, int z, WorldChunkManager worldchunkmanager) {
+        int i = x & 15;
+        int j = z & 15;
         int k = this.e[j << 4 | i] & 255;
         BiomeBase biomebase;
 
         if (k == 255) {
-            biomebase = worldchunkmanager.getBiome(blockposition, BiomeBase.PLAINS);
+            biomebase = worldchunkmanager.getBiome(x, z, BiomeBase.PLAINS);
             k = biomebase.id;
             this.e[j << 4 | i] = (byte) (k & 255);
         }
@@ -1343,6 +1371,7 @@ public class Chunk {
         biomebase = BiomeBase.getBiome(k);
         return biomebase == null ? BiomeBase.PLAINS : biomebase;
     }
+    // Unicorn end
 
     public byte[] getBiomeIndex() {
         return this.e;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index 1fc952d11525f7a1e1b1c7b96c9b7fe5e0975dbb..b070933dba4729c9f5472211fc48c20b9183e336 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -135,7 +135,7 @@ public class ChunkProviderFlat implements IChunkProvider {
         int k = i * 16;
         int l = j * 16;
         BlockPosition blockposition = new BlockPosition(k, 0, l);
-        BiomeBase biomebase = this.a.getBiome(new BlockPosition(k + 16, 0, l + 16));
+        BiomeBase biomebase = this.a.getBiome(k + 16, l + 16); // Unicorn
         boolean flag = false;
 
         this.b.setSeed(this.a.getSeed());
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index 74dc6a8238c3762cdd6d3afd49fd54e14c963a23..cd1782a0161852475554de377924e35f437d052e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -291,7 +291,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
         int k = i * 16;
         int l = j * 16;
         BlockPosition blockposition = new BlockPosition(k, 0, l);
-        BiomeBase biomebase = this.m.getBiome(blockposition.a(16, 0, 16));
+        BiomeBase biomebase = this.m.getBiome(k + 16, l + 16); // Unicorn
 
         this.h.setSeed(this.m.getSeed());
         long i1 = this.h.nextLong() / 2L * 2L + 1L;
diff --git a/src/main/java/net/minecraft/server/CrashReportSystemDetails.java b/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
index cd972eb3675eb3c64fbfab85457d3f7955c337f1..74c27e3fd064d0214bc8f0e150ed95efdba537fe 100644
--- a/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
+++ b/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+import org.jetbrains.annotations.NotNull;
 
 public class CrashReportSystemDetails {
 
@@ -21,10 +22,23 @@ public class CrashReportSystemDetails {
         return String.format("%.2f,%.2f,%.2f - %s", new Object[] { Double.valueOf(d0), Double.valueOf(d1), Double.valueOf(d2), a(new BlockPosition(d0, d1, d2))});
     }
 
+    // Unicorn start
+    public static String a(int x, int z) {
+        return a(x, 0, z);
+    }
+    // Unicorn end
+
     public static String a(BlockPosition blockposition) {
         int i = blockposition.getX();
         int j = blockposition.getY();
         int k = blockposition.getZ();
+    // Unicorn start
+        return a(i, j, k);
+    }
+
+    @NotNull
+    public static String a(int i, int j, int k) {
+    // Unicorn end
         StringBuilder stringbuilder = new StringBuilder();
 
         try {
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index a8315297b3b258cf23fb83056a531efd2759da05..dbf1ec5ba80491107ab37ecc59743f1a5393fa6e 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -69,9 +69,8 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.getBoundingBox().b);
         int k = MathHelper.floor(this.locZ);
-        BlockPosition blockposition = new BlockPosition(i, j, k);
 
-        return this.world.getType(blockposition.down()).getBlock() == this.bn && this.world.k(blockposition) > 8 && super.bR();
+        return this.world.getType(i, j - 1, k).getBlock() == this.bn && this.world.k(i, j, k) > 8 && super.bR(); // Unicorn
     }
 
     public int w() {
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index fd2c3673834f25902eaef299214ef4b286bbbaae..1c6869316745f4eacb31340c63218293700d0445 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -102,10 +102,14 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
     }
 
     protected boolean n_() {
-        BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ);
+        // Unicorn start
+        int x = MathHelper.floor(this.locX);
+        int y = MathHelper.floor(this.getBoundingBox().b);
+        int z = MathHelper.floor(this.locZ);
 
-        if (this.world.b(EnumSkyBlock.SKY, blockposition) > this.random.nextInt(32)) {
+        if (this.world.b(EnumSkyBlock.SKY, x, y, z) > this.random.nextInt(32)) {
             return false;
+        // Unicorn end
         } else {
             boolean passes; // Paper
 
@@ -114,10 +118,10 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
                 this.world.c(10);
             // Paper start
-                passes = !world.isLightLevel(blockposition, this.random.nextInt(9));
+                passes = !world.isLightLevel(x, y, z, this.random.nextInt(9)); // Unicorn
                 this.world.c(j);
             } else {
-                passes = !world.isLightLevel(blockposition, this.random.nextInt(9));
+                passes = !world.isLightLevel(x, y, z, this.random.nextInt(9)); // Unicorn
             }
             return passes;
             // Paper end
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 743c5c322c7a0cf31423be12d43d9b2a882a9bb1..7182f196a30ef76a39f52e83f74883a7745fedb7 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -375,7 +375,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     protected void i_() {
         if (UnicornConfig.get().settings.disableStatisticsAndAchievements) return; // Unicorn
-        BiomeBase biomebase = this.world.getBiome(new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ)));
+        BiomeBase biomebase = this.world.getBiome(MathHelper.floor(this.locX), MathHelper.floor(this.locZ)); // Unicorn
         String s = biomebase.ah;
         AchievementSet achievementset = (AchievementSet) this.getStatisticManager().b((Statistic) AchievementList.L);
 
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index cb875c75d76635f956e5fca7e89b716823654028..326f668b749a5662a981cd4b771323d3de207f09 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -36,7 +36,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
                 this.damageEntity(DamageSource.DROWN, 1.0F);
             }
 
-            if (this.world.getBiome(new BlockPosition(i, 0, k)).a(new BlockPosition(i, j, k)) > 1.0F) {
+            if (this.world.getBiome(i, k).getTemperature(i, j, k) > 1.0F) { // Unicorn
                 this.damageEntity(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
             }
 
@@ -44,9 +44,8 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
                 i = MathHelper.floor(this.locX + (double) ((float) (l % 2 * 2 - 1) * 0.25F));
                 j = MathHelper.floor(this.locY);
                 k = MathHelper.floor(this.locZ + (double) ((float) (l / 2 % 2 * 2 - 1) * 0.25F));
-                BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                if (this.world.getType(blockposition).getBlock().getMaterial() == Material.AIR && this.world.getBiome(new BlockPosition(i, 0, k)).a(blockposition) < 0.8F && Blocks.SNOW_LAYER.canPlace(this.world, blockposition)) {
+                if (this.world.getType(i, j, k).getBlock().getMaterial() == Material.AIR && this.world.getBiome(i, k).getTemperature(i, j, k) < 0.8F && Blocks.SNOW_LAYER.canPlace(this.world, new BlockPosition(i, j, k))) { // Unicorn
                     // CraftBukkit start
                     org.bukkit.block.BlockState blockState = this.world.getWorld().getBlockAt(i, j, k).getState();
                     blockState.setType(CraftMagicNumbers.getMaterial(Blocks.SNOW_LAYER));
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index ca612d14f957e4b5f1f3a32d19264d7d17c7c472..dd53eddfc48348c81a5ee204813f1208efb86047 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -186,7 +186,7 @@ public class EntityZombie extends EntityMonster {
                     int j1 = j + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
                     int k1 = k + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
 
-                    if (World.a((IBlockAccess) this.world, new BlockPosition(i1, j1 - 1, k1)) && !this.world.isLightLevel(new BlockPosition(i1, j1, k1), 10)) { // Paper
+                    if (World.a((IBlockAccess) this.world, new BlockPosition(i1, j1 - 1, k1)) && !this.world.isLightLevel(i1, j1, k1, 10)) { // Paper // Unicorn
                         entityzombie.setPosition((double) i1, (double) j1, (double) k1);
                         if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), (Entity) entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
                             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index e0a636935920c3d095f76dd9002c3a30f851dcab..7eb214d697e3085b008eaf05b610a8cd9608a42d 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -14,12 +14,10 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
-import co.aikar.timings.SpigotTimings;
 
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -269,19 +267,24 @@ public abstract class World implements IBlockAccess {
     }
 
     public BiomeBase getBiome(final BlockPosition blockposition) {
+    // Unicorn start
+        return this.getBiome(blockposition.getX(), blockposition.getZ());
+    }
+    public BiomeBase getBiome(int x, int z) {
+    // Unicorn end
         // Unicorn start - don't look chunk twice
-        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
         if (chunk != null) {
         // Unicorn end
             try {
-                return chunk.getBiome(blockposition, this.worldProvider.m());
+                return chunk.getBiome(x, z, this.worldProvider.m()); // Unicorn
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Getting biome");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Coordinates of biome request");
 
                 crashreportsystemdetails.a("Location", new Callable() {
                     public String a() throws Exception {
-                        return CrashReportSystemDetails.a(blockposition);
+                        return CrashReportSystemDetails.a(x, z); // Unicorn
                     }
 
                     public Object call() throws Exception {
@@ -291,7 +294,7 @@ public abstract class World implements IBlockAccess {
                 throw new ReportedException(crashreport);
             }
         } else {
-            return this.worldProvider.m().getBiome(blockposition, BiomeBase.PLAINS);
+            return this.worldProvider.m().getBiome(x, z, BiomeBase.PLAINS); // Unicorn
         }
     }
 
@@ -421,18 +424,22 @@ public abstract class World implements IBlockAccess {
 
     // Unicorn start
     private void setCapturedBlockType(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        this.setCapturedBlockType(blockposition.getX(), blockposition.getY(), blockposition.getZ(), iblockdata, i);
+    }
+
+    private void setCapturedBlockType(int x, int y, int z, IBlockData iblockdata, int i) {
         BlockState blockstate = null;
         Iterator<BlockState> it = capturedBlockStates.iterator();
         while (it.hasNext()) {
             BlockState previous = it.next();
-            if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+            if (previous.getX() == x && previous.getY() == y && previous.getZ() == z) {
                 blockstate = previous;
                 it.remove();
                 break;
             }
         }
         if (blockstate == null) {
-            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, x, y, z, i);
         }
         blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
         blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
@@ -440,16 +447,49 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean setTypeAndDataIfLoaded(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
-            this.setCapturedBlockType(blockposition, iblockdata, i);
+            this.setCapturedBlockType(x, y, z, iblockdata, i);
             return true;
         }
         // CraftBukkit end
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+        return this.setTypeAndData(chunk, blockposition, iblockdata, i);
+    }
+
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
         int x = blockposition.getX();
         int y = blockposition.getY();
         int z = blockposition.getZ();
-        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            this.setCapturedBlockType(x, y, z, iblockdata, i);
+            return true;
+        }
+        // CraftBukkit end
+        if (!this.isValidLocation(x, y, z)) {
+            return false;
+        } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+            return false;
+        } else {
+            Chunk chunk = this.getChunkAtWorldCoords(x, z);
+            return this.setTypeAndData(chunk, blockposition, iblockdata, i);
+        }
+    }
+
+     public boolean setTypeAndData(Chunk chunk, BlockPosition blockposition, IBlockData iblockdata, int i) {
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            this.setCapturedBlockType(x, y, z, iblockdata, i);
+            return true;
+        }
+        // CraftBukkit end
         if (chunk == null) {
             return false;
         }
@@ -471,7 +511,6 @@ public abstract class World implements IBlockAccess {
             this.capturedBlockStates.add(blockstate);
         }
         // CraftBukkit end
-
         IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
 
         if (iblockdata1 == null) {
@@ -497,71 +536,7 @@ public abstract class World implements IBlockAccess {
 
         return true;
     }
-
-    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
-        // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
-            this.setCapturedBlockType(blockposition, iblockdata, i);
-        // Unicorn end
-            return true;
-        }
-        // CraftBukkit end
-        if (!this.isValidLocation(blockposition)) {
-            return false;
-        } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
-            return false;
-        } else {
-            Chunk chunk = this.getChunkAtWorldCoords(blockposition);
-            Block block = iblockdata.getBlock();
-
-            // CraftBukkit start - capture blockstates
-            BlockState blockstate = null;
-            if (this.captureBlockStates) {
-                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-                this.capturedBlockStates.add(blockstate);
-            }
-            // CraftBukkit end
-
-            IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
-
-            if (iblockdata1 == null) {
-                // CraftBukkit start - remove blockstate if failed
-                if (this.captureBlockStates) {
-                    this.capturedBlockStates.remove(blockstate);
-                }
-                // CraftBukkit end
-                return false;
-            } else {
-                Block block1 = iblockdata1.getBlock();
-
-                if (block.p() != block1.p() || block.r() != block1.r()) {
-                    this.x(blockposition);
-                }
-
-                /*
-                if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && chunk.isReady()) {
-                    this.notify(blockposition);
-                }
-
-                if (!this.isClientSide && (i & 1) != 0) {
-                    this.update(blockposition, iblockdata1.getBlock());
-                    if (block.isComplexRedstone()) {
-                        this.updateAdjacentComparators(blockposition, block);
-                    }
-                }
-                */
-
-                // CraftBukkit start
-                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
-                    // Modularize client and physic updates
-                    notifyAndUpdatePhysics(blockposition, chunk, block1, block, i);
-                }
-                // CraftBukkit end
-
-                return true;
-            }
-        }
-    }
+    // Unicorn end
 
     // CraftBukkit start - Split off from original setTypeAndData(int i, int j, int k, Block block, int l, int i1) method in order to directly send client and physic updates
     public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, Block oldBlock, Block newBLock, int flag) {
@@ -743,7 +718,12 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean i(BlockPosition blockposition) {
-        return this.getChunkAtWorldCoords(blockposition).d(blockposition);
+    // Unicorn start
+        return this.i(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+    public boolean i(int x, int y, int z) {
+        return this.getChunkAtWorldCoords(x, z).dCords(x, y, z);
+    // Unicorn end
     }
 
     public boolean j(BlockPosition blockposition) {
@@ -769,65 +749,82 @@ public abstract class World implements IBlockAccess {
     }
 
     public int k(BlockPosition blockposition) {
-        if (blockposition.getY() < 0) {
+    // Unicorn start
+        return this.k(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+    public int k(int x, int y, int z) {
+        if (y < 0) {
             return 0;
         } else {
-            if (blockposition.getY() >= 256) {
-                blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+            if (y >= 256) {
+                y = 255;
             }
+    // Unicorn end
             // Unicorn start - don't look chunk twice
-            Chunk chunk = this.getChunkIfLoaded(blockposition);
+            Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
             if (chunk == null) return 0; // Paper
 
-            return chunk.a(blockposition, 0);
+            return chunk.aCords(x, y, z, 0);
             // Unicorn end
         }
     }
 
     public boolean isLightLevel(BlockPosition blockposition, int level) {
-        if (isInWorldBounds(blockposition.getX(), blockposition.getZ())) { // Unicorn
-            if (this.getType(blockposition).getBlock().s())
+    // Unicorn start
+        return this.isLightLevel(blockposition.getX(), blockposition.getY(), blockposition.getZ(), level);
+    }
+    public boolean isLightLevel(int x, int y, int z, int level) {
+        if (isInWorldBounds(x, z)) {
+            if (this.getType(x, y, z).getBlock().s())
             {
-                if (c(blockposition.up(), false) >= level)
+                if (c(x, y + 1, z, false) >= level)
                     return true;
-                if (c(blockposition.east(), false) >= level)
+                if (c(x + 1, y, z, false) >= level)
                     return true;
-                if (c(blockposition.west(), false) >= level)
+                if (c(x - 1, y, z, false) >= level)
                     return true;
-                if (c(blockposition.south(), false) >= level)
+                if (c(x, y, z + 1, false) >= level)
                     return true;
-                if (c(blockposition.north(), false) >= level)
+                if (c(x, y, z - 1, false) >= level)
                     return true;
                 return false;
             }
 
-            if (blockposition.getY() >= 256) {
-                blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+            if (y >= 256) {
+               y = 255;
             }
 
-            Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+            Chunk chunk = this.getChunkAtWorldCoords(x, z);
 
-            return chunk.getLightSubtracted(blockposition, this.I) >= level;
-        }
-        else if (blockposition.getY() < 0) {
-            return false;
+            return chunk.getLightSubtracted(x, y, z, this.I) >= level;
         }
-        return true;
+        else return y >= 0;
     }
+    // Unicorn end
 
     public int getLightLevel(BlockPosition blockposition) {
-        return this.c(blockposition, true);
+    // Unicorn start
+        return this.getLightLevel(blockposition.getX(), blockposition.getY(), blockposition.getZ());
     }
+    public int getLightLevel(int x, int y, int z) {
+        return this.c(x, y, z, true);
+    }
+    // Unicorn end
 
     public final int getLight(BlockPosition blockposition, boolean checkNeighbors) { return this.c(blockposition, checkNeighbors); } // Paper - OBFHELPER
     public int c(BlockPosition blockposition, boolean flag) {
-        if (isInWorldBounds(blockposition)) { // Unicorn
-            if (flag && this.getType(blockposition).getBlock().s()) {
-                int i = this.c(blockposition.up(), false);
-                int j = this.c(blockposition.east(), false);
-                int k = this.c(blockposition.west(), false);
-                int l = this.c(blockposition.south(), false);
-                int i1 = this.c(blockposition.north(), false);
+    // Unicorn start
+        return this.c(blockposition.getX(), blockposition.getY(), blockposition.getZ(), flag);
+    }
+    public final int c(int x, int y, int z, boolean flag) {
+        if (isInWorldBounds(x, z)) { // Unicorn
+            if (flag && this.getType(x, y, z).getBlock().s()) {
+                int i = this.c(x, y + 1, z, false);
+                int j = this.c(x + 1, y, z, false);
+                int k = this.c(x - 1, y, z, false);
+                int l = this.c(x, y, z + 1, false);
+                int i1 = this.c(x, y, z - 1, false);
+    // Unicorn end
 
                 if (j > i) {
                     i = j;
@@ -846,16 +843,18 @@ public abstract class World implements IBlockAccess {
                 }
 
                 return i;
-            } else if (blockposition.getY() < 0) {
+            // Unicorn start
+            } else if (y < 0) {
                 return 0;
             } else {
-                if (blockposition.getY() >= 256) {
-                    blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+                if (y >= 256) {
+                    y = 255;
                 }
 
-                Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+                Chunk chunk = this.getChunkAtWorldCoords(x, z);
 
-                return chunk.a(blockposition, this.I);
+                return chunk.aCords(x, y, z, this.I);
+            // Unicorn end
             }
         } else {
             return 15;
@@ -863,26 +862,21 @@ public abstract class World implements IBlockAccess {
     }
 
     public BlockPosition getHighestBlockYAt(BlockPosition blockposition) {
-        int i;
-
-        // Unicorn start
+    // Unicorn start
         int x = blockposition.getX();
         int z = blockposition.getZ();
+        return new BlockPosition(x, this.getHighestYAt(x, z), z);
+    }
+
+    public int getHighestYAt(int x, int z) {
         if (isInWorldBounds(x, z)) {
-            int chunkX = x >> 4;
-            int chunkZ = z >> 4;
-            if (this.isChunkLoaded(chunkX, chunkZ, true)) {
-                i = this.getChunkAt(chunkX, chunkZ).b(x & 15, z & 15);
-        // Unicorn end
-            } else {
-                i = 0;
-            }
+            Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+            return chunk != null ? chunk.b(x & 15, z & 15) : 0;
         } else {
-            i = this.F() + 1;
+            return this.F() + 1;
         }
-
-        return new BlockPosition(x, i, z); // Unicorn
     }
+    // Unicorn end
 
     public int b(int i, int j) {
         if (isInWorldBounds(i, j)) { // Unicorn
@@ -902,43 +896,56 @@ public abstract class World implements IBlockAccess {
     }
 
     public int b(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
-        if (blockposition.getY() < 0) {
-            blockposition = new BlockPosition(blockposition.getX(), 0, blockposition.getZ());
+    // Unicorn start
+        return b(enumskyblock, blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+
+    public int b(EnumSkyBlock enumskyblock, int x, int y, int z) {
+        if (y < 0) {
+            y = 0;
         }
 
-        if (!this.isValidLocation(blockposition)) {
+        if (!this.isValidLocation(x, y, z)) {
             return enumskyblock.c;
         // Unicorn start - don't look chunk twice
         }
-        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
         if (chunk == null) {
             return enumskyblock.c;
         } else {
             //Chunk chunk = this.getChunkAtWorldCoords(blockposition);
         // Unicorn end
 
-            return chunk.getBrightness(enumskyblock, blockposition);
+            return chunk.getBrightness(enumskyblock, x, y, z);
         }
     }
+    // Unicorn end
 
     public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {
-        if (this.isValidLocation(blockposition)) {
+    // Unicorn start
+        this.a(enumskyblock, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+    }
+    public void a(EnumSkyBlock enumskyblock, int x, int y, int z, int i) {
+        if (this.isValidLocation(x, y, z)) {
             // Unicorn start - don't look chunk twice
-            Chunk chunk = this.getChunkIfLoaded(blockposition);
+            Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+    // Unicorn end
             if (chunk != null) {
                 //Chunk chunk = this.getChunkAtWorldCoords(blockposition);
             // Unicorn end
 
-                chunk.a(enumskyblock, blockposition, i);
-                this.n(blockposition);
+                chunk.a(enumskyblock, x, y, z, i); // Unicorn
+                //this.n(blockposition); // Unicorn - unused
             }
         }
     }
 
     public void n(BlockPosition blockposition) {
-        for (int i = 0; i < this.u.size(); ++i) {
+        // Unicorn start - unused
+        /*for (int i = 0; i < this.u.size(); ++i) {
             ((IWorldAccess) this.u.get(i)).b(blockposition);
-        }
+        }*/
+        // Unicorn end
 
     }
 
@@ -3269,13 +3276,19 @@ public abstract class World implements IBlockAccess {
     }
 
     public BlockPosition getSpawn() {
-        BlockPosition blockposition = new BlockPosition(this.worldData.c(), this.worldData.d(), this.worldData.e());
+        // Unicorn start
+        int x = this.worldData.c();
+        int y = this.worldData.d();
+        int z = this.worldData.e();
 
-        if (!this.getWorldBorder().a(blockposition)) {
-            blockposition = this.getHighestBlockYAt(new BlockPosition(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
+        WorldBorder worldborder = this.getWorldBorder();
+        if (!worldborder.isInBoundsCords(x, z)) {
+            x = MathHelper.floor(worldborder.getCenterX());
+            z = MathHelper.floor(worldborder.getCenterZ());
+            y = this.getHighestYAt(x, z);
         }
-
-        return blockposition;
+        return new BlockPosition(x, y, z);
+        // Unicorn end
     }
 
     public void B(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/WorldChunkManager.java b/src/main/java/net/minecraft/server/WorldChunkManager.java
index 56afc55db8f2d252b021e1f74b3a2dab5f1ada43..a3b9079ca07bd714b1f7fe805c38f8b9c4c4d1a5 100644
--- a/src/main/java/net/minecraft/server/WorldChunkManager.java
+++ b/src/main/java/net/minecraft/server/WorldChunkManager.java
@@ -43,12 +43,22 @@ public class WorldChunkManager {
     }
 
     public BiomeBase getBiome(BlockPosition blockposition) {
-        return this.getBiome(blockposition, (BiomeBase) null);
+    // Unicorn start
+        return this.getBiome(blockposition.getX(), blockposition.getZ());
+    }
+    public BiomeBase getBiome(int x, int z) {
+        return this.getBiome(x, z, null);
+    // Unicorn end
     }
 
     public BiomeBase getBiome(BlockPosition blockposition, BiomeBase biomebase) {
+    // Unicorn start
         return this.d.a(blockposition.getX(), blockposition.getZ(), biomebase);
     }
+    public BiomeBase getBiome(int x, int z, BiomeBase biomebase) {
+        return this.d.a(x, z, biomebase);
+    // Unicorn end
+    }
 
     public float[] getWetness(float[] afloat, int i, int j, int k, int l) {
         IntCache.a();
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index 7f2738cd5c561bd1b33e7989d0960ac16af44bef..13ae5da92e0b72f25ae20a1c4b1129aba3be4ef4 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -63,7 +63,7 @@ public class WorldGenMonument extends StructureGenerator {
         i1 += (random.nextInt(this.f - this.g) + random.nextInt(this.f - this.g)) / 2;
         j1 += (random.nextInt(this.f - this.g) + random.nextInt(this.f - this.g)) / 2;
         if (k == i1 && l == j1) {
-            if (this.c.getWorldChunkManager().getBiome(new BlockPosition(k * 16 + 8, 64, l * 16 + 8), (BiomeBase) null) != BiomeBase.DEEP_OCEAN) {
+            if (this.c.getWorldChunkManager().getBiome(k * 16 + 8, l * 16 + 8, (BiomeBase) null) != BiomeBase.DEEP_OCEAN) { // Unicorn
                 return false;
             }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 3ed55f49d0a6e41ba7149bf989ccfb8eb7b3f5a2..a6263029e8df8d66ee78646e6cb5f452468ecef4 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -1373,7 +1373,7 @@ public class WorldGenVillagePieces {
             this.a = worldchunkmanager;
             this.e = list;
             this.c = l;
-            BiomeBase biomebase = worldchunkmanager.getBiome(new BlockPosition(j, 0, k), BiomeBase.ad);
+            BiomeBase biomebase = worldchunkmanager.getBiome(j, k, BiomeBase.ad); // Unicorn
 
             this.b = biomebase == BiomeBase.DESERT || biomebase == BiomeBase.DESERT_HILLS;
             this.a(this.b);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 0f68df0205a6b61d2f5ce9a086605c2263470bee..8aa9820681e2aef386575852fae43030a8701ec9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -95,15 +95,12 @@ public class CraftWorld implements World {
     }
 
     public int getBlockTypeIdAt(int x, int y, int z) {
-        return CraftMagicNumbers.getId(world.getType(new BlockPosition(x, y, z)).getBlock());
+        return CraftMagicNumbers.getId(world.getType(x, y, z).getBlock());
     }
 
     public int getHighestBlockYAt(int x, int z) {
-        if (!isChunkLoaded(x >> 4, z >> 4)) {
-            loadChunk(x >> 4, z >> 4);
-        }
-
-        return world.getHighestBlockYAt(new BlockPosition(x, 0, z)).getY();
+        this.getChunkAt(x >> 4, z >> 4); // Unicorn
+        return this.world.getHighestYAt(x, z); // Unicorn
     }
 
     public Location getSpawnLocation() {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 22a80551b5df5920499767a66a9932b9e77b5fb1..096315ecbbbc1932dd35c537007f1a28129df243 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -151,19 +151,19 @@ public class CraftBlock implements Block {
     @Deprecated
     @Override
     public int getTypeId() {
-        return CraftMagicNumbers.getId(chunk.getHandle().getType(new BlockPosition(this.x, this.y, this.z)));
+        return CraftMagicNumbers.getId(chunk.getHandle().getTypeAbs(this.x, this.y, this.z));
     }
 
     public byte getLightLevel() {
-        return (byte) chunk.getHandle().getWorld().getLightLevel(new BlockPosition(this.x, this.y, this.z));
+        return (byte) chunk.getHandle().getWorld().getLightLevel(this.x, this.y, this.z);
     }
 
     public byte getLightFromSky() {
-        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, new BlockPosition(this.x, this.y, this.z));
+        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, this.x, this.y, this.z); // Unicorn
     }
 
     public byte getLightFromBlocks() {
-        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, new BlockPosition(this.x, this.y, this.z));
+        return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, this.x, this.y, this.z); // Unicorn
     }
 
 
