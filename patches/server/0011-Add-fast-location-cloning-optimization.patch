From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 19 Jun 2023 20:13:08 +0200
Subject: [PATCH] Add fast location cloning optimization


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 81f65e6f10472c2e14e0e46aa723d092ca9eca99..7581a652fee066cbfe1b6073941849d0230c71e7 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -116,7 +116,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
         // CraftBukkit end
 
-        org.mythicprojects.unicornspigot.patcher.DynamicPatcher.patch(); // Unicorn
+        org.mythicprojects.unicornspigot.patcher.DynamicPatcher.patchEarly(); // Unicorn
 
         thread.setDaemon(true);
         thread.start();
diff --git a/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java b/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java
index 5bace430488a53f545713566bc5d661b8f03b4f2..3164222d67793ecd929ea5118b8c2eed3363c9bc 100644
--- a/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java
+++ b/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java
@@ -14,6 +14,7 @@ import org.mythicprojects.unicornspigot.config.PaperConfig;
 import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.mythicprojects.unicornspigot.config.UnicornConfig;
 import org.mythicprojects.unicornspigot.config.serdes.WarningStateTransformer;
+import org.mythicprojects.unicornspigot.patcher.DynamicPatcher;
 import org.mythicprojects.unicornspigot.util.Pair;
 import org.spigotmc.RestartCommand;
 import org.spigotmc.TicksPerSecondCommand;
@@ -56,6 +57,9 @@ public class UnicornSpigot {
         // Commands
         this.registerCommand("restart", "Spigot", new RestartCommand("restart"));
         this.registerCommand("tps", "Spigot", new TicksPerSecondCommand("tps"));
+
+        // Patches
+        DynamicPatcher.patchLate();
     }
 
     public @NotNull YamlConfiguration getUnicornConfiguration() {
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java
index ca445b5de72c8e931071db544f651077c0f49023..43af1b196197cbaae93274da432d98801d4f0c63 100644
--- a/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java
@@ -32,6 +32,18 @@ public class UnicornConfig extends EngineConfig<UnicornWorldConfig> {
     @Exclude
     private static UnicornConfig INSTANCE;
 
+    @Comment("Optimizations that could improve performance, but may cause some issues.")
+    @Comment("Use with caution.")
+    public Optimizations optimizations = new Optimizations();
+
+    public static class Optimizations extends UnicornConfigSection {
+
+        @Comment("Whether to use fast Location#clone() method.")
+        @Comment("It is faster, but it may cause some issues with plugins that rely on Location#clone() standard implementation.")
+        public boolean fastLocationClone = false;
+
+    }
+
     @Comment("Per world settings.")
     public Map<String, UnicornWorldConfig> worldSettings = new HashMap<>();
 
diff --git a/src/main/java/org/mythicprojects/unicornspigot/patcher/DynamicPatcher.java b/src/main/java/org/mythicprojects/unicornspigot/patcher/DynamicPatcher.java
index 8d5580278b83b4a8447adfd4d64735eb3f43430b..be1341b164244afde365b52c12cd61f0cde52b45 100644
--- a/src/main/java/org/mythicprojects/unicornspigot/patcher/DynamicPatcher.java
+++ b/src/main/java/org/mythicprojects/unicornspigot/patcher/DynamicPatcher.java
@@ -11,9 +11,13 @@ public final class DynamicPatcher {
     private DynamicPatcher() {
     }
 
-    public static void patch() {
+    public static void patchEarly() {
         ByteBuddyAgent.install();
         PacketDataSerializerPatch.patchNetty();
     }
 
+    public static void patchLate() {
+        LocationPatch.patchLocationClone();
+    }
+
 }
diff --git a/src/main/java/org/mythicprojects/unicornspigot/patcher/LocationPatch.java b/src/main/java/org/mythicprojects/unicornspigot/patcher/LocationPatch.java
new file mode 100644
index 0000000000000000000000000000000000000000..ec44306185f97fe48ad6b5a758240d885abd9d0a
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/patcher/LocationPatch.java
@@ -0,0 +1,40 @@
+package org.mythicprojects.unicornspigot.patcher;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.dynamic.loading.ClassReloadingStrategy;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.bind.annotation.This;
+import net.bytebuddy.matcher.ElementMatchers;
+import org.bukkit.Location;
+import org.mythicprojects.unicornspigot.config.UnicornConfig;
+
+final class LocationPatch {
+
+    private LocationPatch() {
+    }
+
+    static void patchLocationClone() {
+        UnicornConfig config = UnicornConfig.get();
+        if (!config.optimizations.fastLocationClone) {
+            return;
+        }
+
+        DynamicPatcher.LOGGER.info("Patching Location (Enabled fast cloning)");
+
+        new ByteBuddy()
+                .redefine(Location.class)
+                .method(ElementMatchers.isClone())
+                .intercept(MethodDelegation.to(CloneInterceptor.class))
+                .make()
+                .load(Location.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());
+    }
+
+    public static final class CloneInterceptor {
+
+        public static Location clone(@This Location thiz) {
+            return thiz.fastClone();
+        }
+
+    }
+
+}
