From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 19 Jun 2023 22:56:34 +0200
Subject: [PATCH] Implement [Paper-0313] Optimized world time updates by Aikar


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e32169012774522607d1575b07d037035bcf32f0..17ec1531df4a534c754a2599733a79dd7de7cf9a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -873,14 +873,34 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
 
         // Send time updates to everyone, it will get the right time from the world the player is in.
-        if (this.ticks % 20 == 0) {
-            for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
-                entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+        // Paper start - optimize time updates
+        int i;
+
+        if ((this.ticks % 20) == 0)
+        {
+            for (i = 0; i < this.worlds.size(); ++i) {
+                WorldServer world = this.worlds.get(i);
+
+                final boolean doDaylight = world.getGameRules().getBoolean("doDaylightCycle");
+                final long dayTime = world.getDayTime();
+                long worldTime = world.getTime();
+                final PacketPlayOutUpdateTime worldPacket = new PacketPlayOutUpdateTime(worldTime, dayTime, doDaylight);
+                for (EntityHuman entityhuman : world.players) {
+                    if (!(entityhuman instanceof EntityPlayer)) {//|| (ticks + entityhuman.getId()) % 20 != 0
+                        continue;
+                    }
+
+                    if (entityhuman.world == world)
+                    {
+                        EntityPlayer entityplayer = (EntityPlayer) entityhuman;
+                        long playerTime = entityplayer.getPlayerTime();
+                        PacketPlayOutUpdateTime packet = (playerTime == dayTime) ? worldPacket : new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
+                        entityplayer.playerConnection.sendPacket(packet); // Add support for per player time
+                    }
+                }
             }
         }
-
-        int i;
+        // Paper end
 
         for (i = 0; i < this.worlds.size(); ++i) {
             long j = System.nanoTime();
