From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Mon, 14 Nov 2022 21:27:34 +0100
Subject: [PATCH] Add MCUtil & AsyncUtil


diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..bee48d71eac0db6b64044c750e49ace4b26e97df
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -0,0 +1,82 @@
+package net.minecraft.server;
+
+import java.util.Queue;
+import java.util.function.Supplier;
+import org.mythicprojects.unicornspigot.util.async.AsyncUtil;
+import org.bukkit.Location;
+import org.spigotmc.AsyncCatcher;
+
+public final class MCUtil {
+
+    private MCUtil() {
+    }
+
+    public static boolean isMainThread() {
+        return MinecraftServer.getServer().isMainThread();
+    }
+
+    public static Queue<Runnable> getProcessQueue() {
+        return MinecraftServer.getServer().processQueue;
+    }
+
+    public static void ensureMain(Runnable run) {
+        ensureMain(null, run);
+    }
+
+    /**
+     * Ensures the target code is running on the main thread
+     *
+     * @param reason
+     * @param run
+     * @return
+     */
+    public static void ensureMain(String reason, Runnable run) {
+        if (AsyncCatcher.enabled && Thread.currentThread() != MinecraftServer.getServer().primaryThread) {
+            if (reason != null) {
+                new IllegalStateException("Asynchronous " + reason + "!").printStackTrace();
+            }
+            AsyncUtil.runNextTick(run);
+            return;
+        }
+        run.run();
+    }
+
+    public static <T> T ensureMain(Supplier<T> run) {
+        return ensureMain(null, run);
+    }
+
+    /**
+     * Ensures the target code is running on the main thread
+     *
+     * @param reason
+     * @param run
+     * @param <T>
+     * @return
+     */
+    public static <T> T ensureMain(String reason, Supplier<T> run) {
+        if (AsyncCatcher.enabled && Thread.currentThread() != MinecraftServer.getServer().primaryThread) {
+            if (reason != null) {
+                new IllegalStateException("Asynchronous " + reason + "! Blocking thread until it returns ").printStackTrace();
+            }
+            return AsyncUtil.supplyNextTick(run);
+        }
+        return run.get();
+    }
+
+    /**
+     * Converts a NMS World/BlockPosition to Bukkit Location
+     *
+     * @param world
+     * @param pos
+     * @return
+     */
+    public static Location toLocation(World world, BlockPosition pos) {
+        // Unicorn start
+        if (pos == null) {
+            return null;
+        }
+        // Unicorn end
+        return new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f72f13d0cdb739542b8214a0616583760562fbe4..057bba686f6ef3fe2a9076372c316432851ac20f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -115,6 +115,7 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
     public static int currentTick = 0; // PaperSpigot - Further improve tick loop
     public final Thread primaryThread;
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public java.util.Queue<Runnable> priorityProcessQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>(); // Unicorn
     public int autosavePeriod;
     // CraftBukkit end
 
@@ -954,6 +955,12 @@ public abstract class MinecraftServer extends org.mythicprojects.unicornspigot.t
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
+        // Unicorn start
+        while (!priorityProcessQueue.isEmpty()) {
+            priorityProcessQueue.remove().run();
+        }
+        // Unicorn end
+
         this.aq().c();
         this.v.tick();
 
diff --git a/src/main/java/org/mythicprojects/unicornspigot/util/async/AsyncUtil.java b/src/main/java/org/mythicprojects/unicornspigot/util/async/AsyncUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2feb0be3cfbb8b72ed2acbbc9f6f54d03bd6e58
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/util/async/AsyncUtil.java
@@ -0,0 +1,99 @@
+package org.mythicprojects.unicornspigot.util.async;
+
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executor;
+import java.util.concurrent.ForkJoinPool;
+import java.util.function.Supplier;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.craftbukkit.util.Waitable;
+
+public class AsyncUtil {
+
+	/**
+	 * Runs a given task async
+	 * @param runnable The task to run
+	 */
+	public static void run(Runnable runnable) {
+		ForkJoinPool.commonPool().execute(runnable);
+	}
+	
+	/**
+	 * Runs a given task on a specified Executor
+	 * @param runnable The task to run
+	 * @param executor The executor to run this task on
+	 */
+	public static void run(Runnable runnable, Executor executor) {
+		executor.execute(runnable);
+	}
+
+	/**
+	 * Runs a given task the next tick on the main thread
+	 * @param runnable The task to run
+	 */
+	public static void runNextTick(Runnable runnable) {
+		MinecraftServer.getServer().processQueue.add(runnable);
+	}
+	
+	/**
+	 * Runs a given task after the current tick on the main thread
+	 * @param runnable The task to run
+	 */
+	public static void runPostTick(Runnable runnable) {
+		MinecraftServer.getServer().priorityProcessQueue.add(runnable);
+	}
+
+	/**
+	 * Runs a given task the next tick on the main thread and return value
+	 * @param supplier The task to run
+	 */
+	public static <T> T supplyNextTick(Supplier<T> supplier) {
+		Waitable<T> wait = new Waitable<T>() {
+			@Override
+			protected T evaluate() {
+				return supplier.get();
+			}
+		};
+
+		MCUtil.getProcessQueue().add(wait);
+		try {
+			return wait.get();
+		} catch (InterruptedException | ExecutionException e) {
+			e.printStackTrace();
+		}
+		return null;
+	}
+
+	/**
+	 * Runs a given task if it is synchronized on an object
+	 * @param monitor The object to check for locking
+	 * @param runnable The task to run
+	 */
+	@SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
+	public static void runSynchronized(Object monitor, Runnable runnable) {
+		if (Thread.holdsLock(monitor) ) {
+			runnable.run();
+		} else {
+			synchronized (monitor) {
+				runnable.run();
+			}
+		}
+	}
+
+	/**
+	 * Runs a given task if it is synchronized on an object
+	 * @param monitor The object to check for locking
+	 * @param supplier The task to run
+	 */
+	@SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
+	public static <T> T runSynchronized(Object monitor, Supplier<T> supplier) {
+		if (Thread.holdsLock(monitor) ) {
+			return supplier.get();
+		} else {
+			synchronized (monitor) {
+				return supplier.get();
+			}
+		}
+	}
+
+}
