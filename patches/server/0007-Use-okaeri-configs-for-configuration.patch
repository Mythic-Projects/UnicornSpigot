From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 21 May 2022 11:43:07 +0200
Subject: [PATCH] Use okaeri-configs for configuration


diff --git a/build.gradle.kts b/build.gradle.kts
index ce34f378f9f336d1f2f47820927833cac7efb6e8..c8c2cbde369c6aa03f14883f2b91e3061b432da1 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -23,6 +23,12 @@ dependencies {
     val byteBuddyVersion = "1.12.12"
     implementation("net.bytebuddy:byte-buddy-agent:$byteBuddyVersion")
     implementation("net.bytebuddy:byte-buddy:$byteBuddyVersion")
+
+    val okaeriConfigsVersion = "5.0.0-beta.6"
+    implementation("eu.okaeri:okaeri-configs-core:$okaeriConfigsVersion")
+    implementation("eu.okaeri:okaeri-configs-yaml-bukkit:$okaeriConfigsVersion")
+    implementation("eu.okaeri:okaeri-configs-serdes-commons:$okaeriConfigsVersion")
+    implementation("eu.okaeri:okaeri-configs-validator-okaeri:$okaeriConfigsVersion")
     // UnicornSpigot libraries end
 
     testImplementation("junit:junit:4.13.2") // Unicorn - update JUnit to 4.13.2
@@ -40,6 +46,7 @@ tasks {
         relocate("jline", "$cbLibsPkg.jline")
         relocate("org.ibex", "$cbLibsPkg.org.ibex")
         relocate("org.gjt", "$cbLibsPkg.org.gjt")
+        relocate("eu.okaeri", "$cbLibsPkg.eu.okaeri")
 
         relocate("org.bukkit.craftbukkit", "org.bukkit.craftbukkit.v${minecraftVersion}") {
             exclude("org.bukkit.craftbukkit.Main*") // don't relocate main class
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 28da1365a7e9d12288448d09e577520547bc7e89..cb1ce9a828003104059b7c7d68af4326bba68157 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -278,7 +278,7 @@ public abstract class BiomeBase {
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
         for (int l1 = 255; l1 >= 0; --l1) {
-            if (l1 <= (world.paperSpigotConfig.generateFlatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
+            if (l1 <= (world.paperConfigUnicorn.generatorSettings.flatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
                 chunksnapshot.a(k1, l1, j1, Blocks.BEDROCK.getBlockData());
             } else {
                 IBlockData iblockdata2 = chunksnapshot.a(k1, l1, j1);
diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 65cd706acabc943b53f6e5d835d63ba3b52a316c..7d6b44648c26c9742c8b83883f5d00b76ed6340c 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -94,7 +94,7 @@ public class BiomeMesa extends BiomeBase {
                 chunksnapshot.a(l, l1, k, Blocks.STONE.getBlockData());
             }
 
-            if (l1 <= (world.paperSpigotConfig.generateFlatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
+            if (l1 <= (world.paperConfigUnicorn.generatorSettings.flatBedrock ? 0 : random.nextInt(5))) { // PaperSpigot - Configurable flat bedrock
                 chunksnapshot.a(l, l1, k, Blocks.BEDROCK.getBlockData());
             } else {
                 IBlockData iblockdata2 = chunksnapshot.a(l, l1, k);
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index a784e04a09ffac4d09415353084aea3fd5451d9c..ebe6fa5ee98b6968943aa09ada5fc14840599e20 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -576,7 +576,7 @@ public class Block {
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity) {
         entityhuman.b(StatisticList.MINE_BLOCK_COUNT[getId(this)]);
-        entityhuman.applyExhaustion(world.paperSpigotConfig.blockBreakExhaustion); // PaperSpigot - Configurable block break exhaustion
+        entityhuman.applyExhaustion(world.paperConfigUnicorn.playerExhaustion.blockBreak); // PaperSpigot - Configurable block break exhaustion
         if (this.I() && EnchantmentManager.hasSilkTouchEnchantment(entityhuman)) {
             ItemStack itemstack = this.i(iblockdata);
 
diff --git a/src/main/java/net/minecraft/server/BlockCactus.java b/src/main/java/net/minecraft/server/BlockCactus.java
index ddc213517d36fb772999182d66baf7f9ea49d29b..a2582ebf526ed01a60c2c040051b48dffc3f24d3 100644
--- a/src/main/java/net/minecraft/server/BlockCactus.java
+++ b/src/main/java/net/minecraft/server/BlockCactus.java
@@ -26,10 +26,10 @@ public class BlockCactus extends Block {
                 ;
             }
 
-            if (i < world.paperSpigotConfig.cactusMaxHeight) { // PaperSpigot - Configurable max growth height for cactus blocks) {
+            if (i < world.paperConfigUnicorn.maxGrowthHeight.cactus) { // PaperSpigot - Configurable max growth height for cactus blocks) {
                 int j = ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
 
-                if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.cactusModifier * 15) + 0.5F, 15)) { // Spigot
+                if (j >= (byte) range(3, (world.growthOdds / world.spigotConfigUnicorn.growth.cactusModifier * 15) + 0.5F, 15)) { // Spigot
                     // world.setTypeUpdate(blockposition1, this.getBlockData()); // CraftBukkit
                     IBlockData iblockdata1 = iblockdata.set(BlockCactus.AGE, Integer.valueOf(0));
 
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index eed516e223607e84bb475c51cef21e7f0b1073c2..1b71176f99f4cefaafc1d5b5a57c10e715685888 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -411,7 +411,7 @@ public class BlockChest extends BlockContainer {
 
     private boolean p(World world, BlockPosition blockposition) {
         // PaperSpigot start - Option to disable chest's cat detection (Performance++)
-        if (world.paperSpigotConfig.disableChestCatDetection) {
+        if (world.paperConfigUnicorn.gameMechanics.disableChestCatDetections) {
             return false;
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index b91b2200d56d9f0b4a50293fbc497a7aca7b9cec..8f0a72c68dd1ebabf6a721d2e8c3f53f69954339 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -32,7 +32,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
             if (i < 7) {
                 float f = a((Block) this, world, blockposition);
 
-                if (random.nextInt((int) (world.growthOdds / world.spigotConfig.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot                    // CraftBukkit start
+                if (random.nextInt((int) (world.growthOdds / world.spigotConfigUnicorn.growth.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot                    // CraftBukkit start
                     IBlockData data = iblockdata.set(AGE, Integer.valueOf(i + 1));
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
                     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index eaf9154c3b28851e38b52bb129868acdc6c973f2..ced7a6b8fa9e0cd832b99645ea97e7efda2da7d7 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -73,7 +73,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.SOUTH), this);
@@ -181,7 +181,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.N) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.NORTH), this);
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 23130ba963a7fb0024cee47a2a44006e08d06353..786f6a6cf6b7cd207d7fdfb4b1668379b65be3de 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -74,7 +74,7 @@ public class BlockFlowing extends BlockFluids {
                 }
             }
 
-            if (!world.paperSpigotConfig.fastDrainLava && this.material == Material.LAVA && i < 8 && i1 < 8 && i1 > i && random.nextInt(4) != 0) { // PaperSpigot
+            if (!world.paperConfigUnicorn.fastDrain.lava && this.material == Material.LAVA && i < 8 && i1 < 8 && i1 > i && random.nextInt(4) != 0) { // PaperSpigot
                 j *= 4;
             }
 
@@ -94,7 +94,7 @@ public class BlockFlowing extends BlockFluids {
                     world.d(blockposition.up(), this);
                     world.d(blockposition.north(), this);
                     world.d(blockposition.south(), this);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                    world.antiXray.updateNearbyBlocks(world, blockposition); // Spigot
                     // PaperSpigot end
                 }
             }
@@ -277,14 +277,14 @@ public class BlockFlowing extends BlockFluids {
      */
     public int getFlowSpeed(World world, BlockPosition blockposition) {
         if (this.getMaterial() == Material.LAVA) {
-            return world.worldProvider.o() ? world.paperSpigotConfig.lavaFlowSpeedNether : world.paperSpigotConfig.lavaFlowSpeedNormal;
+            return world.worldProvider.o() ? world.paperConfigUnicorn.lavaFlowSpeed.nether : world.paperConfigUnicorn.lavaFlowSpeed.normal;
         }
         if (this.getMaterial() == Material.WATER && (
                 world.getType(blockposition.north(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.south(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.west(1)).getBlock().getMaterial() == Material.LAVA ||
                         world.getType(blockposition.east(1)).getBlock().getMaterial() == Material.LAVA)) {
-            return world.paperSpigotConfig.waterOverLavaFlowSpeed;
+            return world.paperConfigUnicorn.waterOverLavaFlowSpeed;
         }
         return super.a(world);
     }
@@ -304,7 +304,7 @@ public class BlockFlowing extends BlockFluids {
         boolean result = false;
         int data = getData(world, position);
         if (this.material == Material.WATER) {
-            if (world.paperSpigotConfig.fastDrainWater) {
+            if (world.paperConfigUnicorn.fastDrain.water) {
                 result = true;
                 if (getData(world, position.down()) < 0) {
                     result = false;
@@ -319,7 +319,7 @@ public class BlockFlowing extends BlockFluids {
                 }
             }
         } else if (this.material == Material.LAVA) {
-            if (world.paperSpigotConfig.fastDrainLava) {
+            if (world.paperConfigUnicorn.fastDrain.lava) {
                 result = true;
                 if (getData(world, position.down()) < 0 || world.getType(position.up()).getBlock().getMaterial() != Material.AIR) {
                     result = false;
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 7cf7a08884b4ce1689524725dd261a66859bfce6..78f8799ce629bbe2992adbca9e76ffeac7bd1949 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -20,7 +20,7 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         final int sourceX = blockposition.getX(), sourceY = blockposition.getY(), sourceZ = blockposition.getZ(); // CraftBukkit
-        if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
+        if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfigUnicorn.growth.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPosition.b(blockposition.a(-4, -1, -4), blockposition.a(4, 1, 4)).iterator();
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index 374f06caa0e81aff99e645a197b024e423e078c2..be3315114d772d11132fb79810d59efb99c4132c 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -27,7 +27,7 @@ public class BlockNetherWart extends BlockPlant {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         int i = ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
 
-        if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.wartModifier * 10)) == 0) { // Spigot
+        if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfigUnicorn.growth.netherWartModifier * 10)) == 0) { // Spigot
             iblockdata = iblockdata.set(BlockNetherWart.AGE, Integer.valueOf(i + 1));
             // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 170f77632d242448e4ecccdff6d9d66861804049..3e4c6f83e55634a579d7d4217b302b542c24c05f 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -18,7 +18,7 @@ public class BlockPortal extends BlockHalfTransparent {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
-        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
+        if (world.spigotConfigUnicorn.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
             int i = blockposition.getY();
 
             BlockPosition blockposition1;
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 78c6d195a4fe0960b1c5e38d711fe7c723c3a5d3..3ed33fb0119c46545100ed8d490fc80b19178858 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -53,7 +53,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.DOWN), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.UP), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
@@ -78,7 +78,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.DOWN), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.UP), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 532188e2850d45a3cf62cc02d8370b3ecd534e24..d9edeff2423a576efe7ea238b12715b418a47532 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -143,7 +143,7 @@ public class BlockRedstoneWire extends Block {
 
             this.R.add(blockposition);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 this.R.add(blockposition.shift(EnumDirection.WEST));
                 this.R.add(blockposition.shift(EnumDirection.EAST));
                 this.R.add(blockposition.shift(EnumDirection.DOWN));
@@ -170,7 +170,7 @@ public class BlockRedstoneWire extends Block {
         if (world.getType(blockposition).getBlock() == this) {
             world.applyPhysics(blockposition, this);
             // PaperSpigot start - Fix cannons
-            if (world.paperSpigotConfig.fixCannons) {
+            if (world.paperConfigUnicorn.fixCannons) {
                 world.applyPhysics(blockposition.shift(EnumDirection.WEST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.EAST), this);
                 world.applyPhysics(blockposition.shift(EnumDirection.NORTH), this);
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
index 337f2c40e3ecd817a0b838a624a661bb459f589e..134d0d48f95ca91445c84cb5ca214e320cb3ed77 100644
--- a/src/main/java/net/minecraft/server/BlockReed.java
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -25,10 +25,10 @@ public class BlockReed extends Block {
                     ;
                 }
 
-                if (i < world.paperSpigotConfig.reedMaxHeight) { // PaperSpigot - Configurable max growth height for reed blocks) {
+                if (i < world.paperConfigUnicorn.maxGrowthHeight.reeds) { // PaperSpigot - Configurable max growth height for reed blocks) {
                     int j = ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
 
-                    if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.caneModifier * 15) + 0.5F, 15)) { // Spigot
+                    if (j >= (byte) range(3, (world.growthOdds / world.spigotConfigUnicorn.growth.caneModifier * 15) + 0.5F, 15)) { // Spigot
                         // CraftBukkit start
                         // world.setTypeUpdate(blockposition.up(), this.getBlockData()); // CraftBukkit
                         BlockPosition upPos = blockposition.up();
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 45fbf5c341fc6ea8163e4363f654772921332789..39c51394d14a9e9082db66ee14b9b0c6b3a42cc8 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -32,7 +32,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             super.b(world, blockposition, iblockdata, random);
-            if (world.getLightLevel(blockposition.up()) >= 9 && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfig.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
+            if (world.getLightLevel(blockposition.up()) >= 9 && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfigUnicorn.growth.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
                 // CraftBukkit start
                 world.captureTreeGeneration = true;
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 2618c40f25ccf51d50e83aaa1109b493bf13c2fb..56eab5f1474f9ac8508aa53c3bbbf7162317d867 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -55,7 +55,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
         if (world.getLightLevel(blockposition.up()) >= 9) {
             float f = BlockCrops.a((Block) this, world, blockposition);
 
-            if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
+            if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfigUnicorn.growth.pumpkinModifier : world.spigotConfigUnicorn.growth.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
                 int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
 
                 if (i < 7) {
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index 3d1e583f3097029fa24241aa441f1b6b94f79fdb..2d690f9dcc06bd1a9be01732fa066b687e167a4b 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -32,7 +32,7 @@ public class BlockTNT extends Block {
             org.bukkit.Location loc = explosion.source instanceof EntityTNTPrimed ? ((EntityTNTPrimed) explosion.source).sourceLoc : new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()); // PaperSpigot
             // PaperSpigot start - Fix cannons
             double y = blockposition.getY();
-            if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+            if (!world.paperConfigUnicorn.fixCannons) y += 0.5;
             EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(loc, world, (double) ((float) blockposition.getX() + 0.5F), y, (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource()); // PaperSpigot - add loc
             // PaperSpigot end
 
@@ -51,7 +51,7 @@ public class BlockTNT extends Block {
                 org.bukkit.Location loc = new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()); // PaperSpigot
                 // PaperSpigot start - Fix cannons
                 double y = blockposition.getY();
-                if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+                if (!world.paperConfigUnicorn.fixCannons) y += 0.5;
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(loc, world, (double) ((float) blockposition.getX() + 0.5F), y, (double) ((float) blockposition.getZ() + 0.5F), entityliving); // PaperSpigot - add loc
                 // PaperSpigot end
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 3da0854a171182cdd42b9ac9968b9ca2b6d28e46..3b484ca5cebfff540e87bb25128d0d71d6c71ac3 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -63,7 +63,7 @@ public class Chunk {
     private int emptySectionBits;
 
     public PacketPlayOutMapChunk.ChunkMap getChunkMap(boolean groundUpContinuous, int primaryBitMask) {
-        if (!world.paperSpigotConfig.cacheChunkMaps || !groundUpContinuous || (primaryBitMask != 0 && primaryBitMask != '\uffff')) {
+        if (!world.paperConfigUnicorn.cacheChunkMaps || !groundUpContinuous || (primaryBitMask != 0 && primaryBitMask != '\uffff')) {
             return PacketPlayOutMapChunk.a(this, groundUpContinuous, !world.worldProvider.o(), primaryBitMask);
         }
 
@@ -867,7 +867,7 @@ public class Chunk {
             this.tileEntities.put(blockposition, tileentity);
             // CraftBukkit start
             // PaperSpigot start - Remove invalid mob spawner tile entities
-        } else if (this.world.paperSpigotConfig.removeInvalidMobSpawnerTEs && tileentity instanceof TileEntityMobSpawner &&
+        } else if (this.world.paperConfigUnicorn.removeInvalidMobSpawnerTileEntities && tileentity instanceof TileEntityMobSpawner &&
                 org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(getType(blockposition)) != org.bukkit.Material.MOB_SPAWNER) {
             this.tileEntities.remove(blockposition);
             // PaperSpigot end
@@ -1154,7 +1154,7 @@ public class Chunk {
         }
 
         this.p = true;
-        if (!this.lit && this.done && this.world.spigotConfig.randomLightUpdates) { // Spigot - also use random light updates setting to determine if we should relight
+        if (!this.lit && this.done && this.world.spigotConfigUnicorn.randomLightUpdates) { // Spigot - also use random light updates setting to determine if we should relight
             this.n();
         }
 
@@ -1175,7 +1175,7 @@ public class Chunk {
      * PaperSpigot - Recheck gaps asynchronously.
      */
     public void recheckGaps(final boolean isClientSide) {
-        if (!world.paperSpigotConfig.useAsyncLighting) {
+        if (!world.paperConfigUnicorn.useAsyncLightning) {
             this.h(isClientSide);
             return;
         }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index b939f47ac0c02875474b5034d4485b781981ab44..1fc952d11525f7a1e1b1c7b96c9b7fe5e0975dbb 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -25,7 +25,7 @@ public class ChunkProviderFlat implements IChunkProvider {
         if (flag) {
             Map map = this.d.b();
 
-            if (map.containsKey("village") && world.paperSpigotConfig.generateVillage) { // PaperSpigot
+            if (map.containsKey("village") && world.paperConfigUnicorn.generatorSettings.village) { // PaperSpigot
                 Map map1 = (Map) map.get("village");
 
                 if (!map1.containsKey("size")) {
@@ -35,19 +35,19 @@ public class ChunkProviderFlat implements IChunkProvider {
                 this.e.add(new WorldGenVillage(map1));
             }
 
-            if (map.containsKey("biome_1") && world.paperSpigotConfig.generateTemple) { // PaperSpigot
+            if (map.containsKey("biome_1") && world.paperConfigUnicorn.generatorSettings.temple) { // PaperSpigot
                 this.e.add(new WorldGenLargeFeature((Map) map.get("biome_1")));
             }
 
-            if (map.containsKey("mineshaft") && world.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+            if (map.containsKey("mineshaft") && world.paperConfigUnicorn.generatorSettings.mineshaft) { // PaperSpigot
                 this.e.add(new WorldGenMineshaft((Map) map.get("mineshaft")));
             }
 
-            if (map.containsKey("stronghold") && world.paperSpigotConfig.generateStronghold) { // PaperSpigot
+            if (map.containsKey("stronghold") && world.paperConfigUnicorn.generatorSettings.stronghold) { // PaperSpigot
                 this.e.add(new WorldGenStronghold((Map) map.get("stronghold")));
             }
 
-            if (map.containsKey("oceanmonument") && world.paperSpigotConfig.generateMonument) { // PaperSpigot
+            if (map.containsKey("oceanmonument") && world.paperConfigUnicorn.generatorSettings.monument) { // PaperSpigot
                 this.e.add(new WorldGenMonument((Map) map.get("oceanmonument")));
             }
         }
@@ -60,7 +60,7 @@ public class ChunkProviderFlat implements IChunkProvider {
             this.i = new WorldGenLakes(Blocks.LAVA);
         }
 
-        this.g = world.paperSpigotConfig.generateDungeon && this.d.b().containsKey("dungeon");  // PaperSpigot
+        this.g = world.paperConfigUnicorn.generatorSettings.dungeon && this.d.b().containsKey("dungeon");  // PaperSpigot
         int j = 0;
         int k = 0;
         boolean flag1 = true;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ad464d32d94763871027398ac27a71b9209267e5..8282b6a9de596a57d2c68e827d2ea1be4403ace8 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -156,31 +156,31 @@ public class ChunkProviderGenerate implements IChunkProvider {
         this.a(i, j, chunksnapshot);
         this.B = this.m.getWorldChunkManager().getBiomeBlock(this.B, i * 16, j * 16, 16, 16);
         this.a(i, j, chunksnapshot, this.B);
-        if (this.r.r && this.m.paperSpigotConfig.generateCaves) { // PaperSpigot
+        if (this.r.r && this.m.paperConfigUnicorn.generatorSettings.caves) { // PaperSpigot
             this.u.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.z && this.m.paperSpigotConfig.generateCanyon) { // PaperSpigot
+        if (this.r.z && this.m.paperConfigUnicorn.generatorSettings.canyon) { // PaperSpigot
             this.z.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigUnicorn.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigUnicorn.generatorSettings.village) { // PaperSpigot
             this.w.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigUnicorn.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigUnicorn.generatorSettings.temple) { // PaperSpigot
             this.y.a(this, this.m, i, j, chunksnapshot);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigUnicorn.generatorSettings.monument) { // PaperSpigot
             this.A.a(this, this.m, i, j, chunksnapshot);
         }
 
@@ -319,23 +319,23 @@ public class ChunkProviderGenerate implements IChunkProvider {
         boolean flag = false;
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
 
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigUnicorn.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigUnicorn.generatorSettings.village) { // PaperSpigot
             flag = this.w.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigUnicorn.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigUnicorn.generatorSettings.temple) { // PaperSpigot
             this.y.a(this.m, this.h, chunkcoordintpair);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigUnicorn.generatorSettings.monument) { // PaperSpigot
             this.A.a(this.m, this.h, chunkcoordintpair);
         }
 
@@ -359,7 +359,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
             }
         }
 
-        if (this.r.s && this.m.paperSpigotConfig.generateDungeon) { // PaperSpigot
+        if (this.r.s && this.m.paperConfigUnicorn.generatorSettings.dungeon) { // PaperSpigot
             for (k1 = 0; k1 < this.r.t; ++k1) {
                 l1 = this.h.nextInt(16) + 8;
                 i2 = this.h.nextInt(256);
@@ -444,23 +444,23 @@ public class ChunkProviderGenerate implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
+        if (this.r.w && this.n && this.m.paperConfigUnicorn.generatorSettings.mineshaft) { // PaperSpigot
             this.x.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
+        if (this.r.v && this.n && this.m.paperConfigUnicorn.generatorSettings.village) { // PaperSpigot
             this.w.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
+        if (this.r.u && this.n && this.m.paperConfigUnicorn.generatorSettings.stronghold) { // PaperSpigot
             this.v.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
+        if (this.r.x && this.n && this.m.paperConfigUnicorn.generatorSettings.temple) { // PaperSpigot
             this.y.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
-        if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
+        if (this.r.y && this.n && this.m.paperConfigUnicorn.generatorSettings.monument) { // PaperSpigot
             this.A.a(this, this.m, i, j, (ChunkSnapshot) null);
         }
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 0156892a88e5bd7ce16d73e05c55907a330f3a73..d96cef96fd20d9676e234ecf7a8037a4b022efdf 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -143,8 +143,8 @@ public class ChunkProviderHell implements IChunkProvider {
 
                 for (int l1 = 127; l1 >= 0; --l1) {
                     // PaperSpigot start - Configurable flat bedrock worldgen
-                    if (l1 < 127 - (h.paperSpigotConfig.generateFlatBedrock ? 0 : this.j.nextInt(5)) &&
-                            l1 > (h.paperSpigotConfig.generateFlatBedrock ? 0 : this.j.nextInt(5))) {
+                    if (l1 < 127 - (h.paperConfigUnicorn.generatorSettings.flatBedrock ? 0 : this.j.nextInt(5)) &&
+                            l1 > (h.paperConfigUnicorn.generatorSettings.flatBedrock ? 0 : this.j.nextInt(5))) {
                     // PaperSpigot end
                         IBlockData iblockdata2 = chunksnapshot.a(i1, l1, l);
 
@@ -201,8 +201,8 @@ public class ChunkProviderHell implements IChunkProvider {
 
         this.a(i, j, chunksnapshot);
         this.b(i, j, chunksnapshot);
-        if (this.h.paperSpigotConfig.generateCaves) this.C.a(this, this.h, i, j, chunksnapshot); // PaperSpigot
-        if (this.i && this.h.paperSpigotConfig.generateFortress) { // PaperSpigot
+        if (this.h.paperConfigUnicorn.generatorSettings.caves) this.C.a(this, this.h, i, j, chunksnapshot); // PaperSpigot
+        if (this.i && this.h.paperConfigUnicorn.generatorSettings.fortress) { // PaperSpigot
             this.B.a(this, this.h, i, j, chunksnapshot);
         }
 
@@ -387,7 +387,7 @@ public class ChunkProviderHell implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.h.paperSpigotConfig.generateFortress) this.B.a(this, this.h, i, j, (ChunkSnapshot) null); // PaperSpigot
+        if (this.h.paperConfigUnicorn.generatorSettings.fortress) this.B.a(this, this.h, i, j, (ChunkSnapshot) null); // PaperSpigot
     }
 
     public Chunk getChunkAt(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index c4dab42bdf868f73f0c3875e8adfb852b2b02e18..868a567829826f09190627587fb514842c787dbf 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -58,7 +58,7 @@ public class ChunkProviderServer implements IChunkProvider {
     public void queueUnload(int i, int j) {
         // PaperSpigot start - Asynchronous lighting updates
         Chunk chunk = chunks.get(LongHash.toLong(i, j));
-        if (chunk != null && chunk.world.paperSpigotConfig.useAsyncLighting && (chunk.pendingLightUpdates.get() > 0 || chunk.world.getTime() - chunk.lightUpdateTime < 20)) {
+        if (chunk != null && chunk.world.paperConfigUnicorn.useAsyncLightning && (chunk.pendingLightUpdates.get() > 0 || chunk.world.getTime() - chunk.lightUpdateTime < 20)) {
             return;
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index fc522873afec453c34a308c4459cac4cdf8e2715..3f6e30d9b7555855a38d20b053b25ddfc11335a0 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 
 public class CommandDispatcher extends CommandHandler implements ICommandDispatcher {
 
@@ -100,7 +101,7 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             }
         }
 
-        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
+        if (icommandlistener != minecraftserver && minecraftserver.worldServer[0].getGameRules().getBoolean("logAdminCommands") && !SpigotConfig.get().commands.silentCommandblockConsole) { // Spigot
             minecraftserver.sendMessage(chatmessage);
         }
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index ec2f80ea8ce4aaa0dedcc97806f46d349e401c56..70638118fd6b42edf4706e623bddc54b5a8ee499 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -12,6 +12,7 @@ import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -176,19 +177,23 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             }
             // Spigot start
             this.a((PlayerList) (new DedicatedPlayerList(this)));
-            org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
+            // Unicorn start
+            /* org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
             org.spigotmc.SpigotConfig.registerCommands();
             // Spigot end
             // PaperSpigot start
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
             org.github.paperspigot.PaperSpigotConfig.registerCommands();
-            // PaperSpigot end
+            // PaperSpigot end */
+            //server.serverConfig.registerCommands();
+            this.server.unicornSpigot.registerCommandsInServer(); // Unicorn
+            // Unicorn end
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
-        if (!org.spigotmc.SpigotConfig.lateBind) {
+        if (!SpigotConfig.get().settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
@@ -209,7 +214,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
                 // Spigot start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (SpigotConfig.get().settings.bungeecord) {
                     DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
                     DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
                 } else {
@@ -289,12 +294,12 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
                     this.propertyManager.properties.remove("spawn-protection");
                     this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
-                    this.server.removeBukkitSpawnRadius();
+                    //this.server.removeBukkitSpawnRadius(); // Unicorn
                     this.propertyManager.savePropertiesFile();
                 }
                 // CraftBukkit end
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
+        if (SpigotConfig.get().settings.lateBind) {
             try {
                 this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index cc7a1e31b34ad39520352783ff130d9db534a146..8f541215b51bbcaa0cf797b0074bdc4950888f0c 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -522,7 +522,7 @@ public class DispenserRegistry {
 
                 // PaperSpigot start - Fix cannons
                 double y = blockposition.getY();
-                if (!world.paperSpigotConfig.fixCannons) y += 0.5;
+                if (!world.paperConfigUnicorn.fixCannons) y += 0.5;
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX() + 0.5, y, blockposition.getZ() + 0.5));
                 // PaperSpigot end
                 if (!BlockDispenser.eventFired) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 2da303feee4191d6a47108ef904d32958ce6a23d..1089859084d784ca297a2d8edb3e05e17e799f3e 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -170,7 +170,7 @@ public abstract class Entity implements ICommandListener {
         if (world != null) {
             this.dimension = world.worldProvider.getDimension();
             // Spigot start
-            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfig);
+            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, world.spigotConfigUnicorn);
         } else {
             this.defaultActivationState = false;
         }
@@ -267,7 +267,7 @@ public abstract class Entity implements ICommandListener {
      * PaperSpigot - Checks if the feature is enabled and the entity is above the nether world bedrock height
      */
     private boolean paperNetherCheck() {
-        return this.world.paperSpigotConfig.netherVoidTopDamage && this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER && this.locY >= 128.0D;
+        return this.world.paperConfigUnicorn.netherCeilingVoidDamage && this.world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER && this.locY >= 128.0D;
     }
 
     public void K() {
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index eac0363c2e8c2a75481000077725f09f2c492e3e..e146aff133c3d840affdb52887d8368ba7ab32c0 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -155,7 +155,7 @@ public class EntityArrow extends Entity implements IProjectile {
 
             if (block == this.g && i == this.h) {
                 ++this.ar;
-                if (this.ar >= world.spigotConfig.arrowDespawnRate) { // Spigot - First int after shooter
+                if (this.ar >= world.spigotConfigUnicorn.arrowDespawnRate) { // Spigot - First int after shooter
                     this.die();
                 }
             } else {
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 2d40ba90fd50eaf34e0b4709414e8f05bb984f97..954cf60ed5bf9114499150f88566a7f2771eb6a6 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -486,7 +486,7 @@ public class EntityBoat extends Entity {
      * PaperSpigot - Handles boat drops depending on the user's config setting
      */
     public void breakNaturally() {
-        if (this.world.paperSpigotConfig.boatsDropBoats) {
+        if (this.world.paperConfigUnicorn.gameMechanics.boatsDropBoats) {
             this.a(Items.BOAT, 1, 0.0F);
         } else {
             for (int k = 0; k < 3; ++k) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index d246ae749ea49be9e07ff5ac6abd3bbf14782a6b..1f17448af405c6df38a0fac5d6b95800d74eab37 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -5,6 +5,7 @@ import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
+import org.mythicprojects.unicornspigot.util.MathUtil;
 // CraftBukkit start
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -578,7 +579,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-                    if ( world.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > world.spigotConfig.dragonDeathSoundRadius * world.spigotConfig.dragonDeathSoundRadius ) continue; // Spigot
+                    if ( world.spigotConfigUnicorn.dragonDeathSoundRadius > 0 && distanceSquared > MathUtil.pow2(world.spigotConfigUnicorn.dragonDeathSoundRadius) ) continue; // Spigot
                     if (distanceSquared > viewDistance * viewDistance) {
                         double deltaLength = Math.sqrt(distanceSquared);
                         double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 319c0bc6f621d54ca36e6e2b210a308122f1e070..15b1ba66de9957a836f51571fdebecfe4526b576 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -12,13 +12,13 @@ public class EntityEnderPearl extends EntityProjectile {
 
     public EntityEnderPearl(World world) {
         super(world);
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedEnderPearls; // PaperSpigot
+        this.loadChunks = world.paperConfigUnicorn.loadChunks.enderpearls; // PaperSpigot
     }
 
     public EntityEnderPearl(World world, EntityLiving entityliving) {
         super(world, entityliving);
         this.c = entityliving;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedEnderPearls; // PaperSpigot
+        this.loadChunks = world.paperConfigUnicorn.loadChunks.enderpearls; // PaperSpigot
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
@@ -33,7 +33,7 @@ public class EntityEnderPearl extends EntityProjectile {
         }
 
         // PaperSpigot start - Remove entities in unloaded chunks
-        if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedEnderPearls) {
+        if (this.inUnloadedChunk && world.paperConfigUnicorn.removeUnloaded.enderpearls) {
             this.die();
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 174087abf83e0bb3c28f215ad7438a3bd88f025d..003f71f060622ccaa4a7dcdf2833f27a3ddd574a 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -26,7 +26,7 @@ public class EntityFallingBlock extends Entity {
     public EntityFallingBlock(org.bukkit.Location loc, World world) {
         super(world);
         sourceLoc = loc;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
+        this.loadChunks = world.paperConfigUnicorn.loadChunks.fallingBlocks; // PaperSpigot
     }
 
     public EntityFallingBlock(World world, double d0, double d1, double d2, IBlockData iblockdata) {
@@ -47,7 +47,7 @@ public class EntityFallingBlock extends Entity {
         this.lastX = d0;
         this.lastY = d1;
         this.lastZ = d2;
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
+        this.loadChunks = world.paperConfigUnicorn.loadChunks.fallingBlocks; // PaperSpigot
     }
 
     protected boolean s_() {
@@ -75,7 +75,7 @@ public class EntityFallingBlock extends Entity {
                 blockposition = new BlockPosition(this);
                 if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                    this.world.antiXray.updateNearbyBlocks(world, blockposition); // Spigot
                 } else if (!this.world.isClientSide) {
                     this.die();
                     return;
@@ -86,13 +86,13 @@ public class EntityFallingBlock extends Entity {
             this.move(this.motX, this.motY, this.motZ);
 
             // PaperSpigot start - Remove entities in unloaded chunks
-            if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedFallingBlocks) {
+            if (this.inUnloadedChunk && world.paperConfigUnicorn.removeUnloaded.fallingBlocks) {
                 this.die();
             }
             // PaperSpigot end
 
             // PaperSpigot start - Drop falling blocks above the specified height
-            if (this.world.paperSpigotConfig.fallingBlockHeightNerf != 0 && this.locY > this.world.paperSpigotConfig.fallingBlockHeightNerf) {
+            if (this.world.paperConfigUnicorn.fallingBlockHeightNerf != 0 && this.locY > this.world.paperConfigUnicorn.fallingBlockHeightNerf) {
                 if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
                     this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
                 }
@@ -118,7 +118,7 @@ public class EntityFallingBlock extends Entity {
                                     return;
                                 }
                                 this.world.setTypeAndData(blockposition, this.block, 3);
-                                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                                this.world.antiXray.updateNearbyBlocks(world, blockposition); // Spigot
                                 // CraftBukkit end
                                 if (block instanceof BlockFalling) {
                                     ((BlockFalling) block).a_(this.world, blockposition);
@@ -286,7 +286,7 @@ public class EntityFallingBlock extends Entity {
     // PaperSpigot start - Fix cannons
     @Override
     public double f(double d0, double d1, double d2) {
-        if (!world.paperSpigotConfig.fixCannons) return super.f(d0, d1, d2);
+        if (!world.paperConfigUnicorn.fixCannons) return super.f(d0, d1, d2);
 
         double d3 = this.locX - d0;
         double d4 = this.locY + this.getHeadHeight() - d1;
@@ -297,7 +297,7 @@ public class EntityFallingBlock extends Entity {
 
     @Override
     public float getHeadHeight() {
-        return world.paperSpigotConfig.fixCannons ? this.length / 2 : super.getHeadHeight();
+        return world.paperConfigUnicorn.fixCannons ? this.length / 2 : super.getHeadHeight();
     }
     // PaperSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index df6ce0dbb0c82ac650b852094d2ac7d57a463e29..1923136a76a6fe4c17513dd753a2138cdc6c165c 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -339,7 +339,7 @@ public class EntityFishingHook extends Entity {
                                 this.ax = MathHelper.nextInt(this.random, 20, 80);
                             }
                         } else {
-                            this.aw = MathHelper.nextInt(this.random, this.world.paperSpigotConfig.fishingMinTicks, this.world.paperSpigotConfig.fishingMaxTicks); // PaperSpigot - Configurable fishing tick range
+                            this.aw = MathHelper.nextInt(this.random, this.world.paperConfigUnicorn.fishingTimeRange.minimumTicks, this.world.paperConfigUnicorn.fishingTimeRange.maximumTicks); // PaperSpigot - Configurable fishing tick range
                             this.aw -= EnchantmentManager.h(this.owner) * 20 * 5;
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index f374c39600fb859515c2f7e86d3ef45952faef53..60fdc7ea9f364d0a5a9eb08704e86635a349354d 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -96,7 +96,7 @@ public abstract class EntityHanging extends Entity {
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
-        if (this.c++ == this.world.spigotConfig.hangingTickFrequency && !this.world.isClientSide) {
+        if (this.c++ == this.world.spigotConfigUnicorn.hangingTickFrequency && !this.world.isClientSide) {
             this.c = 0;
             if (!this.dead && !this.survives()) {
                 // CraftBukkit start - fire break events
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
index 53aaa65494dc3c35e9883e8539c11f28ad14aaf0..381ffb3057abebeac01000e49cdb0e6cebb43429 100644
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -180,7 +180,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
     public boolean cb() {
         // PaperSpigot start - Configurable undead horse leashing
-        if (this.world.paperSpigotConfig.allowUndeadHorseLeashing) {
+        if (this.world.paperConfigUnicorn.allowUndeadHorseLeashing) {
             return super.cb();
         }
         // PaperSpigot end
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0ad4edb8390f396d935d321caf67af0f209d5420..df7c507ceea7307b4839364c4da1e2f4a71c81fd 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -862,7 +862,7 @@ public abstract class EntityHuman extends EntityLiving {
         // CraftBukkit end
         if (!this.isInvulnerable(damagesource)) {
             if (!damagesource.ignoresArmor() && this.isBlocking() && f > 0.0F) {
-                f = (1.0F + f) * this.world.paperSpigotConfig.playerBlockingDamageMultiplier; // PaperSpigot - Configurable damage multiplier for blocking;
+                f = (1.0F + f) * this.world.paperConfigUnicorn.playerBlockingDamageMultiplier; // PaperSpigot - Configurable damage multiplier for blocking;
             }
 
             f = this.applyArmorModifier(damagesource, f);
@@ -974,7 +974,7 @@ public abstract class EntityHuman extends EntityLiving {
                 }
 
                 if (f > 0.0F || f1 > 0.0F) {
-                    boolean flag = !world.paperSpigotConfig.disablePlayerCrits && this.fallDistance > 0.0F && !this.onGround && !this.k_() && !this.V() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && entity instanceof EntityLiving; // PaperSpigot
+                    boolean flag = !world.paperConfigUnicorn.gameMechanics.disablePlayerCrits && this.fallDistance > 0.0F && !this.onGround && !this.k_() && !this.V() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && entity instanceof EntityLiving; // PaperSpigot
 
                     if (flag && f > 0.0F) {
                         f *= 1.5F;
@@ -1085,7 +1085,7 @@ public abstract class EntityHuman extends EntityLiving {
                             }
                         }
 
-                        this.applyExhaustion(world.spigotConfig.combatExhaustion); // Spigot - Change to use configurable value
+                        this.applyExhaustion(world.spigotConfigUnicorn.hunger.combatExhaustion); // Spigot - Change to use configurable value
                     } else if (flag1) {
                         entity.extinguish();
                     }
@@ -1342,9 +1342,9 @@ public abstract class EntityHuman extends EntityLiving {
         super.bF();
         this.b(StatisticList.u);
         if (this.isSprinting()) {
-            this.applyExhaustion(world.spigotConfig.sprintExhaustion); // Spigot - Change to use configurable value
+            this.applyExhaustion(world.spigotConfigUnicorn.hunger.sprintExhaustion); // Spigot - Change to use configurable value
         } else {
-            this.applyExhaustion(world.spigotConfig.walkExhaustion); // Spigot - Change to use configurable value
+            this.applyExhaustion(world.spigotConfigUnicorn.hunger.walkExhaustion); // Spigot - Change to use configurable value
         }
 
     }
@@ -1381,13 +1381,13 @@ public abstract class EntityHuman extends EntityLiving {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.p, i);
-                    this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming exhaustion
+                    this.applyExhaustion(world.paperConfigUnicorn.playerExhaustion.swimming * (float) i * 0.01F); // PaperSpigot - Configurable swimming exhaustion
                 }
             } else if (this.V()) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.l, i);
-                    this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming (diving) exhaustion
+                    this.applyExhaustion(world.paperConfigUnicorn.playerExhaustion.swimming * (float) i * 0.01F); // PaperSpigot - Configurable swimming (diving) exhaustion
                 }
             } else if (this.k_()) {
                 if (d1 > 0.0D) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index b82b98473f516e5963fed51ba892bfa59a80c2f5..77c87d8173811495f252627b8cc0ee3b4fe0c798 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -439,13 +439,13 @@ public abstract class EntityInsentient extends EntityLiving {
                 double d2 = entityhuman.locZ - this.locZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (d3 > this.world.paperSpigotConfig.hardDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distances
+                if (d3 > this.world.paperConfigUnicorn.despawnRanges.hard) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distances
                     this.die();
                 }
 
-                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > this.world.paperSpigotConfig.softDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
+                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > this.world.paperConfigUnicorn.despawnRanges.soft) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
                     this.die();
-                } else if (d3 < this.world.paperSpigotConfig.softDespawnDistance) { // PaperSpigot - custom despawn distances
+                } else if (d3 < this.world.paperConfigUnicorn.despawnRanges.soft) { // PaperSpigot - custom despawn distances
                     this.ticksFarFromPlayer = 0;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 1f8b1c726ef7343ee7feb1e4ea4c1ef8cc453723..ead3fa1dc4a99e1ed19deacc36ac2043cb960466 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -108,7 +108,7 @@ public class EntityItem extends Entity {
 
 
             this.W();
-            if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            if (!this.world.isClientSide && this.age >= world.spigotConfigUnicorn.itemDespawnRate) { // Spigot
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
@@ -131,7 +131,7 @@ public class EntityItem extends Entity {
         this.lastTick = MinecraftServer.currentTick;
         // CraftBukkit end
 
-        if (!this.world.isClientSide && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+        if (!this.world.isClientSide && this.age >= world.spigotConfigUnicorn.itemDespawnRate) { // Spigot
             // CraftBukkit start - fire ItemDespawnEvent
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                 this.age = 0;
@@ -145,7 +145,7 @@ public class EntityItem extends Entity {
 
     private void w() {
         // Spigot start
-        double radius = world.spigotConfig.itemMerge;
+        double radius = world.spigotConfigUnicorn.mergeRadius.item;
         Iterator iterator = this.world.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius)).iterator();
         // Spigot end
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index c8b4e292849486eadfb437110466d6eafe275411..0933aa6ff416f56577337e6202b2e09a3cfe6678 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -786,7 +786,7 @@ public abstract class EntityLiving extends Entity {
 
                 // PaperSpigot start - Disable explosion knockback
                 boolean knockbackCancelled = false;
-                if (flag && !(knockbackCancelled = world.paperSpigotConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
+                if (flag && !(knockbackCancelled = world.paperConfigUnicorn.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
                 // PaperSpigot end
                     this.world.broadcastEntityEffect(this, (byte) 2);
                     if (damagesource != DamageSource.DROWN) {
@@ -1676,9 +1676,9 @@ public abstract class EntityLiving extends Entity {
         }));
 
         if (this.ad() && !list.isEmpty()) { // Spigot: Add this.ad() condition
-            numCollisions -= world.spigotConfig.maxCollisionsPerEntity; // Spigot
+            numCollisions -= world.spigotConfigUnicorn.maxEntityCollisions; // Spigot
             for (int i = 0; i < list.size(); ++i) {
-                if (numCollisions > world.spigotConfig.maxCollisionsPerEntity) { break; } // Spigot
+                if (numCollisions > world.spigotConfigUnicorn.maxEntityCollisions) { break; } // Spigot
                 Entity entity = (Entity) list.get(i);
 
                 // TODO better check now?
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0c49a256cc481af1ceb7a873b03763e1d942a362..1f46a6e3488dda686852111d44f8e80c41622409 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -82,7 +82,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
         super(worldserver, gameprofile);
-        this.viewDistance = world.spigotConfig.viewDistance; // PaperSpigot - Player view distance API
+        this.viewDistance = world.spigotConfigUnicorn.viewDistance; // PaperSpigot - Player view distance API
         playerinteractmanager.player = this;
         this.playerInteractManager = playerinteractmanager;
         BlockPosition blockposition = worldserver.getSpawn();
@@ -202,7 +202,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // PaperSpigot start - Configurable container update tick rate
         if (--containerUpdateDelay <= 0) {
             this.activeContainer.b();
-            containerUpdateDelay = world.paperSpigotConfig.containerUpdateTickRate;
+            containerUpdateDelay = world.paperConfigUnicorn.containerUpdateTickRate;
         }
         // PaperSpigot end
         if (!this.world.isClientSide && !this.activeContainer.a((EntityHuman) this)) {
@@ -231,7 +231,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             Chunk chunk;
 
-            while (iterator1.hasNext() && arraylist.size() < this.world.spigotConfig.maxBulkChunk) { // Spigot
+            while (iterator1.hasNext() && arraylist.size() < this.world.spigotConfigUnicorn.maxBulkChunks) { // Spigot
                 ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator1.next();
 
                 if (chunkcoordintpair != null) {
@@ -520,7 +520,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         boolean endPortal = this.dimension == 1 && i == 1;
         if (endPortal) {
             this.b((Statistic) AchievementList.D);
-            if (!world.paperSpigotConfig.disableEndCredits) {
+            if (!world.paperConfigUnicorn.gameMechanics.disableEndCredits) {
                 this.world.kill(this);
                 this.viewingCredits = true;
                 this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 0.0F));
@@ -546,7 +546,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         // PaperSpigot start - Allow configurable end portal credits
-        if (!endPortal || world.paperSpigotConfig.disableEndCredits) {
+        if (!endPortal || world.paperConfigUnicorn.gameMechanics.disableEndCredits) {
             // CraftBukkit start
             TeleportCause cause = (endPortal || (this.dimension == 1 || i == 1)) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
             this.server.getPlayerList().changeDimension(this, i, cause);
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index c927832b6d95694faa9b19e118cacecbabe1d04f..ad72a7a8a8b706e143568eb1b366969cd4180af6 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -235,7 +235,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
                 }
 
                 // PaperSpigot - Toggle to make all chunks spawn chunks
-                boolean isSlimeChunk = world.paperSpigotConfig.allChunksAreSlimeChunks || chunk.a(987234911L).nextInt(10) == 0;
+                boolean isSlimeChunk = world.paperConfigUnicorn.allChunksAreSlimeChunks || chunk.a(987234911L).nextInt(10) == 0;
                 if (this.random.nextInt(10) == 0 && isSlimeChunk && this.locY < 40.0D) {
                     return super.bR();
                 }
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index 31996b4621736e36fea5c931c9b52fe090c1fae4..e624b648359693bc3350774080b5f24cecb60f76 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -142,7 +142,7 @@ public class EntitySquid extends EntityWaterAnimal {
 
     public boolean bR() {
         // PaperSpigot - Configurable squid spawn range
-        return this.locY > this.world.paperSpigotConfig.squidMinSpawnHeight && this.locY < (double) this.world.paperSpigotConfig.squidMaxSpawnHeight && super.bR();
+        return this.locY > this.world.paperConfigUnicorn.squidSpawnHeight.minimum && this.locY < (double) this.world.paperConfigUnicorn.squidSpawnHeight.maximum && super.bR();
     }
 
     public void b(float f, float f1, float f2) {
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 872d9659c20a8f6931e35f41c58f56efeacd9c03..3ab7efff8e01c1bda89a2662eb902429698e333e 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -21,7 +21,7 @@ public class EntityTNTPrimed extends Entity {
     // PaperSpigot end
         this.k = true;
         this.setSize(0.98F, 0.98F);
-        this.loadChunks = world.paperSpigotConfig.loadUnloadedTNTEntities; // PaperSpigot
+        this.loadChunks = world.paperConfigUnicorn.loadChunks.tntEntities; // PaperSpigot
     }
 
     public EntityTNTPrimed(org.bukkit.Location loc, World world, double d0, double d1, double d2, EntityLiving entityliving) {
@@ -37,7 +37,7 @@ public class EntityTNTPrimed extends Entity {
         this.lastY = d1;
         this.lastZ = d2;
         this.source = entityliving;
-        if (world.paperSpigotConfig.fixCannons) this.motX = this.motZ = 0.0F; // PaperSpigot - Fix cannons
+        if (world.paperConfigUnicorn.fixCannons) this.motX = this.motZ = 0.0F; // PaperSpigot - Fix cannons
     }
 
     protected void h() {}
@@ -51,7 +51,7 @@ public class EntityTNTPrimed extends Entity {
     }
 
     public void t_() {
-        if (world.spigotConfig.currentPrimedTnt++ > world.spigotConfig.maxTntTicksPerTick) { return; } // Spigot
+        if (world.spigotConfigUnicorn.currentPrimedTnt++ > world.spigotConfigUnicorn.currentPrimedTnt) { return; } // Spigot
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
@@ -59,13 +59,13 @@ public class EntityTNTPrimed extends Entity {
         this.move(this.motX, this.motY, this.motZ);
 
         // PaperSpigot start - Drop TNT entities above the specified height
-        if (this.world.paperSpigotConfig.tntEntityHeightNerf != 0 && this.locY > this.world.paperSpigotConfig.tntEntityHeightNerf) {
+        if (this.world.paperConfigUnicorn.tntEntityHeightNerf != 0 && this.locY > this.world.paperConfigUnicorn.tntEntityHeightNerf) {
             this.die();
         }
         // PaperSpigot end
 
         // PaperSpigot start - Remove entities in unloaded chunks
-        if (this.inUnloadedChunk && world.paperSpigotConfig.removeUnloadedTNTEntities) {
+        if (this.inUnloadedChunk && world.paperConfigUnicorn.removeUnloaded.tntEntities) {
             this.die();
             this.fuseTicks = 2;
         }
@@ -102,7 +102,7 @@ public class EntityTNTPrimed extends Entity {
         // PaperSpigot start - Force load chunks during TNT explosions
         ChunkProviderServer chunkProviderServer = ((ChunkProviderServer) world.chunkProvider);
         boolean forceChunkLoad = chunkProviderServer.forceChunkLoad;
-        if (world.paperSpigotConfig.loadUnloadedTNTEntities) {
+        if (world.paperConfigUnicorn.loadChunks.tntEntities) {
             chunkProviderServer.forceChunkLoad = true;
         }
         // PaperSpigot end
@@ -118,7 +118,7 @@ public class EntityTNTPrimed extends Entity {
         // CraftBukkit end
 
         // PaperSpigot start - Force load chunks during TNT explosions
-        if (world.paperSpigotConfig.loadUnloadedTNTEntities) {
+        if (world.paperConfigUnicorn.loadChunks.tntEntities) {
             chunkProviderServer.forceChunkLoad = forceChunkLoad;
         }
         // PaperSpigot end
@@ -154,7 +154,7 @@ public class EntityTNTPrimed extends Entity {
     // PaperSpigot start - Fix cannons
     @Override
     public double f(double d0, double d1, double d2) {
-        if (!world.paperSpigotConfig.fixCannons) return super.f(d0, d1, d2);
+        if (!world.paperConfigUnicorn.fixCannons) return super.f(d0, d1, d2);
 
         double d3 = this.locX - d0;
         double d4 = this.locY + this.getHeadHeight() - d1;
@@ -165,12 +165,12 @@ public class EntityTNTPrimed extends Entity {
 
     @Override
     public boolean aL() {
-        return !world.paperSpigotConfig.fixCannons && super.aL();
+        return !world.paperConfigUnicorn.fixCannons && super.aL();
     }
 
     @Override
     public float getHeadHeight() {
-        return world.paperSpigotConfig.fixCannons ? this.length / 2 : 0.0F;
+        return world.paperConfigUnicorn.fixCannons ? this.length / 2 : 0.0F;
     }
 
     /**
@@ -178,7 +178,7 @@ public class EntityTNTPrimed extends Entity {
      */
     @Override
     public boolean W() {
-        if (!world.paperSpigotConfig.fixCannons) return super.W();
+        if (!world.paperConfigUnicorn.fixCannons) return super.W();
 
         // Preserve velocity while calling the super method
         double oldMotX = this.motX;
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 6f7a68814ae7532a8934d9ba928dbed87be55850..358cd95ddc43c07c30ad5e3fb7bc4a799025beb6 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -5,6 +5,7 @@ import com.google.common.base.Predicates;
 import java.util.Iterator;
 import java.util.List;
 
+import org.mythicprojects.unicornspigot.util.MathUtil;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
@@ -191,7 +192,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
-                    if ( world.spigotConfig.witherSpawnSoundRadius > 0 && distanceSquared > world.spigotConfig.witherSpawnSoundRadius * world.spigotConfig.witherSpawnSoundRadius ) continue; // Spigot
+                    if ( world.spigotConfigUnicorn.witherSpawnSoundRadius > 0 && distanceSquared > MathUtil.pow2(world.spigotConfigUnicorn.witherSpawnSoundRadius)) continue; // Spigot
                     if (distanceSquared > viewDistance * viewDistance) {
                         double deltaLength = Math.sqrt(distanceSquared);
                         double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 6d3b002bc768e32f4cc95c9f37b274baf5dc4599..be937d66a7b8ec8b7f6023b4c0a5f85bcc9384cb 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -4,8 +4,8 @@ import java.util.Calendar;
 import java.util.List;
 import java.util.UUID;
 
+import org.mythicprojects.unicornspigot.config.PaperConfig;
 //CraftBukkit start
-import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -16,7 +16,7 @@ public class EntityZombie extends EntityMonster {
 
     protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
     private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
-    private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", org.github.paperspigot.PaperSpigotConfig.babyZombieMovementSpeed, 1); // PaperSpigot - Configurable baby zombie movement speed
+    private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", PaperConfig.get().settings.babyZombieMovementSpeed, 1); // PaperSpigot - Configurable baby zombie movement speed
     private final PathfinderGoalBreakDoor bm = new PathfinderGoalBreakDoor(this);
     private int bn;
     private boolean bo = false;
@@ -38,12 +38,12 @@ public class EntityZombie extends EntityMonster {
     }
 
     protected void n() {
-        if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityVillager.class, 1.0D, true)); // Spigot
+        if ( world.spigotConfigUnicorn.zombieAggressiveTowardsVillager ) this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityVillager.class, 1.0D, true)); // Spigot
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityIronGolem.class, 1.0D, true));
         this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, false));
         this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityPigZombie.class}));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
-        if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
+        if ( world.spigotConfigUnicorn.zombieAggressiveTowardsVillager ) this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
     }
 
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index b7d410eeb974eee7b26dce8e3b02ff2051e74f93..9860d86a39d90dfe155c4f306423464b6cbf74fa 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -141,7 +141,7 @@ public class Explosion {
                             continue;
                         }
                         // CraftBukkit end
-                        double d14 = entity instanceof EntityHuman && world.paperSpigotConfig.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
+                        double d14 = entity instanceof EntityHuman && world.paperConfigUnicorn.disableExplosionKnockback ? 0 : EnchantmentProtection.a(entity, d13); // PaperSpigot
 
                         // PaperSpigot start - Fix cannons
                         /*
@@ -153,7 +153,7 @@ public class Explosion {
                         entity.g(d8 * d14, d9 * d14, d10 * d14);
                         // PaperSpigot end
 
-                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperSpigotConfig.disableExplosionKnockback) { // PaperSpigot
+                        if (entity instanceof EntityHuman && !((EntityHuman) entity).abilities.isInvulnerable && !world.paperConfigUnicorn.disableExplosionKnockback) { // PaperSpigot
                             this.k.put((EntityHuman) entity, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
                         }
                     }
@@ -165,7 +165,7 @@ public class Explosion {
 
     public void a(boolean flag) {
         // PaperSpigot start - Configurable TNT explosion volume.
-        float volume = source instanceof EntityTNTPrimed ? world.paperSpigotConfig.tntExplosionVolume : 4.0F;
+        float volume = source instanceof EntityTNTPrimed ? world.paperConfigUnicorn.tntExplosionVolume : 4.0F;
         this.world.makeSound(this.posX, this.posY, this.posZ, "random.explode", volume, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         // PaperSpigot end
         if (this.size >= 2.0F && this.b) {
@@ -228,7 +228,7 @@ public class Explosion {
                 blockposition = (BlockPosition) iterator.next();
                 Block block = this.world.getType(blockposition).getBlock();
 
-                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                this.world.antiXray.updateNearbyBlocks(world, blockposition); // Spigot
                 if (flag) {
                     double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
                     double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
@@ -300,7 +300,7 @@ public class Explosion {
 
     // PaperSpigot start - Optimize explosions
     private float getBlockDensity(Vec3D vec3d, AxisAlignedBB aabb) {
-        if (!this.world.paperSpigotConfig.optimizeExplosions) {
+        if (!this.world.paperConfigUnicorn.optimizeExplosions) {
             return this.world.a(vec3d, aabb);
         }
 
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index d0bcad676e5c11f9056da7fb0857255e2f8e48c0..719cee55a2f269f3c1f6a2749c438b071a001910 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -63,7 +63,7 @@ public class FoodMetaData {
             if (this.foodTickTimer >= 80) {
                 // CraftBukkit - added RegainReason
                 entityhuman.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED);
-                this.a(entityhuman.world.spigotConfig.regenExhaustion); // Spigot - Change to use configurable value
+                this.a(entityhuman.world.spigotConfigUnicorn.hunger.regenExhaustion); // Spigot - Change to use configurable value
                 this.foodTickTimer = 0;
             }
         } else if (this.foodLevel <= 0) {
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 0cc3e2fb6222f1aa77a2be94dac4985293c16862..636ebff800e37f92961ee174ba10c14df40a77ba 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.UUID;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -10,11 +11,11 @@ public class GenericAttributes {
 
     private static final Logger f = LogManager.getLogger();
     // Spigot start
-    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
+    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  SpigotConfig.get().settings.attribute.maxHealth)).a("Max Health").a(true);
     public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
     public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
-    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
-    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, SpigotConfig.get().settings.attribute.movementSpeed)).a("Movement Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, SpigotConfig.get().settings.attribute.attackDamage);
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 215648ece51b9e0316bae17de60abccfd40f8b35..2c067acb2bc73913166c355f437998c34a8103f4 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 // CraftBukkit start
 import java.net.InetAddress;
 import java.util.HashMap;
@@ -63,17 +64,17 @@ public class HandshakeListener implements PacketHandshakingInListener {
             // CraftBukkit end
 
             if (packethandshakinginsetprotocol.b() > 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( SpigotConfig.get().messages.outdatedServer.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else if (packethandshakinginsetprotocol.b() < 47) {
-                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
+                chatcomponenttext = new ChatComponentText( java.text.MessageFormat.format( SpigotConfig.get().messages.outdatedClient.replaceAll("'", "''"), "1.8.8" ) ); // Spigot
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else {
                 this.b.a((PacketListener) (new LoginListener(this.a, this.b)));
                 // Spigot Start
-                if (org.spigotmc.SpigotConfig.bungee) {
+                if (SpigotConfig.get().settings.bungeecord) {
                     String[] split = packethandshakinginsetprotocol.hostname.split("\00");
                     if ( split.length == 3 || split.length == 4 ) {
                         packethandshakinginsetprotocol.hostname = split[0];
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 95060a4e61970f4e812d9388d5d34be6c0d62777..b3014c8e17b2ec2b795765a92eadb05a82e9f571 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.List;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 
 public class IntCache {
 
@@ -11,17 +12,19 @@ public class IntCache {
     private static List<int[]> d = Lists.newArrayList();
     private static List<int[]> e = Lists.newArrayList();
 
+    private static final int cacheLimit = SpigotConfig.get().settings.cacheLimit;
+
     public static synchronized int[] a(int i) {
         int[] aint;
 
         if (i <= 256) {
             if (IntCache.b.isEmpty()) {
                 aint = new int[256];
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < cacheLimit) IntCache.c.add(aint);
                 return aint;
             } else {
                 aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
-                if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
+                if (c.size() < cacheLimit) IntCache.c.add(aint);
                 return aint;
             }
         } else if (i > IntCache.a) {
@@ -29,15 +32,15 @@ public class IntCache {
             IntCache.d.clear();
             IntCache.e.clear();
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < cacheLimit) IntCache.e.add(aint);
             return aint;
         } else if (IntCache.d.isEmpty()) {
             aint = new int[IntCache.a];
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < cacheLimit) IntCache.e.add(aint);
             return aint;
         } else {
             aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
-            if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
+            if (e.size() < cacheLimit) IntCache.e.add(aint);
             return aint;
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index b62ea42fc40f0e2000f7f408b3f4d9424b1be4c1..1a3883d6b7c72763ad8a0ee3b17a7f31d29fe63c 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import org.mythicprojects.unicornspigot.config.PaperConfig;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -7,8 +8,6 @@ import org.bukkit.event.player.PlayerBucketEmptyEvent;
 import org.bukkit.event.player.PlayerBucketFillEvent;
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
-
 public class ItemBucket extends Item {
 
     private Block a;
@@ -96,8 +95,8 @@ public class ItemBucket extends Item {
                     if (this.a(world, blockposition1) && !entityhuman.abilities.canInstantlyBuild) {
                         entityhuman.b(StatisticList.USE_ITEM_COUNT[Item.getId(this)]);
                         // PaperSpigot start - Stackable Buckets
-                        if ((this == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                (this == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets)) {
+                        if ((this == Items.LAVA_BUCKET && PaperConfig.get().stackableBuckets.lava) ||
+                                (this == Items.WATER_BUCKET && PaperConfig.get().stackableBuckets.water)) {
                             if (--itemstack.count <= 0) {
                                 return CraftItemStack.asNMSCopy(event.getItemStack());
                             }
diff --git a/src/main/java/net/minecraft/server/ItemMilkBucket.java b/src/main/java/net/minecraft/server/ItemMilkBucket.java
index 8e3d77e050da3b9f6b12bba62fb0d1a2350fa0d8..67e54b5254be03a22cdbfc6d4ece55c00849a3c5 100644
--- a/src/main/java/net/minecraft/server/ItemMilkBucket.java
+++ b/src/main/java/net/minecraft/server/ItemMilkBucket.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
+import org.mythicprojects.unicornspigot.config.PaperConfig;
 
 public class ItemMilkBucket extends Item {
 
@@ -20,7 +20,7 @@ public class ItemMilkBucket extends Item {
 
         entityhuman.b(StatisticList.USE_ITEM_COUNT[Item.getId(this)]);
         // PaperSpigot start - Stackable Buckets
-        if (PaperSpigotConfig.stackableMilkBuckets) {
+        if (PaperConfig.get().stackableBuckets.milk) {
             if (itemstack.count <= 0) {
                 return new ItemStack(Items.BUCKET);
             } else if (!entityhuman.inventory.pickup(new ItemStack(Items.BUCKET))) {
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 015ce283495dc57c8a9dc018ad36a04ebfd637d0..5ca7bda0bc4e97a11b3531174dfd39588918fd77 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -9,6 +9,7 @@ import java.util.Random;
 import java.util.List;
 import java.util.Map;
 
+import org.mythicprojects.unicornspigot.config.PaperConfig;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -18,8 +19,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.world.StructureGrowEvent;
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
-
 public final class ItemStack {
 
     public static final DecimalFormat a = new DecimalFormat("#.###");
@@ -327,7 +326,7 @@ public final class ItemStack {
         int id = CraftMagicNumbers.getId(this.getItem());
         if (CraftMagicNumbers.getBlock(id) != Blocks.AIR) {
             // If vanilla doesn't use data on it don't allow any
-            if ((PaperSpigotConfig.dataValueAllowedItems == null || !PaperSpigotConfig.dataValueAllowedItems.contains(id)) &&
+            if ((PaperConfig.get().dataValueAllowedItems == null || !PaperConfig.get().dataValueAllowedItems.contains(id)) &&
                     (!(this.usesData() || this.getItem().usesDurability()))) {
             // PaperSpigot end
                 i = 0;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b5836dbc03f4fa3ae9e522731aa1af47294df174..55bcb251fb00964086f5fb832efcf2f7385b16ca 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -34,6 +34,7 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -484,7 +485,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.n.e();
             }
             // Spigot start
-            if( org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly )
+            if( SpigotConfig.get().settings.saveUserCacheOnStopOnly )
             {
                 LOGGER.info("Saving usercache.json");
                 this.Z.c();
diff --git a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
index 175503bdbdcb728d4245d73880b605da7fff90e2..b26ae618e2f40c99c6dd82d76ce18850bbef0756 100644
--- a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
+++ b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import org.mythicprojects.unicornspigot.config.PaperConfig;
+
 public class MobEffectAttackDamage extends MobEffectList {
 
     protected MobEffectAttackDamage(int i, MinecraftKey minecraftkey, boolean flag, int j) {
@@ -8,6 +10,6 @@ public class MobEffectAttackDamage extends MobEffectList {
 
     public double a(int i, AttributeModifier attributemodifier) {
         // PaperSpigot - Configurable modifiers for strength and weakness effects
-        return this.id == MobEffectList.WEAKNESS.id ? (double) (org.github.paperspigot.PaperSpigotConfig.weaknessEffectModifier * (float) (i + 1)) : org.github.paperspigot.PaperSpigotConfig.strengthEffectModifier * (double) (i + 1);
+        return this.id == MobEffectList.WEAKNESS.id ? (double) (PaperConfig.get().effectModifiers.weakness * (float) (i + 1)) : PaperConfig.get().effectModifiers.strength * (double) (i + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index e54f7edbd1d834391f6760ea7b82cf6af4ddf994..c2c17d69e17949b93089e649ab7b3feb2aeff61e 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -59,7 +59,7 @@ public abstract class MobSpawnerAbstract {
     public void c() {
         // PaperSpigot start - Configurable mob spawner tick rate
         if (spawnDelay > 0 && --tickDelay > 0) return;
-        tickDelay = this.a().paperSpigotConfig.mobSpawnerTickRate;
+        tickDelay = this.a().paperConfigUnicorn.mobSpawnerTickRate;
         // PaperSpigot end
         if (this.g()) {
             BlockPosition blockposition = this.b();
@@ -150,7 +150,7 @@ public abstract class MobSpawnerAbstract {
                 if (!event.isCancelled()) {
                     entity.world.addEntity(entity, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
                     // Spigot Start
-                    if ( entity.world.spigotConfig.nerfSpawnerMobs )
+                    if ( entity.world.spigotConfigUnicorn.nerfSpawnerMobs )
                     {
                         entity.fromMobSpawner = true;
                     }
@@ -203,7 +203,7 @@ public abstract class MobSpawnerAbstract {
             if (!event.isCancelled()) {
                 entity.world.addEntity(entity, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
                 // Spigot Start
-                if ( entity.world.spigotConfig.nerfSpawnerMobs )
+                if ( entity.world.spigotConfigUnicorn.nerfSpawnerMobs )
                 {
                     entity.fromMobSpawner = true;
                 }
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 40291094e8aeff2a12b7b4ae721ef3e928a3b0b1..22e9ed6880f4bfe265c200bb74f8a64971e1ca24 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -66,7 +67,7 @@ public class NameReferencingFileConverter {
             }
         }), String.class);
 
-        if (minecraftserver.getOnlineMode() || org.spigotmc.SpigotConfig.bungee) { // Spigot: bungee = online mode, for now.
+        if (minecraftserver.getOnlineMode() || SpigotConfig.get().settings.bungeecord) { // Spigot: bungee = online mode, for now.
             minecraftserver.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, profilelookupcallback);
         } else {
             String[] astring1 = astring;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index a0021fb96bac484f69e9d7c5c935c034d56358f9..223c6f93275cc43dedd486c8c925bca0a8efa093 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -19,7 +19,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.b = chunk.locZ;
         this.d = flag;
         this.c = chunk.getChunkMap(flag, i); // PaperSpigot
-        chunk.world.spigotConfig.antiXrayInstance.obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
+        chunk.world.antiXray.obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index 00c05385066dc2dafad5fd2fc891295cd65bc2df..c1164a447863caa73ea96ba5c5f4f414ac899fe4 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -70,7 +70,7 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
         }
 
         for (i = 0; i < this.a.length; ++i) {
-            world.spigotConfig.antiXrayInstance.obfuscate(this.a[i], this.b[i], this.c[i].b, this.c[i].a, world); // Spigot
+            this.world.antiXray.obfuscate(this.a[i], this.b[i], this.c[i].b, this.c[i].a, world); // Spigot
             packetdataserializer.writeBytes(this.c[i].a);
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index e4bff04ac4b817f92a6a2ab6ab4e7afa6e9576bd..046487f2af208c377aa41cf5c530dd56cff1b385 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -6,6 +6,7 @@ import io.netty.channel.ChannelFutureListener;
 import java.net.InetSocketAddress;
 import java.util.Iterator;
 
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.entity.Player;
 
@@ -112,7 +113,7 @@ public class PacketStatusListener implements PacketStatusInListener {
         if ( !profiles.isEmpty() )
         {
             java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
-            profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            profiles = profiles.subList( 0, Math.min( profiles.size(), SpigotConfig.get().settings.sampleCount ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
         }
         // Spigot End
         playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 4391ad7e7cf547b5e179c06e64b3a6e02cbe7a41..7a714a99797c3106b533f5e42cee25212070b4d4 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -15,6 +15,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import org.mythicprojects.unicornspigot.config.PaperConfig;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -63,7 +65,7 @@ import org.bukkit.util.NumberConversions;
 import co.aikar.timings.SpigotTimings; // Spigot
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
+//import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot // Unicorn
 
 public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerListBox {
 
@@ -395,7 +397,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     double d15 = d11 * d11 + d12 * d12 + d13 * d13;
 
                     // Spigot: make "moved too quickly" limit configurable
-                    if (d15 - d14 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
+                    if (d15 - d14 > SpigotConfig.get().settings.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
                         PlayerConnection.c.warn(this.player.getName() + " moved too quickly! " + d11 + "," + d12 + "," + d13 + " (" + d11 + ", " + d12 + ", " + d13 + ")");
                         this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
                         return;
@@ -423,7 +425,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     boolean flag1 = false;
 
                     // Spigot: make "moved wrongly" limit configurable
-                    if (d15 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
+                    if (d15 > SpigotConfig.get().settings.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
                         flag1 = true;
                         PlayerConnection.c.warn(this.player.getName() + " moved wrongly!");
                     }
@@ -665,7 +667,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         boolean throttled = false;
         // PaperSpigot - Allow disabling the player interaction limiter
-        if (org.github.paperspigot.PaperSpigotConfig.interactLimitEnabled && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
+        if (PaperConfig.get().settings.limitPlayerInteractions && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
             throttled = true;
         } else if ( packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1 )
         {
@@ -1033,7 +1035,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             // Spigot start - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
+            for ( String exclude : SpigotConfig.get().commands.spamExclusions )
             {
                 if ( exclude != null && s.startsWith( exclude ) )
                 {
@@ -1172,7 +1174,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
    private void handleCommand(String s) {
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
        // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
+        if ( SpigotConfig.get().commands.log ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
@@ -1662,9 +1664,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
                             // PaperSpigot start - Stackable Buckets
                             if (itemstack != null &&
-                                    ((itemstack.getItem() == Items.LAVA_BUCKET && PaperSpigotConfig.stackableLavaBuckets) ||
-                                            (itemstack.getItem() == Items.WATER_BUCKET && PaperSpigotConfig.stackableWaterBuckets) ||
-                                            (itemstack.getItem() == Items.MILK_BUCKET && PaperSpigotConfig.stackableMilkBuckets))) {
+                                    ((itemstack.getItem() == Items.LAVA_BUCKET && PaperConfig.get().stackableBuckets.lava) ||
+                                            (itemstack.getItem() == Items.WATER_BUCKET && PaperConfig.get().stackableBuckets.water) ||
+                                            (itemstack.getItem() == Items.MILK_BUCKET && PaperConfig.get().stackableBuckets.milk))) {
                                 if (action == InventoryAction.MOVE_TO_OTHER_INVENTORY) {
                                     this.player.updateInventory(this.player.activeContainer);
                                 } else {
@@ -1793,7 +1795,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() < 36 + PlayerInventory.getHotbarSize();
             // CraftBukkit - Add invalidItems check
-            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !org.spigotmc.SpigotConfig.filterCreativeItems); // Spigot
+            boolean flag2 = itemstack == null || itemstack.getItem() != null && (!invalidItems.contains(Item.getId(itemstack.getItem())) || !SpigotConfig.get().settings.filterCreativeItems); // Spigot
             boolean flag3 = itemstack == null || itemstack.getData() >= 0 && itemstack.count <= 64 && itemstack.count > 0;
             // CraftBukkit start - Call click event
             if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 33a0a095ff525349275e5319999c1437091e0671..4f9a2063cdf364a4813dff529425f31f5d21062f 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import org.mythicprojects.unicornspigot.config.SpigotWorldConfig;
 // CraftBukkit start
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -197,7 +198,7 @@ public class PlayerInteractManager {
             }
 
         }
-        world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+        this.world.antiXray.updateNearbyBlocks(world, blockposition); // Spigot
     }
 
     public void a(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3c2d3197faa7e5212f7c6f9970e56426ae02ade7..8fb357b7c7ca20a12798493b87d958804599364c 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -15,6 +15,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -451,7 +452,7 @@ public abstract class PlayerList {
             if (!gameprofilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s); // Spigot
         } else if (!this.isWhitelisted(gameprofile)) {
             // return "You are not white-listed on this server!";
-            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, SpigotConfig.get().messages.whitelist); // Spigot
         } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
             IpBanEntry ipbanentry = this.l.get(socketaddress);
 
@@ -465,7 +466,7 @@ public abstract class PlayerList {
         } else {
             // return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
             if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
-                event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, SpigotConfig.get().messages.serverFull); // Spigot
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index f13182c186723c0fe6ac695c8fe3a0c0bcfaab5d..570176880119206c08028e4344e8c2dc5b83ef90 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -24,6 +24,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -125,7 +126,7 @@ public class ServerConnection {
         synchronized (this.h) {
             // Spigot Start
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
-            if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+            if ( SpigotConfig.get().settings.playerShuffle > 0 && MinecraftServer.currentTick % SpigotConfig.get().settings.playerShuffle == 0 )
             {
                 Collections.shuffle( this.h );
             }
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 22c2ffddf2398604ae00cf7b471a80ce1bb15af5..22d03bd8f19ac10b1fbb9988ac2cf9d9a74c990c 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -15,6 +15,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.commons.io.FileUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -32,10 +33,10 @@ public class ServerStatisticManager extends StatisticManager {
         this.c = minecraftserver;
         this.d = file;
         // Spigot start
-        for ( String name : org.spigotmc.SpigotConfig.forcedStats.keySet() )
+        for ( String name : SpigotConfig.get().stats.forcedStats.keySet() )
         {
             StatisticWrapper wrapper = new StatisticWrapper();
-            wrapper.a( org.spigotmc.SpigotConfig.forcedStats.get( name ) );
+            wrapper.a( SpigotConfig.get().stats.forcedStats.get( name ) );
             a.put( StatisticList.getStatistic( name ), wrapper );
         }
         // Spigot end
@@ -56,7 +57,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void b() {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( SpigotConfig.get().stats.disableSaving ) return; // Spigot
         try {
             FileUtils.writeStringToFile(this.d, a(this.a));
         } catch (IOException ioexception) {
@@ -66,7 +67,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic statistic, int i) {
-        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        if ( SpigotConfig.get().stats.disableSaving) return; // Spigot
         int j = statistic.d() ? this.getStatisticValue(statistic) : 0;
 
         super.setStatistic(entityhuman, statistic, i);
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 284f4bf2f6b7790a85d22fa1d4e5fa37f1f4aca2..27a80ed1c41785338bc460b1d17642f187d102b1 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -59,8 +59,8 @@ public final class SpawnerCreature {
                     j = MathHelper.floor(entityhuman.locZ / 16.0D);
                     byte b0 = 8;
                     // Spigot Start
-                    b0 = worldserver.spigotConfig.mobSpawnRange;
-                    b0 = ( b0 > worldserver.spigotConfig.viewDistance ) ? (byte) worldserver.spigotConfig.viewDistance : b0;
+                    b0 = worldserver.spigotConfigUnicorn.mobSpawnRange;
+                    b0 = ( b0 > worldserver.spigotConfigUnicorn.viewDistance ) ? (byte) worldserver.spigotConfigUnicorn.viewDistance : b0;
                     b0 = ( b0 > 8 ) ? 8 : b0;
                     // Spigot End
 
diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index e76acfc4f39287f8f3078ce1b2516d4ca8fc4c6c..9b3751e923657f90828904e6cb08109f41353afc 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -198,7 +198,7 @@ public abstract class StructureGenerator extends WorldGenBase {
     private void a(World world) {
         if (this.d == null) {
             // Spigot Start
-            if ( world.spigotConfig.saveStructureInfo && !this.a().equals( "Mineshaft" ) )
+            if ( world.spigotConfigUnicorn.saveStructureInfo && !this.a().equals( "Mineshaft" ) )
             {
             this.d = (PersistentStructure) world.a(PersistentStructure.class, this.a());
             } else
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 760a0767eae7c148efd27c78a4a2f142507b75b7..7337bf3d1a8e794b741acfd84c14277a9d96fed2 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -194,14 +194,14 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 }
 
                 if (flag) {
-                    this.d(world.spigotConfig.hopperTransfer); // Spigot
+                    this.d(world.spigotConfigUnicorn.ticksPer.hopperTransfer); // Spigot
                     this.update();
                     return true;
                 }
             }
             // PaperSpigot start
-            if (world.paperSpigotConfig.useHopperCheck && !this.n()) {
-                this.d(world.spigotConfig.hopperCheck);
+            if (world.paperConfigUnicorn.useHopperCheck && !this.n()) {
+                this.d(world.spigotConfigUnicorn.ticksPer.hopperCheck);
             }
             // PaperSpigot end
             return false;
@@ -257,7 +257,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
 
                         // CraftBukkit start - Call event when pushing items into other inventories
-                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfigUnicorn.hopperAmount)); // Spigot
 
                         Inventory destinationInventory;
                         // Have to special case large chests as they work oddly
@@ -271,7 +271,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         this.getWorld().getServer().getPluginManager().callEvent(event);
                         if (event.isCancelled()) {
                             this.setItem(i, itemstack);
-                            this.d(world.spigotConfig.hopperTransfer); // Spigot
+                            this.d(world.spigotConfigUnicorn.ticksPer.hopperTransfer); // Spigot
                             return false;
                         }
                         int origCount = event.getItem().getAmount(); // Spigot
@@ -396,7 +396,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             ItemStack itemstack1 = itemstack.cloneItemStack();
             // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
             // CraftBukkit start - Call event on collection of items from inventories into the hopper
-            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfigUnicorn.hopperAmount)); // Spigot
 
             Inventory sourceInventory;
             // Have to special case large chests as they work oddly
@@ -413,9 +413,9 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 iinventory.setItem(i, itemstack1);
 
                 if (ihopper instanceof TileEntityHopper) {
-                    ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfig.hopperTransfer); // Spigot
+                    ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfigUnicorn.ticksPer.hopperTransfer); // Spigot
                 } else if (ihopper instanceof EntityMinecartHopper) {
-                    ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfig.hopperTransfer / 2); // Spigot
+                    ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfigUnicorn.ticksPer.hopperTransfer / 2); // Spigot
                 }
                 return false;
             }
@@ -521,7 +521,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                     TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory;
 
                     if (tileentityhopper.o()) {
-                        tileentityhopper.d(tileentityhopper.world.spigotConfig.hopperTransfer); // Spigot
+                        tileentityhopper.d(tileentityhopper.world.spigotConfigUnicorn.ticksPer.hopperTransfer); // Spigot
                     }
 
                     iinventory.update();
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 0f82e06cba1c245846b665ee00ab9a6e388884d3..84849186b6bb3cf7bdc5a61b9e807169da54fc0c 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -35,6 +35,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
 import org.apache.commons.io.IOUtils;
 
 public class UserCache {
@@ -121,7 +122,7 @@ public class UserCache {
         this.c.put(gameprofile.getName().toLowerCase(Locale.ROOT), usercache_usercacheentry);
         this.d.put(uuid, usercache_usercacheentry);
         this.e.addFirst(gameprofile);
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !SpigotConfig.get().settings.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
     }
 
     public GameProfile getProfile(String s) {
@@ -149,7 +150,7 @@ public class UserCache {
             }
         }
 
-        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.c(); // Spigot - skip saving if disabled
+        if( !SpigotConfig.get().settings.saveUserCacheOnStopOnly) this.c(); // Spigot - skip saving if disabled
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
     }
 
@@ -213,7 +214,7 @@ public class UserCache {
     }
 
     public void c() {
-        String s = this.b.toJson(this.a(org.spigotmc.SpigotConfig.userCacheCap));
+        String s = this.b.toJson(this.a(SpigotConfig.get().settings.userCacheSize));
         BufferedWriter bufferedwriter = null;
 
         try {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8f3511f800818c36b9387b92376e0b9785ec52b5..12ec5d2d4100eb2ab162022e074dd4012490b4d4 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -4,18 +4,19 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import org.mythicprojects.unicornspigot.config.PaperWorldConfig;
+import org.mythicprojects.unicornspigot.config.SpigotWorldConfig;
+import org.mythicprojects.unicornspigot.config.UnicornWorldConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
-import co.aikar.timings.SpigotTimings;
 
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -163,6 +164,13 @@ public abstract class World implements IBlockAccess {
 
     public final org.github.paperspigot.PaperSpigotWorldConfig paperSpigotConfig; // PaperSpigot
 
+    // Unicorn start
+    public final UnicornWorldConfig unicornConfig;
+    public final SpigotWorldConfig spigotConfigUnicorn;
+    public final PaperWorldConfig paperConfigUnicorn;
+    public org.spigotmc.AntiXray antiXray;
+    // Unicorn end
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
 
     public CraftWorld getWorld() {
@@ -180,6 +188,15 @@ public abstract class World implements IBlockAccess {
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
+        // Unicorn start - modern config system
+        this.worldData = worlddata;
+        CraftServer server = this.getServer();
+        this.unicornConfig = server.unicornConfig.getWorldConfig( worlddata.getName() );
+        this.spigotConfigUnicorn = server.spigotConfig.getWorldConfig( worlddata.getName() );
+        this.paperConfigUnicorn = server.paperConfig.getWorldConfig( worlddata.getName() );
+        this.antiXray = this.spigotConfigUnicorn.getAntiXray();
+        server.unicornSpigot.remapConfigs(this);
+        // Unicorn end
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
@@ -187,7 +204,7 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit end
         // Spigot start
         this.chunkTickRadius = (byte) ( ( this.getServer().getViewDistance() < 7 ) ? this.getServer().getViewDistance() : 7 );
-        this.chunkTickList = new gnu.trove.map.hash.TLongShortHashMap( spigotConfig.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE );
+        this.chunkTickList = new gnu.trove.map.hash.TLongShortHashMap( spigotConfigUnicorn.chunksPerTick* 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE );
         this.chunkTickList.setAutoCompactionFactor( 0 );
         // Spigot end
 
@@ -197,7 +214,7 @@ public abstract class World implements IBlockAccess {
         this.H = new int['\u8000'];
         this.dataManager = idatamanager;
         this.methodProfiler = methodprofiler;
-        this.worldData = worlddata;
+        //this.worldData = worlddata; // Unicorn - moved up
         this.worldProvider = worldprovider;
         this.isClientSide = flag;
         this.N = worldprovider.getWorldBorder();
@@ -230,10 +247,10 @@ public abstract class World implements IBlockAccess {
         }); 
         this.getServer().addWorld(this.world); 
         // CraftBukkit end
-        this.keepSpawnInMemory = this.paperSpigotConfig.keepSpawnInMemory; // PaperSpigot
+        this.keepSpawnInMemory = paperConfigUnicorn.keepSpawnLoaded; // PaperSpigot
         timings = new co.aikar.timings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
-        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
-        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfigUnicorn.maxTickTime.entity);
+        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfigUnicorn.maxTickTime.tile);
     }
 
     public World b() {
@@ -534,7 +551,7 @@ public abstract class World implements IBlockAccess {
         this.d(blockposition.up(), block);
         this.d(blockposition.north(), block);
         this.d(blockposition.south(), block);
-        spigotConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Spigot
+        this.antiXray.updateNearbyBlocks(this, blockposition); // Spigot
     }
 
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
@@ -1026,7 +1043,7 @@ public abstract class World implements IBlockAccess {
         // Spigot start
         else if (entity instanceof EntityExperienceOrb) {
             EntityExperienceOrb xp = (EntityExperienceOrb) entity;
-            double radius = spigotConfig.expMerge;
+            double radius = spigotConfigUnicorn.mergeRadius.exp;
             if (radius > 0) {
                 List<Entity> entities = this.getEntities(entity, entity.getBoundingBox().grow(radius, radius, radius));
                 for (Entity e : entities) {
@@ -1214,7 +1231,7 @@ public abstract class World implements IBlockAccess {
                             {
                                 // PaperSpigot start - FallingBlocks and TNT collide with specific non-collidable blocks
                                 Block b = block.getBlock();
-                                if (entity.world.paperSpigotConfig.fallingBlocksCollideWithSigns && (entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && (b instanceof BlockSign || b instanceof BlockFenceGate || b instanceof BlockTorch || b instanceof BlockButtonAbstract || b instanceof BlockLever || b instanceof BlockTripwireHook || b instanceof BlockTripwire || b instanceof BlockChest || b instanceof BlockSlowSand || b instanceof BlockBed || b instanceof BlockEnderChest || b instanceof BlockEnchantmentTable || b instanceof BlockBrewingStand)) {
+                                if (entity.world.paperConfigUnicorn.fallingBlocksCollideWithSigns && (entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && (b instanceof BlockSign || b instanceof BlockFenceGate || b instanceof BlockTorch || b instanceof BlockButtonAbstract || b instanceof BlockLever || b instanceof BlockTripwireHook || b instanceof BlockTripwire || b instanceof BlockChest || b instanceof BlockSlowSand || b instanceof BlockBed || b instanceof BlockEnderChest || b instanceof BlockEnchantmentTable || b instanceof BlockBrewingStand)) {
                                     AxisAlignedBB aabb = AxisAlignedBB.a(x, y, z, x + 1.0, y + 1.0, z + 1.0);
                                     if (axisalignedbb.b(aabb)) arraylist.add(aabb);
                                 } else {
@@ -1627,9 +1644,9 @@ public abstract class World implements IBlockAccess {
             entity.ticksLived++;
             entity.inactiveTick();
             // PaperSpigot start - Remove entities in unloaded chunks
-            if (!this.isChunkLoaded(i, j, true) && ((entity instanceof EntityEnderPearl && this.paperSpigotConfig.removeUnloadedEnderPearls) ||
-                    (entity instanceof EntityFallingBlock && this.paperSpigotConfig.removeUnloadedFallingBlocks) ||
-                    (entity instanceof EntityTNTPrimed && this.paperSpigotConfig.removeUnloadedTNTEntities))) {
+            if (!this.isChunkLoaded(i, j, true) && ((entity instanceof EntityEnderPearl && this.paperConfigUnicorn.removeUnloaded.enderpearls) ||
+                    (entity instanceof EntityFallingBlock && this.paperConfigUnicorn.removeUnloaded.fallingBlocks) ||
+                    (entity instanceof EntityTNTPrimed && this.paperConfigUnicorn.removeUnloaded.tntEntities))) {
                 entity.inUnloadedChunk = true;
                 entity.die();
             }
@@ -2202,7 +2219,7 @@ public abstract class World implements IBlockAccess {
         int l;
 
         // Spigot start
-        int optimalChunks = spigotConfig.chunksPerTick;
+        int optimalChunks = spigotConfigUnicorn.chunksPerTick;
         // Quick conditions to allow us to exist early
         if ( optimalChunks > 0  ) {
         // Keep chunks with growth inside of the optimal chunk range
@@ -2245,7 +2262,7 @@ public abstract class World implements IBlockAccess {
         }
 
         this.methodProfiler.a("playerCheckLight");
-        if (spigotConfig.randomLightUpdates && !this.players.isEmpty()) { // Spigot
+        if (spigotConfigUnicorn.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             i = this.random.nextInt(this.players.size());
             entityhuman = (EntityHuman) this.players.get(i);
             j = MathHelper.floor(entityhuman.locX) + this.random.nextInt(11) - 5;
@@ -2261,7 +2278,7 @@ public abstract class World implements IBlockAccess {
 
     protected void a(int i, int j, Chunk chunk) {
         this.methodProfiler.c("moodSound");
-        if (!this.paperSpigotConfig.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
+        if (!this.paperConfigUnicorn.disableMoodSounds && this.L == 0 && !this.isClientSide) { // PaperSpigot - Disable mood sounds
             this.m = this.m * 3 + 1013904223;
             int k = this.m >> 2;
             int l = k & 15;
@@ -2533,7 +2550,7 @@ public abstract class World implements IBlockAccess {
             }
 
             // PaperSpigot start - Asynchronous light updates
-            if (chunk.world.paperSpigotConfig.useAsyncLighting) {
+            if (chunk.world.paperConfigUnicorn.useAsyncLightning) {
                 chunk.pendingLightUpdates.decrementAndGet();
                 if (neighbors != null) {
                     for (Chunk neighbor : neighbors) {
@@ -2558,7 +2575,7 @@ public abstract class World implements IBlockAccess {
             return false;
         }
 
-        if (!chunk.world.paperSpigotConfig.useAsyncLighting) {
+        if (!chunk.world.paperConfigUnicorn.useAsyncLightning) {
             return this.c(enumskyblock, position, chunk, null);
         }
 
@@ -3028,6 +3045,12 @@ public abstract class World implements IBlockAccess {
         return this.worldData;
     }
 
+    // Unicorn start
+    public String getWorldName() {
+        return this.worldData.getName();
+    }
+    // Unicorn end
+
     public GameRules getGameRules() {
         return this.worldData.x();
     }
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 171be82cc4c039d0c45ffd3fde87cd4d2329dbb8..73152f1b85c44ad5479547f05846d888c3a3ed1b 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -54,7 +54,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
 
         int i1 = i / this.g;
         int j1 = j / this.g;
-        Random random = this.c.a(i1, j1, this.c.spigotConfig.largeFeatureSeed); // Spigot
+        Random random = this.c.a(i1, j1, this.c.spigotConfigUnicorn.seedFeature); // Spigot
 
         i1 *= this.g;
         j1 *= this.g;
diff --git a/src/main/java/net/minecraft/server/WorldGenVillage.java b/src/main/java/net/minecraft/server/WorldGenVillage.java
index 6648a70d26d6acde9febe1461747c52399a1081b..794f2a933d085fd5e8384c8239279ac11905f159 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillage.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillage.java
@@ -53,7 +53,7 @@ public class WorldGenVillage extends StructureGenerator {
 
         int i1 = i / this.g;
         int j1 = j / this.g;
-        Random random = this.c.a(i1, j1, this.c.spigotConfig.villageSeed); // Spigot
+        Random random = this.c.a(i1, j1, this.c.spigotConfigUnicorn.seedVillage); // Spigot
 
         i1 *= this.g;
         j1 *= this.g;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 87529552aa27fc89a542130a27a6b2bfdda44ccd..ec225dc6437c9695eae1238842289163b7c569ee 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,6 +13,7 @@ import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+import org.mythicprojects.unicornspigot.config.SpigotWorldConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -22,7 +23,6 @@ import java.util.logging.Level;
 
 import org.bukkit.WeatherType;
 import org.bukkit.block.BlockState;
-import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.HashTreeSet;
 
 import org.bukkit.event.block.BlockFormEvent;
@@ -62,10 +62,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit end
         this.server = minecraftserver;
         this.tracker = new EntityTracker(this);
-        this.manager = new PlayerChunkMap(this, spigotConfig.viewDistance); // Spigot
+        this.manager = new PlayerChunkMap(this, spigotConfigUnicorn.viewDistance); // Spigot
         this.worldProvider.a(this);
         this.chunkProvider = this.k();
-        this.Q = ((org.bukkit.craftbukkit.CraftTravelAgent) new org.bukkit.craftbukkit.CraftTravelAgent(this).setSearchRadius(paperSpigotConfig.portalSearchRadius)); // CraftBukkit // Paper - configurable search radius
+        this.Q = ((org.bukkit.craftbukkit.CraftTravelAgent) new org.bukkit.craftbukkit.CraftTravelAgent(this).setSearchRadius(paperConfigUnicorn.portalSearchRadius)); // CraftBukkit // Paper - configurable search radius
         this.B();
         this.C();
         this.getWorldBorder().a(minecraftserver.aI());
@@ -252,7 +252,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         timings.chunkTicks.startTiming(); // Spigot
         this.h();
         timings.chunkTicks.stopTiming(); // Spigot
-        spigotConfig.antiXrayInstance.flushUpdates(this); // PaperSpigot
+        this.antiXray.flushUpdates(this); // PaperSpigot
         this.methodProfiler.c("chunkMap");
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
@@ -423,7 +423,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int i1;
                 BlockPosition blockposition;
 
-                if (!this.paperSpigotConfig.disableThunder && this.random.nextInt(100000) == 0 && this.S() && this.R()) { // PaperSpigot - Disable thunder
+                if (!this.paperConfigUnicorn.disableThunder && this.random.nextInt(100000) == 0 && this.S() && this.R()) { // PaperSpigot - Disable thunder
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
                     blockposition = this.a(new BlockPosition(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
@@ -433,7 +433,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
 
                 this.methodProfiler.c("iceandsnow");
-                if (!this.paperSpigotConfig.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
+                if (!this.paperConfigUnicorn.disableIceAndSnow && this.random.nextInt(16) == 0) { // PaperSpigot - Disable ice and snow
                     this.m = this.m * 3 + 1013904223;
                     i1 = this.m >> 2;
                     blockposition = this.q(new BlockPosition(k + (i1 & 15), 0, l + (i1 >> 8 & 15)));
@@ -505,7 +505,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         }
         // Spigot Start
-        if ( spigotConfig.clearChunksOnTick )
+        if ( spigotConfigUnicorn.clearTickList )
         {
             chunkTickList.clear();
         }
@@ -598,7 +598,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         super.tickEntities();
-        spigotConfig.currentPrimedTnt = 0; // Spigot
+        spigotConfigUnicorn.currentPrimedTnt = 0; // Spigot
     }
 
     public void j() {
@@ -625,8 +625,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                     // CraftBukkit end
                 */
-                if (i > paperSpigotConfig.tickNextTickCap) {
-                    i = paperSpigotConfig.tickNextTickCap;
+                if (i > paperConfigUnicorn.tickNextTickListCap) {
+                    i = paperConfigUnicorn.tickNextTickListCap;
                 }
                 // PaperSpigot end
 
@@ -648,7 +648,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 timings.scheduledBlocksCleanup.stopTiming(); // Spigot
 
                 // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
-                if (paperSpigotConfig.tickNextTickListCapIgnoresRedstone) {
+                if (paperConfigUnicorn.tickNextTickListCapIgnoresRedstone) {
                     Iterator<NextTickListEntry> iterator = this.M.iterator();
                     while (iterator.hasNext()) {
                         NextTickListEntry next = iterator.next();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c3d9e8a9a75739a26e3d4478900cb09835fcb0b9..b682fe74e7b9e8dcdee8551bf71095bc9dc1182a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -102,6 +102,11 @@ import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.mythicprojects.unicornspigot.UnicornSpigot;
+import org.mythicprojects.unicornspigot.config.BukkitConfig;
+import org.mythicprojects.unicornspigot.config.PaperConfig;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
+import org.mythicprojects.unicornspigot.config.UnicornConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -140,13 +145,21 @@ public final class CraftServer implements Server {
     protected final MinecraftServer console;
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
-    private YamlConfiguration configuration;
+    @Deprecated private YamlConfiguration configuration; // Unicorn - deprecate
     private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
     private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().weakValues().makeMap(); // Unicorn - softValues -> weakValues
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
+    // Unicorn start
+    public final UnicornSpigot unicornSpigot;
+    // Unicorn - implement modern config system
+    public final UnicornConfig unicornConfig;
+    public final BukkitConfig bukkitConfig;
+    public final SpigotConfig spigotConfig;
+    public final PaperConfig paperConfig;
+    // Unicorn end
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
     private int waterAnimalSpawn = -1;
@@ -202,6 +215,16 @@ public final class CraftServer implements Server {
             getLogger().info("Console input is disabled due to --noconsole command argument");
         }
 
+        // Unicorn start
+        this.unicornSpigot = new UnicornSpigot(this.console);
+        this.unicornSpigot.init();
+
+        this.unicornConfig = this.unicornSpigot.getUnicornConfig();
+        this.bukkitConfig = this.unicornSpigot.getBukkitConfig();
+        this.spigotConfig = this.unicornSpigot.getSpigotConfig();
+        this.paperConfig = this.unicornSpigot.getPaperConfig();
+
+        /* // Unicorn - we don't need this anymore, we have our own config system
         configuration = YamlConfiguration.loadConfiguration(getConfigFile());
         configuration.options().copyDefaults(true);
         configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
@@ -213,12 +236,14 @@ public final class CraftServer implements Server {
         saveConfig();
         if (getCommandsConfigFile().isFile()) {
             legacyAlias = null;
-        }
+        }*/
+        this.configuration = this.unicornSpigot.getBukkitConfiguration();
         commandsConfiguration = YamlConfiguration.loadConfiguration(getCommandsConfigFile());
         commandsConfiguration.options().copyDefaults(true);
         commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/commands.yml"), Charsets.UTF_8)));
         saveCommandsConfig();
 
+        /* // Unicorn - we don't support migration from old config
         // Migrate aliases from old file and add previously implicit $1- to pass all arguments
         if (legacyAlias != null) {
             ConfigurationSection aliases = commandsConfiguration.createSection("aliases");
@@ -237,17 +262,18 @@ public final class CraftServer implements Server {
             }
         }
 
-        saveCommandsConfig();
+        saveCommandsConfig(); */
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        ((SimplePluginManager) pluginManager).useTimings(configuration.getBoolean("settings.plugin-profiling"));
-        monsterSpawn = configuration.getInt("spawn-limits.monsters");
-        animalSpawn = configuration.getInt("spawn-limits.animals");
-        waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
-        ambientSpawn = configuration.getInt("spawn-limits.ambient");
-        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
-        warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
-        chunkGCPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        chunkGCLoadThresh = configuration.getInt("chunk-gc.load-threshold");
+        ((SimplePluginManager) pluginManager).useTimings(this.bukkitConfig.settings.pluginProfiling);
+        monsterSpawn = this.bukkitConfig.spawnLimits.monsters;
+        animalSpawn = this.bukkitConfig.spawnLimits.animals;
+        waterAnimalSpawn = this.bukkitConfig.spawnLimits.waterAnimals;
+        ambientSpawn = this.bukkitConfig.spawnLimits.ambient;
+        console.autosavePeriod = this.bukkitConfig.ticksPer.autosave;
+        warningState = this.bukkitConfig.settings.deprecatedVerbose;
+        chunkGCPeriod = this.bukkitConfig.chunkGC.periodInTicks;
+        chunkGCLoadThresh = this.bukkitConfig.chunkGC.loadThreshold;
+        // Unicorn end
         loadIcon();
 
         // Spigot Start - Moved to old location of new DedicatedPlayerList in DedicatedServer
@@ -269,11 +295,14 @@ public final class CraftServer implements Server {
     }
 
     private void saveConfig() {
-        try {
+        // Unicorn start - Implement modern config system
+        /*try {
             configuration.save(getConfigFile());
         } catch (IOException ex) {
             Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + getConfigFile(), ex);
-        }
+        }*/
+        this.bukkitConfig.save();
+        // Unicorn end
     }
 
     private void saveCommandsConfig() {
@@ -343,7 +372,7 @@ public final class CraftServer implements Server {
         for (ICommand cmd : commands.values()) {
             // Spigot start
             VanillaCommandWrapper wrapper = new VanillaCommandWrapper((CommandAbstract) cmd, LocaleI18n.get(cmd.getUsage(null)));
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
+            if (this.spigotConfig.commands.replaceCommands.contains( wrapper.getName() ) ) { // Unicorn
                 if (first) {
                     commandMap.register("minecraft", wrapper);
                 }
@@ -523,7 +552,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean getAllowEnd() {
-        return this.configuration.getBoolean("settings.allow-end");
+        return this.bukkitConfig.settings.allowEnd; // Unicorn
     }
 
     @Override
@@ -532,11 +561,11 @@ public final class CraftServer implements Server {
     }
 
     public boolean getWarnOnOverload() {
-        return this.configuration.getBoolean("settings.warn-on-overload");
+        return this.bukkitConfig.settings.warnOnOverload; // Unicorn
     }
 
     public boolean getQueryPlugins() {
-        return this.configuration.getBoolean("settings.query-plugins");
+        return this.bukkitConfig.settings.queryPlugins; // Unicorn
     }
 
     @Override
@@ -561,33 +590,33 @@ public final class CraftServer implements Server {
 
     @Override
     public String getUpdateFolder() {
-        return this.configuration.getString("settings.update-folder", "update");
+        return this.bukkitConfig.settings.updateFolder; // Unicorn
     }
 
     @Override
     public File getUpdateFolderFile() {
-        return new File((File) console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
+        return new File((File) console.options.valueOf("plugins"), this.getUpdateFolder()); // Unicorn
     }
 
     @Override
     public long getConnectionThrottle() {
         // Spigot Start - Automatically set connection throttle for bungee configurations
-        if (org.spigotmc.SpigotConfig.bungee) {
+        if (this.spigotConfig.settings.bungeecord) { // Unicorn
             return -1;
         } else {
-            return this.configuration.getInt("settings.connection-throttle");
+            return this.bukkitConfig.settings.connectionThrottle; // Unicorn
         }
         // Spigot End
     }
 
     @Override
     public int getTicksPerAnimalSpawns() {
-        return this.configuration.getInt("ticks-per.animal-spawns");
+        return this.bukkitConfig.ticksPer.animalSpawns; // Unicorn
     }
 
     @Override
     public int getTicksPerMonsterSpawns() {
-        return this.configuration.getInt("ticks-per.monster-spawns");
+        return this.bukkitConfig.ticksPer.monsterSpawn; // Unicorn
     }
 
     @Override
@@ -667,7 +696,11 @@ public final class CraftServer implements Server {
             return true;
         }
 
-        sender.sendMessage(org.spigotmc.SpigotConfig.unknownCommandMessage);
+        // Unicorn start
+        int spaceIndex = commandLine.indexOf(' ');
+        String commandSubstring = commandLine.substring(0, spaceIndex != -1 ? spaceIndex : commandLine.length());
+        sender.sendMessage(java.text.MessageFormat.format(this.spigotConfig.messages.unknownCommand, commandSubstring));
+        // Unicorn end
 
         return false;
     }
@@ -675,7 +708,8 @@ public final class CraftServer implements Server {
     @Override
     public void reload() {
         reloadCount++;
-        configuration = YamlConfiguration.loadConfiguration(getConfigFile());
+        this.unicornSpigot.reloadConfigs(); // Unicorn
+        this.configuration = this.unicornSpigot.getBukkitConfiguration(); // Unicorn
         commandsConfiguration = YamlConfiguration.loadConfiguration(getCommandsConfigFile());
         PropertyManager config = new PropertyManager(console.options);
 
@@ -690,15 +724,17 @@ public final class CraftServer implements Server {
         console.setPVP(config.getBoolean("pvp", console.getPVP()));
         console.setAllowFlight(config.getBoolean("allow-flight", console.getAllowFlight()));
         console.setMotd(config.getString("motd", console.getMotd()));
-        monsterSpawn = configuration.getInt("spawn-limits.monsters");
-        animalSpawn = configuration.getInt("spawn-limits.animals");
-        waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
-        ambientSpawn = configuration.getInt("spawn-limits.ambient");
-        warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
+        // Unicorn start - implement modern config system
+        monsterSpawn = this.bukkitConfig.spawnLimits.monsters;
+        animalSpawn = this.bukkitConfig.spawnLimits.animals;
+        waterAnimalSpawn = this.bukkitConfig.spawnLimits.waterAnimals;
+        ambientSpawn = this.bukkitConfig.spawnLimits.ambient;
+        warningState = this.bukkitConfig.settings.deprecatedVerbose;
         printSaveWarning = false;
-        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
-        chunkGCPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        chunkGCLoadThresh = configuration.getInt("chunk-gc.load-threshold");
+        console.autosavePeriod = this.bukkitConfig.ticksPer.autosave;
+        chunkGCPeriod = this.bukkitConfig.chunkGC.periodInTicks;
+        chunkGCLoadThresh = this.bukkitConfig.chunkGC.loadThreshold;
+        // Unicorn end
         loadIcon();
 
         try {
@@ -712,8 +748,10 @@ public final class CraftServer implements Server {
             logger.log(Level.WARNING, "Failed to load banned-players.json, " + ex.getMessage());
         }
 
-        org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
-        org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
+        // Unicorn start - implement modern config system
+        /*org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
+        org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot*/
+        // Unicorn end
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -728,15 +766,19 @@ public final class CraftServer implements Server {
             } else {
                 world.ticksPerMonsterSpawns = this.getTicksPerMonsterSpawns();
             }
-            world.spigotConfig.init(); // Spigot
-            world.paperSpigotConfig.init(); // PaperSpigot
+            // Unicorn start - implement modern config system
+            /*world.spigotConfig.init(); // Spigot
+            world.paperSpigotConfig.init();*/ // PaperSpigot
+            // Unicorn end
         }
 
         pluginManager.clearPlugins();
         commandMap.clearCommands();
         resetRecipes();
-        org.spigotmc.SpigotConfig.registerCommands(); // Spigot
-        org.github.paperspigot.PaperSpigotConfig.registerCommands(); // PaperSpigot
+        // Unicorn start
+        //org.spigotmc.SpigotConfig.registerCommands(); // Spigot
+        //org.github.paperspigot.PaperSpigotConfig.registerCommands(); // PaperSpigot
+        // Unicorn end
 
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
 
@@ -783,7 +825,7 @@ public final class CraftServer implements Server {
 
     @SuppressWarnings({ "unchecked", "finally" })
     private void loadCustomPermissions() {
-        File file = new File(configuration.getString("settings.permissions-file"));
+        File file = new File(this.bukkitConfig.settings.permissionsFile); // Unicorn
         FileInputStream stream;
 
         try {
@@ -1093,12 +1135,16 @@ public final class CraftServer implements Server {
     public void configureDbConfig(ServerConfig config) {
         Validate.notNull(config, "Config cannot be null");
 
+        // Unicorn start - implement modern config system
+        BukkitConfig.Database dbConfig = this.bukkitConfig.database;
+
         DataSourceConfig ds = new DataSourceConfig();
-        ds.setDriver(configuration.getString("database.driver"));
-        ds.setUrl(configuration.getString("database.url"));
-        ds.setUsername(configuration.getString("database.username"));
-        ds.setPassword(configuration.getString("database.password"));
-        ds.setIsolationLevel(TransactionIsolation.getLevel(configuration.getString("database.isolation")));
+        ds.setDriver(dbConfig.driver);
+        ds.setUrl(dbConfig.url);
+        ds.setUsername(dbConfig.username);
+        ds.setPassword(dbConfig.password);
+        ds.setIsolationLevel(TransactionIsolation.getLevel(dbConfig.isolation));
+        // Unicorn end
 
         if (ds.getDriver().contains("sqlite")) {
             config.setDatabasePlatform(new SQLitePlatform());
@@ -1190,17 +1236,20 @@ public final class CraftServer implements Server {
     }
 
     public void removeBukkitSpawnRadius() {
-        configuration.set("settings.spawn-radius", null);
-        saveConfig();
+        // Unicorn start - implement modern config system
+        /*configuration.set("settings.spawn-radius", null);
+        saveConfig();*/
+        throw new UnsupportedOperationException("Not supported");
+        // Unicorn end
     }
 
     public int getBukkitSpawnRadius() {
-        return configuration.getInt("settings.spawn-radius", -1);
+        return -1; // Unicorn
     }
 
     @Override
     public String getShutdownMessage() {
-        return configuration.getString("settings.shutdown-message");
+        return this.bukkitConfig.settings.shutdownMessage;
     }
 
     @Override
@@ -1210,8 +1259,11 @@ public final class CraftServer implements Server {
 
     @Override
     public void setSpawnRadius(int value) {
-        configuration.set("settings.spawn-radius", value);
-        saveConfig();
+        // Unicorn start - implement modern config system
+        PropertyManager propertyManager = ((DedicatedServer) console).propertyManager;
+        propertyManager.setProperty("spawn-protection", value);
+        propertyManager.savePropertiesFile();
+        // Unicorn end
     }
 
     @Override
@@ -1231,18 +1283,25 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean useExactLoginLocation() {
-        return configuration.getBoolean("settings.use-exact-login-location");
+        return this.bukkitConfig.settings.useExactLoginLocation;
     }
 
     public ChunkGenerator getGenerator(String world) {
-        ConfigurationSection section = configuration.getConfigurationSection("worlds");
+        // Unicorn start - implement modern config system
+        //ConfigurationSection section = configuration.getConfigurationSection("worlds");
         ChunkGenerator result = null;
+        BukkitConfig.WorldConfig worldConfig = this.bukkitConfig.worlds.get(world);
+        String name = null;
+        if (worldConfig != null) {
+            name = worldConfig.getGenerator();
+        }
 
-        if (section != null) {
+
+        /*if (section != null) {
             section = section.getConfigurationSection(world);
 
             if (section != null) {
-                String name = section.getString("generator");
+                String name = section.getString("generator");*/
 
                 if ((name != null) && (!name.equals(""))) {
                     String[] split = name.split(":", 2);
@@ -1264,8 +1323,9 @@ public final class CraftServer implements Server {
                         }
                     }
                 }
-            }
-        }
+        /*    }
+        }*/
+        // Unicorn end
 
         return result;
     }
@@ -1338,7 +1398,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee )
+            if ( MinecraftServer.getServer().getOnlineMode() || this.spigotConfig.settings.bungeecord ) // Unicorn
             {
                 profile = MinecraftServer.getServer().getUserCache().getProfile( name );
             }
@@ -1496,7 +1556,7 @@ public final class CraftServer implements Server {
         }
 
         if (container == null) {
-            container = new File(configuration.getString("settings.world-container", "."));
+            container = new File(this.bukkitConfig.settings.worldContainer); // Unicorn
         }
 
         return container;
@@ -1646,7 +1706,7 @@ public final class CraftServer implements Server {
      */
     public List<String> tabCompleteCommand(Player player, String message, BlockPosition blockPosition) {
         // Spigot Start
-        if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
+        if ( (this.spigotConfig.commands.tabComplete < 0 || message.length() <= this.spigotConfig.commands.tabComplete) && !message.contains( " " ) ) // Unicorn
         {
             return ImmutableList.of();
         }
@@ -1656,7 +1716,7 @@ public final class CraftServer implements Server {
         try {
             // send location info if present
             // completions = getCommandMap().tabComplete(player, message.substring(1));
-            if (blockPosition == null || !((CraftWorld) player.getWorld()).getHandle().paperSpigotConfig.allowBlockLocationTabCompletion) {
+            if (blockPosition == null || !((CraftWorld) player.getWorld()).getHandle().paperConfigUnicorn.allowBlockLocationTabCompletion) { // Unicorn
                 completions = getCommandMap().tabComplete(player, message.substring(1));
             } else {
                 completions = getCommandMap().tabComplete(player, message.substring(1), new Location(player.getWorld(), blockPosition.getX(), blockPosition.getY(), blockPosition.getZ()));
@@ -1797,14 +1857,21 @@ public final class CraftServer implements Server {
         @Override
         public YamlConfiguration getSpigotConfig()
         {
-            return org.spigotmc.SpigotConfig.config;
+            return unicornSpigot.getSpigotConfiguration(); // Unicorn
         }
 
         @Override
         public YamlConfiguration getPaperSpigotConfig()
         {
-            return org.github.paperspigot.PaperSpigotConfig.config;
+            return unicornSpigot.getPaperConfiguration(); // Unicorn
+        }
+
+        // Unicorn start
+        @Override
+        public YamlConfiguration getUnicornConfig() {
+            return unicornSpigot.getUnicornConfiguration();
         }
+        // Unicorn end
 
         @Override
         public void restart() {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index c936219196ea403a9d247ad6c8c0ffee79411da2..abea57b01ebf3132ac8d6dd64d859244a2d9d741 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -130,6 +130,14 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
                 // PaperSpigot End
+
+                // Unicorn start
+                acceptsAll(asList("unicorn", "unicorn-settings"), "File for unicorn settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("unicorn.yml"))
+                        .describedAs("Yml file");
+                // Unicorn end
             }
         };
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 4f9179908e2cd74d6170a614a0971ef0f9ddaafa..2d2ce4f6c7bcec68c57af859e106c6f96ba5ca5e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -9,6 +9,7 @@ import java.util.UUID;
 
 import net.minecraft.server.*;
 
+import org.mythicprojects.unicornspigot.config.PaperConfig;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
 import org.bukkit.Server;
@@ -25,7 +26,7 @@ import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.permissions.ServerOperator;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.Vector;
-import org.github.paperspigot.PaperSpigotConfig;
+//import org.github.paperspigot.PaperSpigotConfig; // Unicorn
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static final PermissibleBase perm = new PermissibleBase(new ServerOperator() {
@@ -207,7 +208,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     public void setVelocity(Vector vel) {
         // Paper start - warn server owners when plugins try to set super high velocities
-        if (PaperSpigotConfig.warnForExcessiveVelocity) {
+        if (PaperConfig.get().warnWhenSettingExcessiveVelocity) {
             if(vel.getX() > 4 || vel.getX() < -4 || vel.getY() > 4 || vel.getY() < -4 || vel.getZ() > 4 || vel.getZ() < -4) {
                 getServer().getLogger().warning("Excessive velocity set detected: tried to set velocity of entity #"+getEntityId()+" to ("+vel.getX()+","+vel.getY()+","+vel.getZ()+").");
                 Thread.dumpStack();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d44fc62b9d9454dad79514731efac024be35aa76..e96e16315360413336326c68399646e6269496c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -565,7 +565,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (fromWorld == toWorld) {
             entity.playerConnection.teleport(to);
         } else {
-            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, !toWorld.paperSpigotConfig.disableTeleportationSuffocationCheck);
+            server.getHandle().moveToWorld(entity, toWorld.dimension, true, to, !toWorld.paperConfigUnicorn.disableTeleportationSuffocationCheck);
         }
         return true;
     }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 8168f69c4499fcb761e0856fbe20175ccebe9778..27c395e9a3109734ed033666f3fda76ada49fb4c 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -20,6 +20,7 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+@Deprecated // Unicorn
 public class PaperSpigotConfig
 {
 
@@ -218,4 +219,4 @@ public class PaperSpigotConfig
     {
         warnForExcessiveVelocity = getBoolean("warnWhenSettingExcessiveVelocity", true);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index 67e56df017b98222e64fc46e97a2b104e6f0d69f..172468f5756b116a1ba35f6f92edcb9eed44a15b 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -4,6 +4,7 @@ import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+@Deprecated // Unicorn
 public class PaperSpigotWorldConfig
 {
 
@@ -15,7 +16,7 @@ public class PaperSpigotWorldConfig
     {
         this.worldName = worldName;
         this.config = PaperSpigotConfig.config;
-        init();
+        //init(); // Unicorn
     }
 
     public void init()
diff --git a/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java b/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java
new file mode 100644
index 0000000000000000000000000000000000000000..5bace430488a53f545713566bc5d661b8f03b4f2
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/UnicornSpigot.java
@@ -0,0 +1,142 @@
+package org.mythicprojects.unicornspigot;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.World;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.BukkitConfig;
+import org.mythicprojects.unicornspigot.config.ConfigurationFactory;
+import org.mythicprojects.unicornspigot.config.PaperConfig;
+import org.mythicprojects.unicornspigot.config.SpigotConfig;
+import org.mythicprojects.unicornspigot.config.UnicornConfig;
+import org.mythicprojects.unicornspigot.config.serdes.WarningStateTransformer;
+import org.mythicprojects.unicornspigot.util.Pair;
+import org.spigotmc.RestartCommand;
+import org.spigotmc.TicksPerSecondCommand;
+
+public class UnicornSpigot {
+
+    private static UnicornSpigot INSTANCE;
+
+    private final MinecraftServer server;
+
+    private final YamlConfiguration unicornConfiguration = new YamlConfiguration();
+    private final YamlConfiguration bukkitConfiguration = new YamlConfiguration();
+    private final YamlConfiguration spigotConfiguration = new YamlConfiguration();
+    private final YamlConfiguration paperConfiguration = new YamlConfiguration();
+    private UnicornConfig unicornConfig;
+    private BukkitConfig bukkitConfig;
+    private SpigotConfig spigotConfig;
+    private PaperConfig paperConfig;
+    private boolean isReload = false;
+
+    private final Map<String, Pair<String, Command>> commands = new HashMap<>();
+
+    public UnicornSpigot(@NotNull MinecraftServer server) {
+        INSTANCE = this;
+
+        this.server = server;
+    }
+
+    public void init() {
+        // Configs
+        ConfigurationFactory configurationFactory = new ConfigurationFactory(this.server);
+        this.unicornConfig = configurationFactory.createServerConfig(UnicornConfig.class, this.unicornConfiguration, "unicorn-settings", it -> {
+            it.withSerdesPack(registry -> registry.register(new WarningStateTransformer()));
+        });
+        this.bukkitConfig = configurationFactory.createServerConfig(BukkitConfig.class, this.bukkitConfiguration, "bukkit-settings");
+        this.spigotConfig = configurationFactory.createServerConfig(SpigotConfig.class, this.spigotConfiguration, "spigot-settings");
+        this.paperConfig = configurationFactory.createServerConfig(PaperConfig.class, this.paperConfiguration, "paper-settings");
+        this.remapConfigs();
+
+        // Commands
+        this.registerCommand("restart", "Spigot", new RestartCommand("restart"));
+        this.registerCommand("tps", "Spigot", new TicksPerSecondCommand("tps"));
+    }
+
+    public @NotNull YamlConfiguration getUnicornConfiguration() {
+        return this.unicornConfiguration;
+    }
+
+    public @NotNull UnicornConfig getUnicornConfig() {
+        return Objects.requireNonNull(this.unicornConfig, "UnicornConfig not initialized");
+    }
+
+    public @NotNull YamlConfiguration getBukkitConfiguration() {
+        return this.bukkitConfiguration;
+    }
+
+    public @NotNull BukkitConfig getBukkitConfig() {
+        return Objects.requireNonNull(this.bukkitConfig, "BukkitConfig not initialized");
+    }
+
+    public @NotNull YamlConfiguration getSpigotConfiguration() {
+        return this.spigotConfiguration;
+    }
+
+    public @NotNull SpigotConfig getSpigotConfig() {
+        return Objects.requireNonNull(this.spigotConfig, "SpigotConfig not initialized");
+    }
+
+    public @NotNull YamlConfiguration getPaperConfiguration() {
+        return this.paperConfiguration;
+    }
+
+    public @NotNull PaperConfig getPaperConfig() {
+        return Objects.requireNonNull(this.paperConfig, "PaperConfig not initialized");
+    }
+
+    public void reloadConfigs() {
+        this.isReload = true;
+
+        this.unicornConfig.load();
+        this.bukkitConfig.load();
+        this.spigotConfig.load();
+        this.paperConfig.load();
+
+        this.server.worlds.forEach(server -> {
+            server.antiXray = this.spigotConfig.getWorldConfig(server.getWorld().getName()).getAntiXray();
+        });
+
+        this.remapConfigs();
+
+        this.isReload = false;
+    }
+
+    public void remapConfigs() {
+        this.unicornConfig.remap();
+        this.spigotConfig.remap();
+        this.paperConfig.remap();
+        this.server.worlds.forEach(this::remapConfigs);
+    }
+
+    public void remapConfigs(@NotNull World world) {
+        String worldName = world.getWorldName();
+        this.unicornConfig.getWorldConfig(worldName).remap(world.unicornConfig);
+        this.spigotConfig.getWorldConfig(worldName).remap(world.spigotConfig);
+        this.paperConfig.getWorldConfig(worldName).remap(world.paperSpigotConfig);
+    }
+
+    public void registerCommand(@NotNull String name, @NotNull String fallbackPrefix, @NotNull Command command) {
+        this.commands.put(name, Pair.of(fallbackPrefix, command));
+    }
+
+    public void registerCommand(@NotNull String name, @NotNull Command command) {
+        this.registerCommand(name, "Unicorn", command);
+    }
+
+    public void registerCommandsInServer() {
+        this.commands.forEach((key, command) -> this.server.server
+                .getCommandMap()
+                .register(key, command.getLeft(), command.getRight()));
+    }
+
+    public static @NotNull UnicornSpigot get() {
+        return Objects.requireNonNull(INSTANCE, "UnicornSpigot not initialized");
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/BukkitConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/BukkitConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..93a98a1f8b2529bc15e03b955345326a423300d0
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/BukkitConfig.java
@@ -0,0 +1,135 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.Header;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.bukkit.Warning;
+
+@Header("This is the main configuration file for Bukkit.")
+@Header("As you can see, there's actually not that much to configure without any plugins.")
+@Header("For a reference for any variable inside this file, check out the Bukkit Wiki at")
+@Header("https://bukkit.fandom.com/wiki/Bukkit.yml")
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class BukkitConfig extends UnicornConfigSection {
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends UnicornConfigSection {
+
+        @Comment("Whether the end world is loaded.")
+        public boolean allowEnd = true;
+
+        @Comment("Should a warning message be sent to console when the server is lagging or behind.")
+        public boolean warnOnOverload = true;
+
+        @Comment("On restart, plugins in this folder will be moved and updated.")
+        public String updateFolder = "update";
+
+        @Comment("TBH I don't know what is it, but maybe here it is explained better https://bukkit.fandom.com/wiki/Permissions.yml.")
+        public String permissionsFile = "permissions.yml";
+
+        @Comment("Enable the /timings command to track the execution time of events by plugins.")
+        public boolean pluginProfiling = false;
+
+        @Comment("Delay in milliseconds for a client to reconnect.")
+        @Comment("Disabled if less than or equal to 0.")
+        public int connectionThrottle = 4000;
+
+        @Comment("Whether to publish the plugin list in pings.")
+        public boolean queryPlugins = false;
+
+        @Comment("Should a warning message be sent to console when a deprecated event is used by a plugin.")
+        public Warning.WarningState deprecatedVerbose = Warning.WarningState.DEFAULT;
+
+        @Comment("Message sent to clients before shutdown.")
+        public String shutdownMessage = "Server closed!";
+
+        @Comment("Whether to not check if the login location is safe.")
+        public boolean useExactLoginLocation = false;
+
+        @Comment("Directory for where world files are stored.")
+        public String worldContainer = ".";
+
+    }
+
+    public ChunkGC chunkGC = new ChunkGC();
+
+    public static class ChunkGC extends UnicornConfigSection {
+
+        @Comment("Ticks between each chunk garbage collection event.")
+        @Comment("Disabled if set to 0.")
+        public int periodInTicks = 600;
+
+        @Comment("Number of chunks that must have been loaded since the last chunk garbage collection event before another event is queued.")
+        @Comment("Disabled if set to 0.")
+        public int loadThreshold = 0;
+
+    }
+
+    public SpawnLimits spawnLimits = new SpawnLimits();
+
+    public static class SpawnLimits extends UnicornConfigSection {
+
+        @Comment("Maximum number of naturally spawned monsters per-world.")
+        public int monsters = 80;
+        @Comment("Maximum number of naturally spawned animals per-world.")
+        public int animals = 15;
+        @Comment("Maximum number of naturally spawned water animals per-world.")
+        public int waterAnimals = 5;
+        @Comment("Maximum number of naturally spawned ambient entities per-world")
+        public int ambient = 15;
+
+    }
+
+    public TicksPer ticksPer = new TicksPer();
+
+    public static class TicksPer extends UnicornConfigSection {
+
+        @Comment("Number of ticks before considering a natural animal spawn event.")
+        @Comment("Below 0 will reset to server default.")
+        public int animalSpawns = 400;
+
+        @Comment("Number of ticks before considering a natural monster spawn event.")
+        @Comment("Below 0 will reset to server default.")
+        public int monsterSpawn = 1;
+
+        @Comment("Number of ticks before all worlds are auto-saved.")
+        @Comment("Below 0 will reset to server default, so set to a high value if you want to disable.")
+        public int autosave = 6000;
+
+    }
+
+    public Database database = new Database();
+
+    public static class Database extends UnicornConfigSection {
+
+        public String username = "bukkit";
+        public String isolation = "SERIALIZABLE";
+        public String driver = "org.sqlite.JDBC";
+        public String password = "walrus";
+        public String url = "jdbc:sqlite:{DIR}{NAME}.db";
+
+    }
+
+    @Comment("Worlds generators settings (see https://bukkit.fandom.com/wiki/Bukkit.yml#*OPTIONAL*_worlds).")
+    public Map<String, WorldConfig> worlds = new LinkedHashMap<>();
+
+    public static class WorldConfig extends UnicornConfigSection {
+
+        private String generator;
+
+        public WorldConfig(String generator) {
+            this.generator = generator;
+        }
+
+        public String getGenerator() {
+            return this.generator;
+        }
+
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/ConfigurationFactory.java b/src/main/java/org/mythicprojects/unicornspigot/config/ConfigurationFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..745568b60eafd509ccaba585618982348c360977
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/ConfigurationFactory.java
@@ -0,0 +1,52 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.ConfigManager;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.serdes.commons.SerdesCommons;
+import eu.okaeri.configs.validator.okaeri.OkaeriValidator;
+import eu.okaeri.configs.yaml.bukkit.YamlBukkitConfigurer;
+import java.io.File;
+import java.util.function.Consumer;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.serdes.DecolorTransformer;
+
+public class ConfigurationFactory {
+
+    private final MinecraftServer server;
+
+    public ConfigurationFactory(@NotNull MinecraftServer server) {
+        this.server = server;
+    }
+
+    public  <T extends OkaeriConfig> @NotNull T createServerConfig(
+            @NotNull Class<T> configClass,
+            @NotNull YamlConfiguration configuration,
+            @NotNull String fileOptions,
+            @NotNull Consumer<T> create
+    ) {
+        return ConfigManager.create(configClass, it -> {
+            it.withConfigurer(new OkaeriValidator(new YamlBukkitConfigurer(configuration), true), new SerdesCommons());
+            it.withSerdesPack(registry -> {
+                registry.register(new DecolorTransformer());
+            });
+            it.withBindFile((File) this.server.options.valueOf(fileOptions));
+            it.withLogger(Bukkit.getLogger());
+            it.saveDefaults();
+            it.load(true);
+            create.accept((T) it);
+        });
+    }
+
+    public  <T extends OkaeriConfig> @NotNull T createServerConfig(
+            @NotNull Class<T> configClass,
+            @NotNull YamlConfiguration configuration,
+            @NotNull String fileOptions
+    ) {
+        return this.createServerConfig(configClass, configuration, fileOptions, it -> {
+        });
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/EngineConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/EngineConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..27e49e2d526c372e56a8abf4327065acc958e58b
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/EngineConfig.java
@@ -0,0 +1,43 @@
+package org.mythicprojects.unicornspigot.config;
+
+import java.util.Map;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.legacy.LegacyRemapper;
+
+public abstract class EngineConfig<W extends EngineConfig.WorldConfig> extends UnicornConfigSection {
+
+    public abstract @NotNull Map<String, W> getWorldConfigs();
+
+    public @NotNull W getWorldConfig(@NotNull String worldName) {
+        Map<String, W> worldSettings = this.getWorldConfigs();
+        W worldConfig = worldSettings.get(worldName);
+        if (worldConfig != null) {
+            return worldConfig;
+        }
+        return worldSettings.computeIfAbsent("default", (key) -> this.createDefaultWorldConfig());
+    }
+
+    protected abstract @NotNull W createDefaultWorldConfig();
+
+    @Override
+    public void loadProperties() {
+        this.getWorldConfig("default");
+    }
+
+    public void remap() {
+        LegacyRemapper.map(this, null);
+    }
+
+    public static abstract class WorldConfig extends UnicornConfigSection {
+
+        public void remap(@NotNull Object target) {
+            LegacyRemapper.map(this, target);
+        }
+
+        protected static void log(String log) {
+            UnicornConfig.log(log);
+        }
+
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/PaperConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/PaperConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..221890b9f99d2b5c846dc9ce633239edddc7a06d
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/PaperConfig.java
@@ -0,0 +1,146 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.Header;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import eu.okaeri.configs.exception.OkaeriException;
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import net.minecraft.server.Items;
+import org.bukkit.Material;
+import org.github.paperspigot.PaperSpigotConfig;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.legacy.Remap;
+import org.mythicprojects.unicornspigot.config.legacy.RemapTarget;
+
+@Header("This is the main configuration file for PaperSpigot.")
+@Header("As you can see, there's tons to configure. Some options may impact gameplay, so use")
+@Header("with caution, and make sure you know what each option does before configuring.")
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+@RemapTarget(target = PaperSpigotConfig.class)
+public class PaperConfig extends EngineConfig<PaperWorldConfig> {
+
+    // For tests to work properly
+    @Exclude
+    private static final PaperConfig DEFAULT_INSTANCE = new PaperConfig();
+    @Exclude
+    private static PaperConfig INSTANCE;
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends UnicornConfigSection {
+
+        @Comment("Whether interaction packets should be limited from clients.")
+        @Remap("interactLimitEnabled")
+        public boolean limitPlayerInteractions = true;
+
+        @Comment("Speed at which baby zombies can move.")
+        @Remap("babyZombieMovementSpeed")
+        public double babyZombieMovementSpeed = 0.5;
+
+        @Override
+        public void loadProperties() {
+            if (!this.limitPlayerInteractions) {
+                UnicornConfig.log("Disabling player interaction limiter, your server may be more vulnerable to malicious users");
+            }
+        }
+
+    }
+
+    @Comment("Percentage improvement to player damage with certain potions.")
+    public EffectModifiers effectModifiers = new EffectModifiers();
+
+    public static class EffectModifiers extends UnicornConfigSection {
+
+        @Remap("strengthEffectModifier")
+        public double strength = 1.3;
+
+        @Remap("weaknessEffectModifier")
+        public double weakness = -0.3;
+
+    }
+
+    @Comment("Whether to allow certain buckets to stack as items.")
+    public StackableBuckets stackableBuckets = new StackableBuckets();
+
+    public static class StackableBuckets extends UnicornConfigSection {
+
+        @Remap("stackableLavaBuckets")
+        public boolean lava = false;
+
+        @Remap("stackableWaterBuckets")
+        public boolean water = false;
+
+        @Remap("stackableMilkBuckets")
+        public boolean milk = false;
+
+        @Override
+        public void loadProperties() {
+            try {
+                Field maxStack = Material.class.getDeclaredField("maxStack");
+                maxStack.setAccessible(true);
+
+                if (this.lava) {
+                    maxStack.set(Material.LAVA_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.LAVA_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+
+                if (this.water) {
+                    maxStack.set(Material.WATER_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.WATER_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+
+                if (this.milk) {
+                    maxStack.set(Material.MILK_BUCKET, Material.BUCKET.getMaxStackSize());
+                    Items.MILK_BUCKET.c(Material.BUCKET.getMaxStackSize());
+                }
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+
+    }
+
+    @Comment("Send a warning to console when players are moving at excessive speeds.")
+    @Remap("warnForExcessiveVelocity")
+    @CustomKey("warnWhenSettingExcessiveVelocity")
+    public boolean warnWhenSettingExcessiveVelocity = true;
+
+    @Comment("List of items that are allowed to keep invalid data values.")
+    @Remap("dataValueAllowedItems")
+    public Set<Integer> dataValueAllowedItems = new HashSet<>();
+
+    @Comment("Per world settings.")
+    public Map<String, PaperWorldConfig> worldSettings = new HashMap<>();
+
+    @Override
+    public @NotNull Map<String, PaperWorldConfig> getWorldConfigs() {
+        return this.worldSettings;
+    }
+
+    @Override
+    protected @NotNull PaperWorldConfig createDefaultWorldConfig() {
+        return new PaperWorldConfig();
+    }
+
+    @Override
+    public OkaeriConfig load() throws OkaeriException {
+        super.load();
+        INSTANCE = this;
+        return this;
+    }
+
+    public static @NotNull PaperConfig get() {
+        return (INSTANCE == null) ? DEFAULT_INSTANCE : INSTANCE;
+    }
+
+}
+
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/PaperWorldConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/PaperWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..c68c8e67650183c025913199d121c1431e6d3b29
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/PaperWorldConfig.java
@@ -0,0 +1,326 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import org.mythicprojects.unicornspigot.config.legacy.Remap;
+import org.mythicprojects.unicornspigot.config.legacy.RemapTarget;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+@RemapTarget(target = org.github.paperspigot.PaperSpigotWorldConfig.class)
+public class PaperWorldConfig extends EngineConfig.WorldConfig {
+
+    @Comment("Whether to revert tnt cannon logic to 1.7.")
+    @Remap("fixCannons")
+    public boolean fixCannons = false;
+
+    @Comment("Percent of damage to receive while blocking.")
+    @Remap("playerBlockingDamageMultiplier")
+    public float playerBlockingDamageMultiplier = 0.5F;
+
+    @Comment("Whether to delete invalid mob spawner items.")
+    @Remap("removeInvalidMobSpawnerTEs")
+    public boolean removeInvalidMobSpawnerTileEntities = true;
+
+    @Comment("Whether to remove dead entities in the explosion radius.")
+    @Remap("optimizeExplosions")
+    public boolean optimizeExplosions = false;
+
+    @Comment("Number of ticks to check for mob spawner locations.")
+    @Remap("mobSpawnerTickRate")
+    public int mobSpawnerTickRate = 1;
+
+    @Comment("Whether to cache chunks when sending packets.")
+    @Remap("cacheChunkMaps")
+    public boolean cacheChunkMaps = false;
+
+    @Comment("Magic number for how loud tnt explosions should be.")
+    @Remap("tntExplosionVolume")
+    public float tntExplosionVolume = 4.0F;
+
+    @Comment("Whether to disable the suffocation check before every teleportation event.")
+    @Remap("disableTeleportationSuffocationCheck")
+    public boolean disableTeleportationSuffocationCheck = false;
+
+    @Comment("Y-level at which squids will spawn.")
+    public SquidSpawnHeight squidSpawnHeight = new SquidSpawnHeight();
+
+    public static class SquidSpawnHeight extends UnicornConfigSection {
+
+        @Remap("squidMinSpawnHeight")
+        public double minimum = 45.0;
+
+        @Remap("squidMaxSpawnHeight")
+        public double maximum = 63.0;
+
+    }
+
+    @Comment("Maximum number of blocks certain plants will grow.")
+    public MaxGrowthHeight maxGrowthHeight = new MaxGrowthHeight();
+
+    public static class MaxGrowthHeight extends UnicornConfigSection {
+
+        @Remap("cactusMaxHeight")
+        public int cactus = 3;
+
+        @Remap("reedMaxHeight")
+        public int reeds = 3;
+
+    }
+
+    @Comment("Number of ticks before a fish can be caught.")
+    public FishingTimeRange fishingTimeRange = new FishingTimeRange();
+
+    public static class FishingTimeRange extends UnicornConfigSection {
+
+        @CustomKey("fishingMinTicks")
+        public int minimumTicks = 100;
+
+        @CustomKey("fishingMaxTicks")
+        public int maximumTicks = 900;
+
+    }
+
+    @Comment("Magic number for food exhaustion rate for certain events.")
+    public PlayerExhaustion playerExhaustion = new PlayerExhaustion();
+
+    public static class PlayerExhaustion extends UnicornConfigSection {
+
+        @Remap("blockBreakExhaustion")
+        public float blockBreak = 0.025F;
+
+        @Remap("playerSwimmingExhaustion")
+        public float swimming = 0.015F;
+
+    }
+
+    public DespawnRanges despawnRanges = new DespawnRanges();
+
+    public static class DespawnRanges extends UnicornConfigSection {
+
+        @Comment("Distance in blocks that mobs are randomly queued for removal.")
+        @Remap("softDespawnDistance")
+        @CustomKey("soft")
+        public int soft_ = 32;
+
+        @Exclude
+        public int soft = 0;
+
+        @Comment("Distance in blocks that mobs are immediately removed.")
+        @Remap("hardDespawnDistance")
+        @CustomKey("hard")
+        public int hard_ = 128;
+
+        @Exclude
+        public int hard = 0;
+
+        @Override
+        public void loadProperties() {
+            if (soft_ > hard_) {
+                soft_ = hard_;
+            }
+
+            soft = soft_ * soft_;
+            hard = hard_ * hard_;
+        }
+
+    }
+
+    @Comment("Y-level at which falling blocks will despawn.")
+    @Remap("fallingBlockHeightNerf")
+    public int fallingBlockHeightNerf = 0;
+
+    @Comment("Whether to remove certain entities when entering unloaded chunks.")
+    public RemoveUnloaded removeUnloaded = new RemoveUnloaded();
+
+    public static class RemoveUnloaded extends UnicornConfigSection {
+
+        @Remap("removeUnloadedEnderPearls")
+        public boolean enderpearls = true;
+
+        @Remap("removeUnloadedTNTEntities")
+        public boolean tntEntities = true;
+
+        @Remap("removeUnloadedFallingBlocks")
+        public boolean fallingBlocks = true;
+
+    }
+
+    @Comment("Whether to load chunks when certain entities enter them.")
+    public LoadChunks loadChunks = new LoadChunks();
+
+    public static class LoadChunks extends UnicornConfigSection {
+
+        @Remap("loadUnloadedEnderPearls")
+        public boolean enderpearls = false;
+
+        @Remap("loadUnloadedTNTEntities")
+        public boolean tntEntities = false;
+
+        @Remap("loadUnloadedFallingBlocks")
+        public boolean fallingBlocks = false;
+
+    }
+
+    public GameMechanics gameMechanics = new GameMechanics();
+
+    public static class GameMechanics extends UnicornConfigSection {
+
+        @Comment("Whether boats should always drop boat items.")
+        @Remap("boatsDropBoats")
+        public boolean boatsDropBoats = false;
+
+        @Comment("Whether to disable critical hits in PvP.")
+        @Remap("disablePlayerCrits")
+        public boolean disablePlayerCrits = false;
+
+        @Comment("Whether to allow chests to open with cats on top of them.")
+        @Remap("disableChestCatDetection")
+        public boolean disableChestCatDetections = false;
+
+        @Comment("Whether to never send end credits.")
+        @Remap("disableEndCredits")
+        public boolean disableEndCredits = false;
+
+    }
+
+    @Comment("Whether to apply void damage to entities on top of a nether portal.")
+    @Remap("netherVoidTopDamage")
+    public boolean netherCeilingVoidDamage = false;
+
+    @Comment("Whether liquids should drain faster than normal.")
+    public FastDrain fastDrain = new FastDrain();
+
+    public static class FastDrain extends UnicornConfigSection {
+
+        @Remap("fastDrainLava")
+        public boolean lava = false;
+
+        @Remap("fastDrainWater")
+        public boolean water = false;
+
+    }
+
+    @Comment("Speed in ticks at which lava flows in different worlds.")
+    public LavaFlowSpeed lavaFlowSpeed = new LavaFlowSpeed();
+
+    public static class LavaFlowSpeed extends UnicornConfigSection {
+
+        @Remap("lavaFlowSpeedNormal")
+        public int normal = 30;
+
+        @Remap("lavaFlowSpeedNether")
+        public int nether = 10;
+
+    }
+
+    @Comment("Whether entities should not receive knockback from explosions.")
+    @Remap("disableExplosionKnockback")
+    public boolean disableExplosionKnockback = false;
+
+    @Comment("Whether undead horses are allowed to be leashed.")
+    @Remap("allowUndeadHorseLeashing")
+    public boolean allowUndeadHorseLeashing = false;
+
+    @Comment("Speed in ticks at which water flows over lava.")
+    @Remap("waterOverLavaFlowSpeed")
+    public int waterOverLavaFlowSpeed = 5;
+
+    @Comment("Y-level at which primed tnt will despawn.")
+    @Remap("tntEntityHeightNerf")
+    public int tntEntityHeightNerf = 0;
+
+    @Comment("Whether to recognize the hopper-check configuration options.")
+    @Remap("useHopperCheck")
+    public boolean useHopperCheck = false;
+
+    @Comment("Whether all chunks are allowed to spawn slimes.")
+    @Remap("allChunksAreSlimeChunks")
+    public boolean allChunksAreSlimeChunks = false;
+
+    @Comment("Number of ticks to update inventory containers.")
+    @Remap("containerUpdateTickRate")
+    public int containerUpdateTickRate = 1;
+
+    @Comment("Whether to keep spawn chunks loaded at all times.")
+    @Remap("keepSpawnInMemory")
+    public boolean keepSpawnLoaded = true;
+
+    @Comment("Whether falling blocks should not break when colliding with signs.")
+    @Remap("fallingBlocksCollideWithSigns")
+    public boolean fallingBlocksCollideWithSigns = false;
+
+    @Comment("Whether to not send cave and ambient sounds.")
+    @Remap("disableMoodSounds")
+    public boolean disableMoodSounds = false;
+
+    @Comment("Whether to use asynchronous lighting for better performance.")
+    @Remap("useAsyncLighting")
+    public boolean useAsyncLightning = false;
+
+    @Comment("Maximum number of blocks to search for a nether portal before generating a new one.")
+    @Remap("portalSearchRadius")
+    public int portalSearchRadius = 128;
+
+    @Comment("Whether to disable thunder events.")
+    @Remap("disableThunder")
+    public boolean disableThunder = false;
+
+    @Comment("Whether to disable ice and snow formation.")
+    @Remap("disableIceAndSnow")
+    public boolean disableIceAndSnow = false;
+
+    @Comment("Maximum number of objects that follow the tick loop.")
+    @Comment("Use with extreme caution.")
+    @Remap("tickNextTickCap")
+    public int tickNextTickListCap = 10000;
+
+    @Comment("Whether or not to always tick redstone even if the number of ticking objects is above the limit.")
+    @Remap("tickNextTickListCapIgnoresRedstone")
+    public boolean tickNextTickListCapIgnoresRedstone = false;
+
+    @Comment("Whether to enable certain features during world generation.")
+    public GeneratorSettings generatorSettings = new GeneratorSettings();
+
+    public static class GeneratorSettings extends UnicornConfigSection {
+
+        @Remap("generateCanyon")
+        public boolean canyon = true;
+
+        @Remap("generateCaves")
+        public boolean caves = true;
+
+        @Remap("generateDungeon")
+        public boolean dungeon = true;
+
+        @Remap("generateFortress")
+        public boolean fortress = true;
+
+        @Remap("generateMineshaft")
+        public boolean mineshaft = true;
+
+        @Remap("generateMonument")
+        public boolean monument = true;
+
+        @Remap("generateStronghold")
+        public boolean stronghold = true;
+
+        @Remap("generateTemple")
+        public boolean temple = true;
+
+        @Remap("generateVillage")
+        public boolean village = true;
+
+        @Remap("generateFlatBedrock")
+        public boolean flatBedrock = false;
+
+    }
+
+    @Comment("Whether block locations are allowed to be tab completed.")
+    @Remap("allowBlockLocationTabCompletion")
+    public boolean allowBlockLocationTabCompletion = true;
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/SpigotConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/SpigotConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..751fd5863bbfaa6d718e4cfa832139f79cff8baf
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/SpigotConfig.java
@@ -0,0 +1,277 @@
+package org.mythicprojects.unicornspigot.config;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.Header;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import eu.okaeri.configs.exception.OkaeriException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+import net.minecraft.server.AttributeRanged;
+import net.minecraft.server.GenericAttributes;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.config.Configuration;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.legacy.Remap;
+import org.mythicprojects.unicornspigot.config.legacy.RemapTarget;
+import org.spigotmc.WatchdogThread;
+
+@Header("This is the main configuration file for Spigot.")
+@Header("As you can see, there's tons to configure. Some options may impact gameplay, so use")
+@Header("with caution, and make sure you know what each option does before configuring.")
+@Header("For a reference for any variable inside this file, check out the Spigot wiki at")
+@Header("https://www.spigotmc.org/wiki/spigot-configuration/")
+@Header("")
+@Header("Forum: https://www.spigotmc.org/")
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+@RemapTarget(target = org.spigotmc.SpigotConfig.class)
+public class SpigotConfig extends EngineConfig<SpigotWorldConfig> {
+
+    // For tests to work properly
+    @Exclude
+    private static final SpigotConfig DEFAULT_INSTANCE = new SpigotConfig();
+    @Exclude
+    private static SpigotConfig INSTANCE;
+
+    public Settings settings = new Settings();
+
+    public static class Settings extends UnicornConfigSection {
+
+        @Comment("Whether to run in debugger mode.")
+        @Remap("debug")
+        public boolean debug = false;
+
+        @Comment("Whether to write the user cache to disk only before shutdown.")
+        @Remap("saveUserCacheOnStopOnly")
+        public boolean saveUserCacheOnStopOnly = false;
+
+        @Comment("Number of seconds to abort and print a thread dump when the server is unresponsive.")
+        @Remap("timeoutTime")
+        public int timeoutTime = 60;
+
+        @Comment("Whether to run the restart-script on server-crash.")
+        @Remap("restartOnCrash")
+        public boolean restartOnCrash = false;
+
+        @Comment("Path to a restart script to turn the server back on.")
+        @Remap("restartScript")
+        public String restartScript = "./start.sh";
+
+        @Comment("Whether to bind to the network only after all plugins are loaded.")
+        @Remap("lateBind")
+        public boolean lateBind = false;
+
+        @Comment("Whether the server is running behind a bungee cord proxy")
+        @Remap("bungee")
+        public boolean bungeecord = false;
+
+        @Comment("Maximum number of players to publish in ping messages.")
+        @Remap("playerSample")
+        public int sampleCount = 12;
+
+        @Comment("Number of ticks before shuffling the tick-order of players to prevent relog gaming to be first to get items.")
+        @Remap("playerShuffle")
+        public int playerShuffle = 0;
+
+        @Comment("Whether to blacklist certain items that creative players can spawn.")
+        @Remap("filterCreativeItems")
+        public boolean filterCreativeItems = true;
+
+        @Comment("Maximum number of entries in the usercache.json file.")
+        @Remap("userCacheCap")
+        public int userCacheSize = 1000;
+
+        @Comment("Maximum number of entries in the integer cache, which is used extensively during world generation.")
+        @Remap("intCacheLimit")
+        public int cacheLimit = 1024;
+
+        @Comment("Magic number used as a threshold for invalid move events.")
+        @Remap("movedWronglyThreshold")
+        public double movedWronglyThreshold = 0.0625;
+
+        @Comment("Maximum number of blocks per second a player can move before the event is cancelled.")
+        @Remap("movedTooQuicklyThreshold")
+        public double movedTooQuicklyThreshold = 100.0;
+
+        @Comment("Number of networking threads to allocate.")
+        public int nettyThreads = 4;
+
+        @Comment("Maximum attribute values for various modifiers.")
+        public Attribute attribute = new Attribute();
+
+        public static class Attribute extends UnicornConfigSection {
+
+            @CustomKey("maxHealth.max")
+            @Remap("maxHealth")
+            public double maxHealth = 2048;
+
+            @CustomKey("movementSpeed.max")
+            @Remap("movementSpeed")
+            public double movementSpeed = 2048;
+
+            @CustomKey("attackDamage.max")
+            @Remap("attackDamage")
+            public double attackDamage = 2048;
+
+            @Override
+            public void loadProperties() {
+                ((AttributeRanged) GenericAttributes.maxHealth).b = maxHealth;
+                ((AttributeRanged) GenericAttributes.MOVEMENT_SPEED).b = movementSpeed;
+                ((AttributeRanged) GenericAttributes.ATTACK_DAMAGE).b = attackDamage;
+            }
+
+        }
+
+        @Override
+        public void loadProperties() {
+            if (debug && !LogManager.getRootLogger().isTraceEnabled()) {
+                // Enable debug logging
+                LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
+                Configuration conf = ctx.getConfiguration();
+                conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(org.apache.logging.log4j.Level.ALL);
+                ctx.updateLoggers(conf);
+            }
+
+            if (LogManager.getRootLogger().isTraceEnabled()) {
+                UnicornConfig.log("Debug logging is enabled");
+            } else {
+                UnicornConfig.log("Debug logging is disabled");
+            }
+
+            WatchdogThread.doStart(timeoutTime, restartOnCrash);
+
+            System.setProperty("io.netty.eventLoopThreads", Integer.toString(nettyThreads));
+        }
+
+    }
+
+    @Comment("Various messages sent to clients for errors.")
+    public Messages messages = new Messages();
+
+    public static class Messages extends UnicornConfigSection {
+
+        @Remap("restartMessage")
+        public String restart = "&cServer is restarting!";
+
+        @Remap("whitelistMessage")
+        public String whitelist = "&cYou are not on the whitelist!";
+
+        @Remap("serverFullMessage")
+        public String serverFull = "&cThe server is full!";
+
+        @Comment("You can use {0} to insert the server version.")
+        @Remap("outdatedClientMessage")
+        public String outdatedClient = "&7Outdated client! Please use &c{0}";
+
+        @Comment("You can use {0} to insert the server version.")
+        @Remap("outdatedServerMessage")
+        public String outdatedServer = "&7Outdated server! Server is on &c{0}";
+
+        @Comment("You can use {0} to insert the command that was tried to use (without slash).")
+        @Remap("unknownCommandMessage")
+        public String unknownCommand = "&7Unknown command. Type &c/help &7for help.";
+
+    }
+
+    public Commands commands = new Commands();
+
+    public static class Commands extends UnicornConfigSection {
+
+        @Comment("Whether player commands should be logged.")
+        @Remap("logCommands")
+        public boolean log = true;
+
+        @Comment("Whether command block commands should be logged to console.")
+        @Remap("silentCommandBlocks")
+        public boolean silentCommandblockConsole = false;
+
+        @Comment("Disables the bukkit variants of the following commands and defaults to the vanilla variants.")
+        @Remap("replaceCommands")
+        public Set<String> replaceCommands = ImmutableSet.<String>builder()
+                .add("setblock")
+                .add("summon")
+                .add("testforblock")
+                .add("tellraw")
+                .build();
+
+        @Comment("Which commands should be excluded from spamming disconnect (if player use commands to often servers disconnect him).")
+        @Remap("spamExclusions")
+        public List<String> spamExclusions = ImmutableList.<String>builder()
+                .add("/skill")
+                .build();
+
+        @Comment("Change the verbosity of tab complete events.")
+        @Comment("Disable all tab completion with -1.")
+        @Comment("Enable server commands to be queryable with 0.")
+        @Comment("Require n letters to be typed before completing with n.")
+        @Remap("tabComplete")
+        public int tabComplete = 0;
+
+    }
+
+    public Stats stats = new Stats();
+
+    public static class Stats extends UnicornConfigSection {
+
+        @Comment("Whether to disable saving of player statistics and achievements.")
+        @Remap("disableStatSaving")
+        public boolean disableSaving = false;
+
+        @Comment("Map of statistics and the values they should be forced.")
+        @CustomKey("forced-stats")
+        private Map<String, Map<String, Integer>> forcedStats_ = new HashMap<>();
+
+        @Exclude
+        @Remap("forcedStats")
+        public Map<String, Integer> forcedStats = new HashMap<>();
+
+        @Override
+        public void loadProperties() {
+            this.forcedStats_.forEach((key, value) ->
+                    value.forEach((key2, value2) ->
+                            forcedStats.put(key + "." + key2, value2)));
+
+            if (disableSaving && forcedStats.getOrDefault("achievement.openInventory", 0) < 1) {
+                UnicornConfig.log(Level.WARNING, "*** WARNING *** stats.disable-saving is true but stats.forced-stats.achievement.openInventory" +
+                        " isn't set to 1. Disabling stat saving without forcing the achievement may cause it to get stuck on the player's " +
+                        "screen.");
+            }
+        }
+
+    }
+
+    @Comment("Per world settings.")
+    public Map<String, SpigotWorldConfig> worldSettings = new HashMap<>();
+
+    @Override
+    public @NotNull Map<String, SpigotWorldConfig> getWorldConfigs() {
+        return this.worldSettings;
+    }
+
+    @Override
+    protected @NotNull SpigotWorldConfig createDefaultWorldConfig() {
+        return new SpigotWorldConfig();
+    }
+
+    @Override
+    public OkaeriConfig load() throws OkaeriException {
+        super.load();
+        INSTANCE = this;
+        return this;
+    }
+
+    public static @NotNull SpigotConfig get() {
+        return (INSTANCE == null) ? DEFAULT_INSTANCE : INSTANCE;
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/SpigotWorldConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/SpigotWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..df94dde4bdb4fcacf37b68a88bc3399301719f89
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/SpigotWorldConfig.java
@@ -0,0 +1,322 @@
+package org.mythicprojects.unicornspigot.config;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.CustomKey;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.config.legacy.Remap;
+import org.mythicprojects.unicornspigot.config.legacy.RemapTarget;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+@RemapTarget(target = org.spigotmc.SpigotWorldConfig.class)
+public class SpigotWorldConfig extends EngineConfig.WorldConfig {
+
+    public AntiXray antiXray = new AntiXray();
+
+    public static class AntiXray extends UnicornConfigSection {
+
+        @Exclude
+        @Remap("antiXrayInstance")
+        private org.spigotmc.AntiXray instance;
+
+        @Comment("Whether to enable the anti-xray module.")
+        @Remap("antiXray")
+        public boolean enabled = true;
+
+        @Comment("Controls which anti-xray modes to use.")
+        @Comment("Mode 1 will hide all ores with stone.")
+        @Comment("Mode 2 will create fake, client-side ores around the world, which can impact client lag and network latency.")
+        @Remap("engineMode")
+        public int engineMode = 1;
+
+        @Comment("IDs of blocks that should be hidden in mode 1.")
+        @Remap("hiddenBlocks")
+        @CustomKey("hide-blocks")
+        public List<Integer> hideBlocks_ = ImmutableList.<Integer>builder()
+                .add(14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130)
+                .build();
+
+        @Exclude
+        public Set<Integer> hideBlocks = ImmutableSet.<Integer>builder()
+                .add(14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130)
+                .build();
+
+        @Comment("IDs of blocks that should be replaced in mode 2.")
+        @Remap("replaceBlocks")
+        @CustomKey("replace-blocks")
+        public List<Integer> replaceBlocks_ = ImmutableList.<Integer>builder()
+                .add(1, 5)
+                .build();
+
+        @Exclude
+        public Set<Integer> replaceBlocks = ImmutableSet.<Integer>builder()
+                .add(1, 5)
+                .build();
+
+        @Override
+        public void loadProperties() {
+            this.instance = new org.spigotmc.AntiXray(this);
+            this.hideBlocks = new HashSet<>(this.hideBlocks_);
+            this.replaceBlocks = new HashSet<>(this.replaceBlocks_);
+        }
+
+    }
+
+    @Comment("Whether to remove AI from mobs that originate from mob spawners.")
+    @Remap("nerfSpawnerMobs")
+    public boolean nerfSpawnerMobs = false;
+
+    @Comment("Speed at which certain crops will grow.")
+    @Comment("Changing these values will not affect performance.")
+    public Growth growth = new Growth();
+
+    public static class Growth extends UnicornConfigSection {
+
+        @Remap("cactusModifier")
+        public int cactusModifier = 100;
+
+        @Remap("caneModifier")
+        public int caneModifier = 100;
+
+        @Remap("melonModifier")
+        public int melonModifier = 100;
+
+        @Remap("pumpkinModifier")
+        public int pumpkinModifier = 100;
+
+        @Remap("wheatModifier")
+        public int wheatModifier = 100;
+
+        @Remap("mushroomModifier")
+        public int mushroomModifier = 100;
+
+        @Remap("saplingModifier")
+        public int saplingModifier = 100;
+
+        @Remap("wartModifier")
+        public int netherWartModifier = 100;
+
+        @Override
+        public void loadProperties() {
+            this.cactusModifier = this.validate("Cactus", this.cactusModifier);
+            this.caneModifier = this.validate("Cane", this.caneModifier);
+            this.melonModifier = this.validate("Melon", this.melonModifier);
+            this.pumpkinModifier = this.validate("Pumpkin", this.pumpkinModifier);
+            this.wheatModifier = this.validate("Wheat", this.wheatModifier);
+            this.mushroomModifier = this.validate("Mushroom", this.mushroomModifier);
+            this.saplingModifier = this.validate("Sapling", this.saplingModifier);
+            this.netherWartModifier = this.validate("Nether Wart", this.netherWartModifier);
+        }
+
+        private int validate(String crop, int modifier) {
+            if (modifier == 0) {
+                log("Cannot set " + crop + " growth to zero, defaulting to 100");
+                modifier = 100;
+            }
+            return modifier;
+        }
+
+    }
+
+    @Comment("Radius of chunks around players that mobs will naturally spawn.")
+    @Remap("mobSpawnRange")
+    public byte mobSpawnRange = 4;
+
+    @Comment("Radius in blocks around players that mobs are marked as active and are ticked.")
+    public EntityActivationRange entityActivationRange = new EntityActivationRange();
+
+    public static class EntityActivationRange extends UnicornConfigSection {
+
+        @Remap("animalActivationRange")
+        public int animals = 32;
+
+        @Remap("monsterActivationRange")
+        public int monsters = 32;
+
+        @Remap("miscActivationRange")
+        public int ambient = 16;
+
+    }
+
+    @Comment("Radius in blocks around players that the client will see.")
+    @Comment("Only affects client-side performance.")
+    public EntityTrackingRange entityTrackingRange = new EntityTrackingRange();
+
+    public static class EntityTrackingRange extends UnicornConfigSection {
+
+        @Remap("playerTrackingRange")
+        public int players = 48;
+
+        @Remap("animalTrackingRange")
+        public int animals = 48;
+
+        @Remap("monsterTrackingRange")
+        public int monsters = 48;
+
+        @Remap("miscTrackingRange")
+        public int misc = 32;
+
+        @Remap("otherTrackingRange")
+        public int other = 64;
+
+    }
+
+    @Comment("Number of ticks between each of the following events.")
+    public TicksPer ticksPer = new TicksPer();
+
+    public static class TicksPer extends OkaeriConfig {
+
+        @Remap("hopperTransfer")
+        public int hopperTransfer = 8;
+
+        @Remap("hopperCheck")
+        public int hopperCheck = 8;
+
+    }
+
+    @Comment("Maximum throughput of items in a hopper per tick cycle.")
+    @Remap("hopperAmount")
+    public int hopperAmount = 1;
+
+    @Comment("Whether to randomly sample chunks and validate lighting integrity.")
+    @Remap("randomLightUpdates")
+    public boolean randomLightUpdates = false;
+
+    @Comment("Whether to save generic structure information.")
+    @Comment("Only affects certain gameplay features such as witches spawning in huts.")
+    @Remap("saveStructureInfo")
+    public boolean saveStructureInfo = true;
+
+    @Comment("Maximum number of chunks to send per packet.")
+    @Remap("maxBulkChunk")
+    public int maxBulkChunks = 10;
+
+    @Comment("Maximum number of other entities and entity can collide with per tick.")
+    @Remap("maxCollisionsPerEntity")
+    public int maxEntityCollisions = 8;
+
+    @Comment("Radius around dragons that players will hear the death sound.")
+    @Remap("dragonDeathSoundRadius")
+    public int dragonDeathSoundRadius = 0;
+
+    @Comment("Radius around withers that players will hear the spawn sound.")
+    @Remap("witherSpawnSoundRadius")
+    public int witherSpawnSoundRadius = 0;
+
+    @Comment("Random seed used to generate and place villages.")
+    @Remap("villageSeed")
+    public int seedVillage = 10387312;
+
+    @Comment("Random seed used to generate and place nether strongholds.")
+    @Remap("largeFeatureSeed")
+    public int seedFeature = 14357617;
+
+    @Comment("Number of hunger points to subtract upon each event.")
+    public Hunger hunger = new Hunger();
+
+    public static class Hunger extends UnicornConfigSection {
+
+        @Remap("walkExhaustion")
+        public float walkExhaustion = 0.2F;
+
+        @Remap("sprintExhaustion")
+        public float sprintExhaustion = 0.8F;
+
+        @Remap("combatExhaustion")
+        public float combatExhaustion = 0.3F;
+
+        @Remap("regenExhaustion")
+        public float regenExhaustion = 3F;
+
+    }
+
+    @Comment("Maximum number of primed tnt entities per tick.")
+    @Remap("maxTntTicksPerTick")
+    public int maxTntPerTick = 100;
+
+    @Exclude
+    public int currentPrimedTnt = 0;
+
+    @Comment("Maximum number of milliseconds for entity movements tasks to have before getting skipped.")
+    @Comment("Use 1000 to disable this feature, as recommended by paper.")
+    public MaxTickTime maxTickTime = new MaxTickTime();
+
+    public static class MaxTickTime extends UnicornConfigSection {
+
+        @Remap("tileMaxTickTime")
+        public int tile = 50;
+
+        @Remap("entityMaxTickTime")
+        public int entity = 50;
+
+    }
+
+    @Comment("Set the tick update interval for hanging entities.")
+    @Remap("hangingTickFrequency")
+    public int hangingTickFrequency = 100;
+
+    @Comment("Number of ticks before items on the ground will despawn.")
+    @Remap("itemDespawnRate")
+    public int itemDespawnRate = 6000;
+
+    @Comment("Number of ticks before despawning arrows on the ground.")
+    @Remap("arrowDespawnRate")
+    public int arrowDespawnRate = 1200;
+
+    @Comment("Radius in blocks for certain entities to merge together.")
+    public MergeRadius mergeRadius = new MergeRadius();
+
+    public static class MergeRadius extends UnicornConfigSection {
+
+        @Remap("itemMerge")
+        public double item = 2.5;
+
+        @Remap("expMerge")
+        public double exp = 3.0;
+
+    }
+
+    @Comment("Whether to allow zombie pigmen from spawning inside nether portals.")
+    @Remap("enableZombiePigmenPortalSpawns")
+    public boolean enableZombiePigmenPortalSpawns = true;
+
+    @Comment("Number of chunks to load around each player.")
+    @Comment("Must be within 1 and 15.")
+    @Remap("viewDistance")
+    public int viewDistance = 10;
+
+    @Comment("Radius around withers that players will hear the spawn sound.")
+    @Remap("zombieAggressiveTowardsVillager")
+    public boolean zombieAggressiveTowardsVillager = true;
+
+    @Comment("Number of chunks to be updated for growth per tick.")
+    @Remap("chunksPerTick")
+    public int chunksPerTick = 650;
+
+    @Comment("Prevent the tick list from increasing over time.")
+    @Comment("Use with caution, because world growth is stunted.")
+    @Remap("clearChunksOnTick")
+    public boolean clearTickList = false;
+
+    @Override
+    public void loadProperties() {
+        if (!this.saveStructureInfo) {
+            log("*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs!");
+            log("*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!");
+        }
+    }
+
+    public @NotNull org.spigotmc.AntiXray getAntiXray() {
+        return this.antiXray.instance;
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..ca445b5de72c8e931071db544f651077c0f49023
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfig.java
@@ -0,0 +1,71 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Comment;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.annotation.Header;
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+import eu.okaeri.configs.exception.OkaeriException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
+@Header("This is the main configuration file for UnicornSpigot.")
+@Header("As you can see, there's tons to configure. Some options may impact gameplay, so use")
+@Header("with caution, and make sure you know what each option does before configuring.")
+@Header("If you need help with the configuration or have any questions related to UnicornSpigot,")
+@Header("join our Discord server")
+@Header(" ")
+@Header("Discord: https://discord.mythicprojects.org")
+@Header("GitHub: https://github.com/Mythic-Projects")
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class UnicornConfig extends EngineConfig<UnicornWorldConfig> {
+
+    // For tests to work properly
+    @Exclude
+    private static final UnicornConfig DEFAULT_INSTANCE = new UnicornConfig();
+    @Exclude
+    private static UnicornConfig INSTANCE;
+
+    @Comment("Per world settings.")
+    public Map<String, UnicornWorldConfig> worldSettings = new HashMap<>();
+
+    @Override
+    public @NotNull Map<String, UnicornWorldConfig> getWorldConfigs() {
+        return this.worldSettings;
+    }
+
+    @Override
+    protected @NotNull UnicornWorldConfig createDefaultWorldConfig() {
+        return new UnicornWorldConfig();
+    }
+
+    @Override
+    public OkaeriConfig load() throws OkaeriException {
+        super.load();
+        INSTANCE = this;
+        return this;
+    }
+
+    public static @NotNull UnicornConfig get() {
+        return (INSTANCE == null) ? DEFAULT_INSTANCE : INSTANCE;
+    }
+
+    static void log(Level level, String log, Object... params) {
+        Logger logger = Bukkit.getLogger();
+        if (logger == null) {
+            return;
+        }
+        logger.log(level, log, params);
+    }
+
+    static void log(String log, Object... params) {
+        log( Level.INFO, log, params);
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfigSection.java b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfigSection.java
new file mode 100644
index 0000000000000000000000000000000000000000..1099010d1bfc09cb12176c898916a65ed19715e6
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornConfigSection.java
@@ -0,0 +1,128 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.OkaeriConfig;
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.exception.OkaeriException;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
+import org.mythicprojects.unicornspigot.util.ReflectionHelper;
+
+public abstract class UnicornConfigSection extends OkaeriConfig {
+
+    @Override
+    public OkaeriConfig load() throws OkaeriException {
+        super.load();
+        this.loadPropertiesInternal();
+        return this;
+    }
+
+    public void loadProperties() {
+    }
+
+    private void loadPropertiesInternal() {
+        this.loadProperties();
+
+        for (Field field : ReflectionHelper.getFields(this.getClass())) {
+            if (field.getAnnotation(Exclude.class) != null) {
+                continue;
+            }
+
+            try {
+                field.setAccessible(true);
+
+                Class<?> fieldType = field.getType();
+                if (UnicornConfigSection.class.isAssignableFrom(fieldType)) {
+                    UnicornConfigSection section = (UnicornConfigSection) field.get(this);
+                    if (section == null) {
+                        continue;
+                    }
+                    section.loadPropertiesInternal();
+                } else if (Collection.class.isAssignableFrom(fieldType)) {
+                    Collection<?> collection = (Collection<?>) field.get(this);
+                    if (collection == null) {
+                        continue;
+                    }
+                    collection.forEach(value -> {
+                        if (!(value instanceof UnicornConfigSection)) {
+                            return;
+                        }
+                        ((UnicornConfigSection) value).loadPropertiesInternal();
+                    });
+                } else if (Map.class.isAssignableFrom(fieldType)) {
+                    Map<?, ?> map = (Map<?, ?>) field.get(this);
+                    if (map == null) {
+                        continue;
+                    }
+                    map.forEach((key, value) -> {
+                        if (!(value instanceof UnicornConfigSection)) {
+                            return;
+                        }
+                        ((UnicornConfigSection) value).loadPropertiesInternal();
+                    });
+                }
+            } catch (Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failed to load properties for " + field.getName(), ex);
+            }
+            this.colorField(field);
+        }
+    }
+
+    private void colorField(@NotNull Field field) {
+        try {
+            field.setAccessible(true);
+            Class<?> fieldType = field.getType();
+            if (String.class.isAssignableFrom(fieldType)) {
+                field.set(this, color((String) field.get(this)));
+                return;
+            } else if (List.class.isAssignableFrom(fieldType)) {
+                List<?> list = (List<?>) field.get(this);
+                if (list == null || list.isEmpty()) {
+                    return;
+                }
+
+                List<Object> newList = new ArrayList<>(list);
+                newList.replaceAll(value -> {
+                    if (!(value instanceof String)) {
+                        return value;
+                    }
+                    return color((String) value);
+                });
+
+                field.set(this, newList);
+                return;
+            } else if (Map.class.isAssignableFrom(fieldType)) {
+                Map<?, ?> map = (Map<?, ?>) field.get(this);
+                if (map == null || map.isEmpty()) {
+                    return;
+                }
+
+                Map<Object, Object> newMap = new LinkedHashMap<>();
+                map.forEach((key, value) -> {
+                    if (!(value instanceof String)) {
+                        newMap.put(key, value);
+                        return;
+                    }
+                    newMap.put(key, color((String) value));
+                });
+
+                field.set(this, newMap);
+                return;
+            }
+        } catch (Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Failed to color property " + field.getName(), ex);
+        }
+    }
+
+    private static @NotNull String color(@NotNull String input) {
+        return ChatColor.translateAlternateColorCodes(input);
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/UnicornWorldConfig.java b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..9a8779852d17e0730f5625243b09b1f08e5768d8
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/UnicornWorldConfig.java
@@ -0,0 +1,9 @@
+package org.mythicprojects.unicornspigot.config;
+
+import eu.okaeri.configs.annotation.NameModifier;
+import eu.okaeri.configs.annotation.NameStrategy;
+import eu.okaeri.configs.annotation.Names;
+
+@Names(strategy = NameStrategy.HYPHEN_CASE, modifier = NameModifier.TO_LOWER_CASE)
+public class UnicornWorldConfig extends EngineConfig.WorldConfig {
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/legacy/LegacyRemapper.java b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/LegacyRemapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..f98ea6e333fa4ed10a40998c0eb1e2d907cdf552
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/LegacyRemapper.java
@@ -0,0 +1,77 @@
+package org.mythicprojects.unicornspigot.config.legacy;
+
+import eu.okaeri.configs.annotation.Exclude;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.mythicprojects.unicornspigot.config.UnicornConfigSection;
+import org.mythicprojects.unicornspigot.util.PropertyHelper;
+import org.mythicprojects.unicornspigot.util.ReflectionHelper;
+
+public final class LegacyRemapper {
+
+    private static final boolean DISABLE_CONFIG_REMAPPING = PropertyHelper.getBoolean("Unicorn.disableLegacyConfigRemapping", false);
+
+    private LegacyRemapper() {
+    }
+
+    public static void map(@NotNull Object toMap, @Nullable Object target) {
+        if (DISABLE_CONFIG_REMAPPING) {
+            return;
+        }
+
+        Class<?> clazz = toMap.getClass();
+        RemapTarget staticTarget = clazz.getAnnotation(RemapTarget.class);
+        if (staticTarget == null) {
+            return;
+        }
+        Class<?> targetClazz = staticTarget.target();
+        map(toMap, target, targetClazz);
+    }
+
+    private static void map(@NotNull Object toMap, @Nullable Object target, @NotNull Class<?> targetClazz) {
+        for (Field field : ReflectionHelper.getFields(toMap.getClass())) {
+            String sourceName = field.getName();
+            String targetName = "UNKNOWN";
+            try {
+                field.setAccessible(true);
+                Object value = field.get(Modifier.isStatic(field.getModifiers()) ? null : toMap);
+                if (value == null) {
+                    continue;
+                }
+
+                Remap mapping = field.getAnnotation(Remap.class);
+                if (mapping == null) {
+                    if (toMap.equals(value)
+                            || !UnicornConfigSection.class.isAssignableFrom(value.getClass())
+                            || field.getAnnotation(Exclude.class) != null) {
+                        continue;
+                    }
+                    map(value, target, targetClazz);
+                    continue;
+                }
+                String legacyKey = mapping.value();
+                targetName = legacyKey;
+
+                try {
+                    Field targetField = targetClazz.getDeclaredField(legacyKey);
+                    targetField.setAccessible(true);
+                    if (target == null && !Modifier.isStatic(targetField.getModifiers())) {
+                        Bukkit.getLogger().log(Level.SEVERE, String.format("%s's field '%s' couldn't been mapped to %s's field '%s', because it's not static and target is null", toMap.getClass().getName(), sourceName, targetClazz.getName(), targetName));
+                        continue;
+                    }
+                    targetField.set(target, value);
+                } catch (NoSuchFieldException ex) {
+                    Bukkit.getLogger().log(Level.SEVERE, String.format("%s's field '%s' couldn't been mapped to %s's field '%s', because it doesn't exist", toMap.getClass().getName(), sourceName, targetClazz.getName(), targetName), ex);
+
+                }
+            } catch (IllegalAccessException | IllegalArgumentException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, String.format("%s's field '%s' couldn't been mapped to %s's field '%s'", toMap.getClass().getName(), sourceName, targetClazz.getName(), targetName), ex);
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/legacy/Remap.java b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/Remap.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4e5c0176fb8efda01cb7d7ecf86246e9a6f0299
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/Remap.java
@@ -0,0 +1,13 @@
+package org.mythicprojects.unicornspigot.config.legacy;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.NotNull;
+
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Remap {
+    @NotNull String value();
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/legacy/RemapTarget.java b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/RemapTarget.java
new file mode 100644
index 0000000000000000000000000000000000000000..872de0781d8a5e6f5810d2d0027d7733c7f07395
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/legacy/RemapTarget.java
@@ -0,0 +1,13 @@
+package org.mythicprojects.unicornspigot.config.legacy;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.NotNull;
+
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface RemapTarget {
+    @NotNull Class<?> target();
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/serdes/DecolorTransformer.java b/src/main/java/org/mythicprojects/unicornspigot/config/serdes/DecolorTransformer.java
new file mode 100644
index 0000000000000000000000000000000000000000..e7b96e2dd27ecad91a21ee764be25cfc59c65d12
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/serdes/DecolorTransformer.java
@@ -0,0 +1,25 @@
+package org.mythicprojects.unicornspigot.config.serdes;
+
+import eu.okaeri.configs.annotation.Exclude;
+import eu.okaeri.configs.schema.GenericsPair;
+import eu.okaeri.configs.serdes.ObjectTransformer;
+import eu.okaeri.configs.serdes.SerdesContext;
+import eu.okaeri.configs.serdes.SimpleObjectTransformer;
+import org.bukkit.ChatColor;
+
+public class DecolorTransformer extends ObjectTransformer<String, String> {
+
+    @Exclude
+    private static final ObjectTransformer<String, String> TRANSFORMER = SimpleObjectTransformer.of(String.class, String.class, ChatColor::decolor);
+
+    @Override
+    public GenericsPair<String, String> getPair() {
+        return TRANSFORMER.getPair();
+    }
+
+    @Override
+    public String transform(String input, SerdesContext context) {
+        return TRANSFORMER.transform(input, context);
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/config/serdes/WarningStateTransformer.java b/src/main/java/org/mythicprojects/unicornspigot/config/serdes/WarningStateTransformer.java
new file mode 100644
index 0000000000000000000000000000000000000000..094edeadd8af541d80f1cc1c203dc3ad5fca6eac
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/config/serdes/WarningStateTransformer.java
@@ -0,0 +1,25 @@
+package org.mythicprojects.unicornspigot.config.serdes;
+
+import eu.okaeri.configs.schema.GenericsPair;
+import eu.okaeri.configs.serdes.BidirectionalTransformer;
+import eu.okaeri.configs.serdes.SerdesContext;
+import org.bukkit.Warning;
+
+public class WarningStateTransformer extends BidirectionalTransformer<String, Warning.WarningState> {
+
+    @Override
+    public GenericsPair<String, Warning.WarningState> getPair() {
+        return this.genericsPair(String.class, Warning.WarningState.class);
+    }
+
+    @Override
+    public Warning.WarningState leftToRight(String data, SerdesContext serdesContext) {
+        return Warning.WarningState.value(data);
+    }
+
+    @Override
+    public String rightToLeft(Warning.WarningState data, SerdesContext serdesContext) {
+        return data.name().toLowerCase();
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/util/MathUtil.java b/src/main/java/org/mythicprojects/unicornspigot/util/MathUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..380a17deb26f2c9e52fa43cf0b78b2293503aa94
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/util/MathUtil.java
@@ -0,0 +1,20 @@
+package org.mythicprojects.unicornspigot.util;
+
+public final class MathUtil {
+
+    private MathUtil() {
+    }
+
+    public static int pow2(int value) {
+        return value * value;
+    }
+
+    public static float pow2(float value) {
+        return value * value;
+    }
+
+    public static double pow2(double value) {
+        return value * value;
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/util/Pair.java b/src/main/java/org/mythicprojects/unicornspigot/util/Pair.java
new file mode 100644
index 0000000000000000000000000000000000000000..014e5afdc6485ac99235ee44f5e64f638b9e74c3
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/util/Pair.java
@@ -0,0 +1,33 @@
+package org.mythicprojects.unicornspigot.util;
+
+public class Pair<L, R> {
+
+    private final L left;
+    private final R right;
+
+    private Pair(L left, R right) {
+        this.left = left;
+        this.right = right;
+    }
+
+    public L getLeft() {
+        return this.left;
+    }
+
+    public L getKey() {
+        return this.left;
+    }
+
+    public R getRight() {
+        return this.right;
+    }
+
+    public R getValue() {
+        return this.right;
+    }
+
+    public static <L, R> Pair<L, R> of(L left, R right) {
+        return new Pair<>(left, right);
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/util/PropertyHelper.java b/src/main/java/org/mythicprojects/unicornspigot/util/PropertyHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..f70c5babb3122b423d414fbc7dcb1959e23f3a2c
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/util/PropertyHelper.java
@@ -0,0 +1,19 @@
+package org.mythicprojects.unicornspigot.util;
+
+import static java.lang.Boolean.parseBoolean;
+
+public final class PropertyHelper {
+
+    private PropertyHelper() {
+    }
+
+    public static boolean getBoolean(String name, boolean def) {
+        boolean result = def;
+        try {
+            result = parseBoolean(System.getProperty(name));
+        } catch (IllegalArgumentException | NullPointerException ignored) {
+        }
+        return result;
+    }
+
+}
diff --git a/src/main/java/org/mythicprojects/unicornspigot/util/ReflectionHelper.java b/src/main/java/org/mythicprojects/unicornspigot/util/ReflectionHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..c0be76c8d0e0729775889d0aa923ccced81cbc9a
--- /dev/null
+++ b/src/main/java/org/mythicprojects/unicornspigot/util/ReflectionHelper.java
@@ -0,0 +1,23 @@
+package org.mythicprojects.unicornspigot.util;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.LinkedHashSet;
+import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+
+public final class ReflectionHelper {
+
+    private ReflectionHelper() {
+    }
+
+    public static @NotNull Set<Field> getFields(@NotNull Class<?> clazz) {
+        Set<Field> fields = new LinkedHashSet<>(Arrays.asList(clazz.getDeclaredFields()));
+        Class<?> superClass = clazz.getSuperclass();
+        if (superClass != null) {
+            fields.addAll(getFields(superClass));
+        }
+        return fields;
+    }
+
+}
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index d3767d2a8963e72253fd05b4d177acd7415158bb..9551937b5dddb26ea1aa8c13733bea6417d73799 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -32,6 +32,7 @@ import net.minecraft.server.MathHelper;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.World;
 import co.aikar.timings.SpigotTimings;
+import org.mythicprojects.unicornspigot.config.SpigotWorldConfig;
 
 
 public class ActivationRange
@@ -67,14 +68,13 @@ public class ActivationRange
      * These entities are excluded from Activation range checks.
      *
      * @param entity
-     * @param world
      * @return boolean If it should always tick.
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.activationType == 3 && config.miscActivationRange == 0 )
-                || ( entity.activationType == 2 && config.animalActivationRange == 0 )
-                || ( entity.activationType == 1 && config.monsterActivationRange == 0 )
+        if ( ( entity.activationType == 3 && config.entityActivationRange.ambient == 0 )
+                || ( entity.activationType == 2 && config.entityActivationRange.animals == 0 )
+                || ( entity.activationType == 1 && config.entityActivationRange.monsters == 0 )
                 || entity instanceof EntityHuman
                 || entity instanceof EntityProjectile
                 || entity instanceof EntityEnderDragon
@@ -102,13 +102,13 @@ public class ActivationRange
     public static void activateEntities(World world)
     {
         SpigotTimings.entityActivationCheckTimer.startTiming();
-        final int miscActivationRange = world.spigotConfig.miscActivationRange;
-        final int animalActivationRange = world.spigotConfig.animalActivationRange;
-        final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
+        final int miscActivationRange = world.spigotConfigUnicorn.entityActivationRange.ambient;
+        final int animalActivationRange = world.spigotConfigUnicorn.entityActivationRange.animals;
+        final int monsterActivationRange = world.spigotConfigUnicorn.entityActivationRange.monsters;
 
         int maxRange = Math.max( monsterActivationRange, animalActivationRange );
         maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.spigotConfig.viewDistance << 4 ) - 8, maxRange );
+        maxRange = Math.min( ( world.spigotConfigUnicorn.viewDistance << 4 ) - 8, maxRange );
 
         for ( Entity player : (List<Entity>) (List) world.players )
         {
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index c2ad90c820b92cea823f7b3d92787854d3c5ca71..5b15f0730293abfdbe6c82fddd8e1304c99c544a 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -26,6 +26,7 @@ public class AntiXray
     public final Set<BlockPosition> pendingUpdates = new HashSet<BlockPosition>();
     // PaperSpigot end
 
+    @Deprecated // Unicorn
     public AntiXray(SpigotWorldConfig config)
     {
         // Set all listed blocks as true to be obfuscated
@@ -50,12 +51,34 @@ public class AntiXray
         replacementOres = blocks.toArray();
     }
 
+    // Unicorn start
+    public AntiXray(org.mythicprojects.unicornspigot.config.SpigotWorldConfig.AntiXray config) {
+        // Set all listed blocks as true to be obfuscated
+        for (int id : (config.engineMode == 1) ? config.hideBlocks : config.replaceBlocks) {
+            obfuscateBlocks[id] = true;
+        }
+
+        // For every block
+        TByteSet blocks = new TByteHashSet();
+        for (Integer i : config.hideBlocks) {
+            Block block = Block.getById(i);
+            // Check it exists and is not a tile entity
+            if (block != null && !block.isTileEntity()) {
+                // Add it to the set of replacement blocks
+                blocks.add((byte) (int) i);
+            }
+        }
+        // Bake it to a flat array of replacements
+        replacementOres = blocks.toArray();
+    }
+    // Unicorn end
+
     /**
      * PaperSpigot - Flush queued block updates for world.
      */
     public void flushUpdates(World world)
     {
-        if ( world.spigotConfig.antiXray && !pendingUpdates.isEmpty() )
+        if ( world.spigotConfigUnicorn.antiXray.enabled && !pendingUpdates.isEmpty() )
         {
             queueUpdates = false;
 
@@ -75,7 +98,7 @@ public class AntiXray
      */
     public void updateNearbyBlocks(World world, BlockPosition position)
     {
-        if ( world.spigotConfig.antiXray )
+        if ( world.spigotConfigUnicorn.antiXray.enabled )
         {
             // PaperSpigot start
             if ( queueUpdates )
@@ -96,7 +119,7 @@ public class AntiXray
      */
     public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
     {
-        if ( world.spigotConfig.antiXray )
+        if ( world.spigotConfigUnicorn.antiXray.enabled )
         {
             SpigotTimings.antiXrayObfuscateTimer.startTiming();
             obfuscate( chunkX, chunkY, bitmask, buffer, world );
@@ -110,7 +133,7 @@ public class AntiXray
     public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
     {
         // If the world is marked as obfuscated
-        if ( world.spigotConfig.antiXray )
+        if ( world.spigotConfigUnicorn.antiXray.enabled )
         {
             // Initial radius to search around for air
             int initialRadius = 1;
@@ -174,7 +197,7 @@ public class AntiXray
                                     if ( !hasTransparentBlockAdjacent( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
                                     {
                                         int newId = blockId;
-                                        switch ( world.spigotConfig.engineMode )
+                                        switch ( world.spigotConfigUnicorn.antiXray.engineMode )
                                         {
                                             case 1:
                                                 // Replace with replacement material
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 429c25804654b6590c1ae1bc61af66fa1808214c..ad42b23eca323b774d24d5b82adbc3e05932cb68 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -35,9 +35,14 @@ public class RestartCommand extends Command
         return true;
     }
 
+    private static File RESTART_SCRIPT;
+
     public static void restart()
     {
-        restart( new File( SpigotConfig.restartScript ) );
+        if (RESTART_SCRIPT == null) {
+            RESTART_SCRIPT = new File(org.mythicprojects.unicornspigot.config.SpigotConfig.get().settings.restartScript);
+        }
+        restart(RESTART_SCRIPT);
     }
 
     public static void restart(final File script)
@@ -47,7 +52,7 @@ public class RestartCommand extends Command
         {
             if ( script.isFile() )
             {
-                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
+                System.out.println( "Attempting to restart with " + org.mythicprojects.unicornspigot.config.SpigotConfig.get().settings.restartScript );
 
                 // Disable Watchdog
                 WatchdogThread.doStop();
@@ -55,7 +60,7 @@ public class RestartCommand extends Command
                 // Kick all players
                 for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
+                    p.playerConnection.disconnect(org.mythicprojects.unicornspigot.config.SpigotConfig.get().messages.restart);
                 }
                 // Give the socket a chance to send the packets
                 try
@@ -113,7 +118,7 @@ public class RestartCommand extends Command
                 Runtime.getRuntime().addShutdownHook( shutdownHook );
             } else
             {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+                System.out.println( "Startup script '" + org.mythicprojects.unicornspigot.config.SpigotConfig.get().settings.restartScript + "' does not exist! Stopping server." );
             }
             System.exit( 0 );
         } catch ( Exception ex )
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index b9d185d99f6432e8636eb573a28f19eccf16258a..b5de410804f40bba29398dcff946477d67fa8926 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -31,6 +31,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import co.aikar.timings.Timings;
 import co.aikar.timings.TimingsManager;
 
+@Deprecated // Unicorn
 public class SpigotConfig
 {
 
@@ -282,7 +283,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static Map<String, Integer> forcedStats = new HashMap<String, Integer>(); // Unicorn - use java map, if ever needed bring back TObjectIntHashMap for compatibility
     private static void stats()
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 8e86212aa5deae00c55cacc7207525df67a1868e..99dbd2654d3da2ad7cc59fa1bba74e7f3c0fa57e 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -5,6 +5,7 @@ import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
+@Deprecated // Unicorn
 public class SpigotWorldConfig
 {
 
@@ -16,7 +17,7 @@ public class SpigotWorldConfig
     {
         this.worldName = worldName;
         this.config = SpigotConfig.config;
-        init();
+        //init(); // Unicorn
     }
 
     public void init()
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 21fd7efc5248b34b9c1336c180689fb59dc4636e..fcaea7e2500448c02513cee51015072af7d814c7 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,5 +1,6 @@
 package org.spigotmc;
 
+import java.util.Arrays;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -13,6 +14,7 @@ public class TicksPerSecondCommand extends Command
         this.description = "Gets the current ticks per second for the server";
         this.usageMessage = "/tps";
         this.setPermission( "bukkit.command.tps" );
+        this.setAliases(Arrays.asList("tickspersecond"));
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index 4bf4d2ac64b14a3fb740af8bbe888130099573c4..36cc2becc91004bb95153882c28c6e3e7e69e860 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -7,6 +7,7 @@ import net.minecraft.server.EntityItem;
 import net.minecraft.server.EntityItemFrame;
 import net.minecraft.server.EntityPainting;
 import net.minecraft.server.EntityPlayer;
+import org.mythicprojects.unicornspigot.config.SpigotWorldConfig;
 
 public class TrackingRange
 {
@@ -21,31 +22,32 @@ public class TrackingRange
      */
     public static int getEntityTrackingRange(Entity entity, int defaultRange)
     {
-        SpigotWorldConfig config = entity.world.spigotConfig;
+        SpigotWorldConfig config = entity.world.spigotConfigUnicorn;
+        SpigotWorldConfig.EntityTrackingRange trackingConfig = config.entityTrackingRange;
         if ( entity instanceof EntityPlayer )
         {
-            return config.playerTrackingRange;
+            return trackingConfig.players;
         }  else if ( entity.activationType == 1 )
         {
-            return config.monsterTrackingRange;
+            return trackingConfig.monsters;
         } else if ( entity instanceof EntityGhast )
         {
-            if ( config.monsterTrackingRange > config.monsterActivationRange )
+            if ( trackingConfig.monsters > config.entityActivationRange.monsters )
             {
-                return config.monsterTrackingRange;
+                return trackingConfig.monsters;
             } else
             {
-                return config.monsterActivationRange;
+                return config.entityActivationRange.monsters;
             }
         } else if ( entity.activationType == 2 )
         {
-            return config.animalTrackingRange;
+            return trackingConfig.animals;
         } else if ( entity instanceof EntityItemFrame || entity instanceof EntityPainting || entity instanceof EntityItem || entity instanceof EntityExperienceOrb )
         {
-            return config.miscTrackingRange;
+            return trackingConfig.misc;
         } else 
         {
-            return config.otherTrackingRange;
+            return trackingConfig.other;
         }
     }
 }
