From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sun, 25 Jun 2023 15:46:05 +0200
Subject: [PATCH] Backport modern messages sending API


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 4944e18154c69cc1eaafc1e27938ff307debdf9b..1fac1b6c69cba1eda32da6f189d648a4a4434a79 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -20,6 +20,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.md_5.bungee.api.ChatMessageType;
 import net.md_5.bungee.api.chat.BaseComponent;
 
 import net.minecraft.server.*;
@@ -67,6 +68,10 @@ import org.bukkit.scoreboard.Scoreboard;
 // PaperSpigot start
 import org.github.paperspigot.Title;
 // PaperSpigot end
+// Unicorn start
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+// Unicorn end
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -166,20 +171,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     // Paper start
-    @Override
-    public void sendMessage(BaseComponent component) {
-        sendMessage(new BaseComponent[]{component});
-    }
-
-    @Override
-    public void sendMessage(BaseComponent... components) {
-        if (getHandle().playerConnection == null) return;
-
-        PacketPlayOutChat packet = new PacketPlayOutChat();
-        packet.components = components;
-        getHandle().playerConnection.sendPacket(packet);
-    }
-
     @Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
         PacketPlayOutPlayerListHeaderFooter packet = new PacketPlayOutPlayerListHeaderFooter();
@@ -201,41 +192,41 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setSubtitle(BaseComponent[] subtitle) {
+    public void setSubtitle(@Nullable BaseComponent[] subtitle) {
         getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.SUBTITLE, subtitle, 0, 0, 0));
     }
 
     @Override
-    public void setSubtitle(BaseComponent subtitle) {
+    public void setSubtitle(@Nullable BaseComponent subtitle) {
         setSubtitle(new BaseComponent[]{subtitle});
     }
 
     @Override
-    public void showTitle(BaseComponent[] title) {
+    public void showTitle(@NotNull BaseComponent[] title) {
         getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TITLE, title, 0, 0, 0));
     }
 
     @Override
-    public void showTitle(BaseComponent title) {
+    public void showTitle(@NotNull BaseComponent title) {
         showTitle(new BaseComponent[]{title});
     }
 
     @Override
-    public void showTitle(BaseComponent[] title, BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+    public void showTitle(@NotNull BaseComponent[] title, @Nullable BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
         setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
         setSubtitle(subtitle);
         showTitle(title);
     }
 
     @Override
-    public void showTitle(BaseComponent title, BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+    public void showTitle(@NotNull BaseComponent title, @Nullable BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
         setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
         setSubtitle(subtitle);
         showTitle(title);
     }
 
     @Override
-    public void sendTitle(Title title) {
+    public void sendTitle(@NotNull Title title) {
         Preconditions.checkNotNull(title, "Title is null");
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         setSubtitle(title.getSubtitle() == null ? new BaseComponent[0] : title.getSubtitle());
@@ -243,7 +234,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void updateTitle(Title title) {
+    public void updateTitle(@NotNull Title title) {
         Preconditions.checkNotNull(title, "Title is null");
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         if (title.getSubtitle() != null) {
@@ -1492,7 +1483,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendTitle(String title, String subtitle) {
+    public void sendTitle(@NotNull String title, @NotNull String subtitle) {
         if (title != null) {
             PacketPlayOutTitle packetTitle = new PacketPlayOutTitle(EnumTitleAction.TITLE, CraftChatMessage.fromString(title)[0]);
             getHandle().playerConnection.sendPacket(packetTitle);
@@ -1617,19 +1608,26 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return java.util.Collections.unmodifiableSet( ret );
         }
 
+        // Unicorn start
         @Override
-        public void sendMessage(BaseComponent component) {
-          sendMessage( new BaseComponent[] { component } );
+        public void sendMessage(@NotNull ChatMessageType position, @NotNull BaseComponent component) {
+            this.sendMessage( position, new BaseComponent[] { component } );
         }
 
         @Override
-        public void sendMessage(BaseComponent... components) {
-           if ( getHandle().playerConnection == null ) return;
-
-            PacketPlayOutChat packet = new PacketPlayOutChat();
+        public void sendMessage(@NotNull ChatMessageType position, @NotNull BaseComponent... components) {
+            PlayerConnection connection = getHandle().playerConnection;
+            if (connection == null ) return;
+
+            PacketPlayOutChat packet = new PacketPlayOutChat(null, (byte) position.ordinal());
+            // Action bar doesn't render colors, replace colors with legacy section symbols
+            if (position == ChatMessageType.ACTION_BAR) {
+                components = new BaseComponent[]{new net.md_5.bungee.api.chat.TextComponent(BaseComponent.toLegacyText(components))};
+            }
             packet.components = components;
-            getHandle().playerConnection.sendPacket(packet);
+            connection.sendPacket(packet);
         }
+        // Unicorn end
 
         // PaperSpigot start - Implement affects spawning API
         @Override
