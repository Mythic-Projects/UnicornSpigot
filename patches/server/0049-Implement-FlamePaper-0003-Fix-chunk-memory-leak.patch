From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Tue, 20 Jun 2023 00:18:12 +0200
Subject: [PATCH] Implement [FlamePaper-0003] Fix chunk memory leak


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index cc215c4f41524ae2fb60b492b61570159a2a5fef..0fd5a277cd97f3f86d594379eb40ae346c8a0d1d 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -32,7 +32,7 @@ public class ChunkProviderServer implements IChunkProvider {
     public it.unimi.dsi.fastutil.longs.LongSet unloadQueue = new it.unimi.dsi.fastutil.longs.LongOpenHashSet(20); // IonSpigot - use fastutil set
     public Chunk emptyChunk;
     public IChunkProvider chunkProvider;
-    private IChunkLoader chunkLoader;
+    public IChunkLoader chunkLoader; // FlamePaper - Make chunkloader public
     public boolean forceChunkLoad = false; // CraftBukkit - true -> false
     public it.unimi.dsi.fastutil.longs.Long2ObjectMap<Chunk> chunks = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f); // SportPaper - use fastutil map
     public WorldServer world;
@@ -264,7 +264,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunkNOP(Chunk chunk) {
-        if (this.chunkLoader != null) {
+        if (canSave() && this.chunkLoader != null) { // FlamePaper
             try {
                 this.chunkLoader.b(this.world, chunk);
             } catch (Exception exception) {
@@ -275,7 +275,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunk(Chunk chunk) {
-        if (this.chunkLoader != null) {
+        if (canSave() && this.chunkLoader != null) { // FlamePaper
             try {
                 chunk.setLastSaved(this.world.getTime());
                 this.chunkLoader.a(this.world, chunk);
@@ -369,8 +369,10 @@ public class ChunkProviderServer implements IChunkProvider {
 
     }
 
-    public boolean unloadChunks() {
-        if (!this.world.savingDisabled) {
+    // FlamePaper start
+    public boolean unloadChunks(boolean force) {
+        if (!this.world.savingDisabled && (canSave() || force)) {
+    // FlamePaper end
             // CraftBukkit start
             Server server = this.world.getServer();
             // SportPaper start
@@ -421,6 +423,12 @@ public class ChunkProviderServer implements IChunkProvider {
         return this.chunkProvider.unloadChunks();
     }
 
+    // FlamePaper start
+    public boolean unloadChunks() {
+        return this.unloadChunks(false);
+    }
+    // FlamePaper end
+
     public boolean canSave() {
         return !this.world.savingDisabled;
     }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 2a93fee0880834efd1689ff14dd64caa7b753544..39f199480183e9e076b9e37b18a4c8135a0ac250 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -17,8 +17,10 @@ import org.apache.logging.log4j.Logger;
 public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     private static final Logger a = LogManager.getLogger();
-    private Map<ChunkCoordIntPair, NBTTagCompound> b = new ConcurrentHashMap();
-    private Set<ChunkCoordIntPair> c = Collections.newSetFromMap(new ConcurrentHashMap());
+    // FlamePaper start - Make b and c public
+    public Map<ChunkCoordIntPair, NBTTagCompound> b = new ConcurrentHashMap();
+    public Set<ChunkCoordIntPair> c = Collections.newSetFromMap(new ConcurrentHashMap());
+    // FlamePaper end
     private final File d;
     private boolean e = false;
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 7b542969577b543668ac6e6731263923ca06d0bd..a62d801a2022bd8aa8c954f4946ea3bba9c14430 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -228,7 +228,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             // CraftBukkit end
         }
         // CraftBukkit end
-        this.chunkProvider.unloadChunks();
+        // FlamePaper start - Only unload if chunkProvider isn't null
+        if (this.chunkProvider != null) {
+            this.chunkProvider.unloadChunks();
+        }
+        // FlamePaper end
         int j = this.a(1.0F);
 
         if (j != this.ab()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b27932264d20e0270280d8eaca3766999f96a506..2a1559da313965ad1e850211031a6949e3d81704 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1110,7 +1110,29 @@ public final class CraftServer implements Server {
             } catch (ExceptionWorldConflict ex) {
                 getLogger().log(Level.SEVERE, null, ex);
             }
+        // FlamePaper start - Fix chunk memory leak
+        } else {
+            ChunkProviderServer chunkProviderServer = handle.chunkProviderServer;
+            // Unicorn start - Add instanceof check
+            if (chunkProviderServer.chunkLoader instanceof ChunkRegionLoader) {
+                ChunkRegionLoader regionLoader = (ChunkRegionLoader) chunkProviderServer.chunkLoader;
+                regionLoader.b.clear();
+                regionLoader.c.clear();
+            }
+            // Unicorn end
+
+            try {
+                FileIOThread.a().b();
+            } catch (InterruptedException ex) {
+                Thread.currentThread().interrupt();
+            }
+
+            chunkProviderServer.unloadChunks(true);
+            chunkProviderServer.chunkLoader = null;
+            chunkProviderServer.chunkProvider = null;
+            chunkProviderServer.chunks.clear();
         }
+        // FlamePaper end
 
         worlds.remove(world.getName().toLowerCase());
         console.worlds.remove(console.worlds.indexOf(handle));
