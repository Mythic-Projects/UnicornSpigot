From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Techcable <techcable@outlook.com>
Date: Thu, 22 Jun 2023 02:19:24 +0200
Subject: [PATCH] Implement [Paper-0023] Use ASM for event executors by
 Techcable


diff --git a/build.gradle.kts b/build.gradle.kts
index a10a4d1093c5624c0a73967531e0017e701d9fdc..56075e223bc641271e661b8118f304e14a26de5f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -18,6 +18,11 @@ dependencies {
     // Unicorn libraries start
     api("org.apache.commons:commons-lang3:3.12.0") // Unicorn - updated commons-lang3 to 3.12.0 // Unicorn - Add commons-lang3 to API
     api("org.jetbrains:annotations:24.0.1") // Unicorn - add jetbrains annotations - future is now ðŸ˜Ž
+
+    // Paper start - Use ASM for event executors
+    implementation("org.ow2.asm:asm:9.4")
+    implementation("org.ow2.asm:asm-commons:9.4")
+    // Paper end
     // Unicorn libraries end
 
     // testing
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..28cec1616a1f8d348e9903bfc0ca33ccadd99997
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -0,0 +1,41 @@
+package com.destroystokyo.paper.event.executor;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventException;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.EventExecutor;
+import org.jetbrains.annotations.NotNull;
+
+public class MethodHandleEventExecutor implements EventExecutor {
+    private final Class<? extends Event> eventClass;
+    private final MethodHandle handle;
+
+    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull MethodHandle handle) {
+        this.eventClass = eventClass;
+        this.handle = handle;
+    }
+
+    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+        this.eventClass = eventClass;
+        try {
+            m.setAccessible(true);
+            this.handle = MethodHandles.lookup().unreflect(m);
+        } catch (IllegalAccessException e) {
+            throw new AssertionError("Unable to set accessible", e);
+        }
+    }
+
+    @Override
+    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+        if (!this.eventClass.isInstance(event)) return;
+        try {
+            this.handle.invoke(listener, event);
+        } catch (Throwable t) {
+            SneakyThrow.sneaky(t);
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b1248debc89e8b668d2e6831145525f7f1c184b
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -0,0 +1,40 @@
+package com.destroystokyo.paper.event.executor;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import com.google.common.base.Preconditions;
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventException;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.EventExecutor;
+import org.jetbrains.annotations.NotNull;
+
+public class StaticMethodHandleEventExecutor implements EventExecutor {
+    private final Class<? extends Event> eventClass;
+    private final MethodHandle handle;
+
+    public StaticMethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+        Preconditions.checkArgument(Modifier.isStatic(m.getModifiers()), "Not a static method: %s", m);
+        Preconditions.checkArgument(eventClass != null, "eventClass is null");
+        this.eventClass = eventClass;
+        try {
+            m.setAccessible(true);
+            this.handle = MethodHandles.lookup().unreflect(m);
+        } catch (IllegalAccessException e) {
+            throw new AssertionError("Unable to set accessible", e);
+        }
+    }
+
+    @Override
+    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+        if (!this.eventClass.isInstance(event)) return;
+        try {
+            this.handle.invoke(event);
+        } catch (Throwable throwable) {
+            SneakyThrow.sneaky(throwable);
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6007f73666c6938d65ea3bd347c601edf4397ee
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -0,0 +1,63 @@
+package com.destroystokyo.paper.event.executor.asm;
+
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.bukkit.plugin.EventExecutor;
+import org.jetbrains.annotations.NotNull;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Type;
+import org.objectweb.asm.commons.GeneratorAdapter;
+
+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
+import static org.objectweb.asm.Opcodes.V1_8;
+
+public class ASMEventExecutorGenerator {
+
+    private static final String EXECUTE_DESCRIPTOR = "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V";
+
+    public static byte @NotNull [] generateEventExecutor(@NotNull Method m, @NotNull String name) {
+        ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
+        writer.visit(V1_8, ACC_PUBLIC, name.replace('.', '/'), null, Type.getInternalName(Object.class), new String[]{Type.getInternalName(EventExecutor.class)});
+        // Generate constructor
+        GeneratorAdapter methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null), ACC_PUBLIC, "<init>", "()V");
+        methodGenerator.loadThis();
+        methodGenerator.visitMethodInsn(INVOKESPECIAL, Type.getInternalName(Object.class), "<init>", "()V", false); // Invoke the super class (Object) constructor
+        methodGenerator.returnValue();
+        methodGenerator.endMethod();
+        // Generate the execute method
+        methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "execute", EXECUTE_DESCRIPTOR, null, null), ACC_PUBLIC, "execute", EXECUTE_DESCRIPTOR);
+        methodGenerator.loadArg(0);
+        methodGenerator.checkCast(Type.getType(m.getDeclaringClass()));
+        methodGenerator.loadArg(1);
+        methodGenerator.checkCast(Type.getType(m.getParameterTypes()[0]));
+        methodGenerator.visitMethodInsn(m.getDeclaringClass().isInterface() ? INVOKEINTERFACE : INVOKEVIRTUAL, Type.getInternalName(m.getDeclaringClass()), m.getName(), Type.getMethodDescriptor(m), m.getDeclaringClass().isInterface());
+        // The only purpose of this switch statement is to generate the correct pop instruction, should the event handler method return something other than void.
+        // Non-void event handlers will be unsupported in a future release.
+        switch (Type.getType(m.getReturnType()).getSize()) {
+            // case 0 is omitted because the only type that has size 0 is void - no pop instruction needed.
+            case 1: {
+                methodGenerator.pop(); // handles reference types and most primitives
+                break;
+            }
+            case 2: {
+                methodGenerator.pop2(); // handles long and double
+                break;
+            }
+        }
+        methodGenerator.returnValue();
+        methodGenerator.endMethod();
+        writer.visitEnd();
+        return writer.toByteArray();
+    }
+
+    public static AtomicInteger NEXT_ID = new AtomicInteger(1);
+
+    @NotNull
+    public static String generateName() {
+        int id = NEXT_ID.getAndIncrement();
+        return "com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor" + id;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e88c032cbc7df978af2853638bb9c56cdfe7a1f
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
@@ -0,0 +1,34 @@
+package com.destroystokyo.paper.event.executor.asm;
+
+import org.jetbrains.annotations.NotNull;
+
+public interface ClassDefiner {
+
+    /**
+     * Returns if the defined classes can bypass access checks
+     *
+     * @return if classes bypass access checks
+     */
+    public default boolean isBypassAccessChecks() {
+        return false;
+    }
+
+    /**
+     * Define a class
+     *
+     * @param parentLoader the parent classloader
+     * @param name         the name of the class
+     * @param data         the class data to load
+     * @return the defined class
+     * @throws ClassFormatError     if the class data is invalid
+     * @throws NullPointerException if any of the arguments are null
+     */
+    @NotNull
+    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, byte @NotNull [] data);
+
+    @NotNull
+    public static ClassDefiner getInstance() {
+        return SafeClassDefiner.INSTANCE;
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
new file mode 100644
index 0000000000000000000000000000000000000000..69912622653adee84d9d38ee861b2f6bad093661
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -0,0 +1,63 @@
+package com.destroystokyo.paper.event.executor.asm;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.MapMaker;
+import java.util.concurrent.ConcurrentMap;
+import org.jetbrains.annotations.NotNull;
+
+public class SafeClassDefiner implements ClassDefiner {
+    /* default */ static final SafeClassDefiner INSTANCE = new SafeClassDefiner();
+
+    private SafeClassDefiner() {
+    }
+
+    private final ConcurrentMap<ClassLoader, GeneratedClassLoader> loaders = new MapMaker().weakKeys().makeMap();
+
+    @NotNull
+    @Override
+    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data) {
+        GeneratedClassLoader loader = this.loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
+        synchronized (loader.getClassLoadingLock(name)) {
+            Preconditions.checkState(!loader.hasClass(name), "%s already defined", name);
+            Class<?> c = loader.define(name, data);
+            assert c.getName().equals(name);
+            return c;
+        }
+    }
+
+    private static class GeneratedClassLoader extends ClassLoader {
+        static {
+            ClassLoader.registerAsParallelCapable();
+        }
+
+        protected GeneratedClassLoader(@NotNull ClassLoader parent) {
+            super(parent);
+        }
+
+        private Class<?> define(@NotNull String name, byte[] data) {
+            synchronized (this.getClassLoadingLock(name)) {
+                assert !this.hasClass(name);
+                Class<?> c = this.defineClass(name, data, 0, data.length);
+                this.resolveClass(c);
+                return c;
+            }
+        }
+
+        @Override
+        @NotNull
+        public Object getClassLoadingLock(@NotNull String name) {
+            return super.getClassLoadingLock(name);
+        }
+
+        public boolean hasClass(@NotNull String name) {
+            synchronized (this.getClassLoadingLock(name)) {
+                try {
+                    Class.forName(name);
+                    return true;
+                } catch (ClassNotFoundException e) {
+                    return false;
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
new file mode 100644
index 0000000000000000000000000000000000000000..478b86649547b2f802eac872244f5e85dccd65aa
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
@@ -0,0 +1,16 @@
+package com.destroystokyo.paper.util;
+
+import org.jetbrains.annotations.NotNull;
+
+public class SneakyThrow {
+
+    public static void sneaky(@NotNull Throwable exception) {
+        SneakyThrow.<RuntimeException>throwSneaky(exception);
+    }
+
+    @SuppressWarnings("unchecked")
+    private static <T extends Throwable> void throwSneaky(@NotNull Throwable exception) throws T {
+        throw (T) exception;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index 3b2c99ea7b30c8c4c03ffaca91c83d2e63338396..92f35a17b77309d7fbec0a4f5f38e36d92c43d26 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -4,9 +4,76 @@ import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 
+// Paper start
+import org.jetbrains.annotations.NotNull;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.function.Function;
+
+import com.destroystokyo.paper.event.executor.MethodHandleEventExecutor;
+import com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor;
+import com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator;
+import com.destroystokyo.paper.event.executor.asm.ClassDefiner;
+import com.google.common.base.Preconditions;
+// Paper end
+
 /**
  * Interface which defines the class for event call backs to plugins
  */
 public interface EventExecutor {
     public void execute(Listener listener, Event event) throws EventException;
+
+     // Paper start
+    ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<Method, Class<? extends EventExecutor>>() {
+        @NotNull
+        @Override
+        public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
+            Class<? extends EventExecutor> executorClass = get(key);
+            if (executorClass != null)
+                return executorClass;
+
+            //noinspection SynchronizationOnLocalVariableOrMethodParameter
+            synchronized (key) {
+                executorClass = get(key);
+                if (executorClass != null)
+                    return executorClass;
+
+                return super.computeIfAbsent(key, mappingFunction);
+            }
+        }
+    };
+
+    @NotNull
+    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
+        Preconditions.checkNotNull(m, "Null method");
+        Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
+        Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
+        ClassDefiner definer = ClassDefiner.getInstance();
+        if (Modifier.isStatic(m.getModifiers())) {
+            return new StaticMethodHandleEventExecutor(eventClass, m);
+        } else if (definer.isBypassAccessChecks() || Modifier.isPublic(m.getDeclaringClass().getModifiers()) && Modifier.isPublic(m.getModifiers())) {
+            // get the existing generated EventExecutor class for the Method or generate one
+            Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
+                String name = ASMEventExecutorGenerator.generateName();
+                byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
+                return definer.defineClass(m.getDeclaringClass().getClassLoader(), name, classData).asSubclass(EventExecutor.class);
+            });
+
+            try {
+                EventExecutor asmExecutor = executorClass.newInstance();
+                // Define a wrapper to conform to bukkit stupidity (passing in events that don't match and wrapper exception)
+                return (listener, event) -> {
+                    if (!eventClass.isInstance(event)) return;
+                    asmExecutor.execute(listener, event);
+                };
+            } catch (InstantiationException | IllegalAccessException e) {
+                throw new AssertionError("Unable to initialize generated event executor", e);
+            }
+        } else {
+            return new MethodHandleEventExecutor(eventClass, m);
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 725fed92f6497fc6d7b805b0a55aeb2416c0ba5f..d29b7c3b5fc170a41e135e95ac08e84085ffe23a 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -291,20 +291,7 @@ public final class JavaPluginLoader implements PluginLoader {
                 }
             }
 
-            EventExecutor executor = new co.aikar.timings.TimedEventExecutor(new EventExecutor() { // Spigot
-                public void execute(Listener listener, Event event) throws EventException {
-                    try {
-                        if (!eventClass.isAssignableFrom(event.getClass())) {
-                            return;
-                        }
-                        method.invoke(listener, event);
-                    } catch (InvocationTargetException ex) {
-                        throw new EventException(ex.getCause());
-                    } catch (Throwable t) {
-                        throw new EventException(t);
-                    }
-                }
-            }, plugin, method, eventClass); // Spigot
+            EventExecutor executor = EventExecutor.create(method, eventClass); // Paper
             if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
